AS09 Assembler for M6809 [1.42].                                     Page    1
--------------------------------- FLEX9.asm ----------------------------------

5507 lines read, no errors in pass 1.
                        *
                        * assemble with as09, build binary
                        * as09 -inxsl FLEX9.asm
                        * srec_cat FLEX9.s19 -offset - -minimum-addr FLEX9.s19
                        *
                        
                        		include "SPOOLER.asm"
                        *        NAM     SPOOLER.TXT
                        *        OPT     pag
                        *       LEN     96
                        *        page
                        
                        *************************************************
                        *                                               *
                        *       FLEX Spooler (for task switching)       *
                        *                                               *
                        *************************************************
                        
                        ;ZC810   equ     $C810
                        ;SYSFCB  equ     $C840
c980 =                  ZC980   equ     $C980
                        
                        ;FMSBUSY equ     $CC30
                        ;CP      equ     $CC31
                        ;ZCC34   equ     $CC34
                        ;PRDYCH  equ     $CCD8
                        ;PTROUT  equ     $CCE4
                        ;PR0     equ     $CCF8
                        ;PR1     equ     $CCFC
                        
                        ;IHNDLR  equ     $D3E7
                        ;TIMOFF  equ     $D3ED
                        
                        ;FMSCAL  equ     $D406
                                page
AS09 Assembler for M6809 [1.42].                                     Page    2
--------------------------------- FLEX9.asm ----------------------------------

                        
c700 =                          org     $C700
                        
c700 : 7ec723                   jmp     >ZC723          ;scheduler
c703 : 7ec75c                   jmp     >ZC75C          
c706 : 7ec75d                   jmp     >ZC75D          ;queue handler
c709 : 7ec74c                   jmp     >ZC74C		    ; LOCK
c70c : 7ec757                   jmp     >ZC757			; UNLOCK
c70f : 7ec71f                   jmp     >ZC71F          ;IRQ ISR
                                                        ;
c712 : 0c               ZC712   fcb     $0C             ;TOF character
c713 : 00000000                 fcb     $00,$00,$00,$00 ;
c717 : c4ce                     fdb     ZC810           ;first queue entry poi
c719 : c4ce             ZC719   fdb     ZC810           ;current queue entry p
c71b : 00               ZC71B   fcb     $00             ;queue count
c71c : 00               ZC71C   fcb     $00             ;<cr> flag
c71d : 00               ZC71D   fcb     $00             ;qcheck 'kill' flag
c71e : 00               ZC71E   fcb     $00             ;qcheck 'suspend' flag
                                                        ;
c71f : 6e9fd3e7         ZC71F   jmp     [IHNDLRP]        ;handle IRQ
                                                        ;
                        *       scheduler               ;
                                                        ;
c723 : 1a50             ZC723   orcc    #$50            ;disable IRQ and FIRQ
c725 : becc31                   ldx     >CP             ;get stack address
c728 : 10ef02                   sts     $02,x           ;save current system s
c72b : 7dcc34                   tst     >PRCNT          ;see if spooling is ac
c72e : 2611                     bne     ZC741           ;yes - go toggle task
                                                        ;
c730 : 8eccfc                   ldx     #PR1            ;point to background t
c733 : 7ccc34                   inc     >PRCNT          ;bump spooling active 
c736 : 6d84                     tst     ,x              ;see if we are printin
c738 : 2707                     beq     ZC741           ;no - clear spooling f
                                                        ;
c73a : bfcc31           ZC73A   stx     >CP             ;set task stack pointe
c73d : 10ee02                   lds     $02,x           ;restore stack pointer
c740 : 3b                       rti                     ;return from interrupt
                                                        ;
                        *       toggle background and fo;rground tasks
                                                        ;
c741 : 8eccf8           ZC741   ldx     #PR0            ;load foreground task 
c744 : 7fcc34                   clr     >PRCNT          ;set spooling inactive
c747 : 20f1                     bra     ZC73A           ;go set the foreground
                                                        ;
                        *                               ;
                                                        ;
c749 : 113f             ZC749   swi3                    ;
c74b : 12                       nop                     ;
                                                        ;
c74c : 1a50             ZC74C   orcc    #$50            ;disable IRQ and FIRQ
c74e : 7dcc30                   tst     >FMSBSY        ; 
c751 : 26f6                     bne     ZC749           ;
c753 : 7ccc30                   inc     >FMSBSY        ; 
c756 : 39                       rts                     ;
                                                        ;
c757 : 7fcc30           ZC757   clr     >FMSBSY        ;
c75a : 1caf                     andcc   #$AF            ;
                                                        ;
c75c : 39               ZC75C   rts                     ;
                                                        ;
                        *       queue handler           ;
                                                        ;
AS09 Assembler for M6809 [1.42].                                     Page    3
--------------------------------- FLEX9.asm ----------------------------------

c75d : 1a50             ZC75D   orcc    #$50            ;disable IRQ and FIRQ
c75f : 7dc71b                   tst     >ZC71B          ;see if queue count = 
c762 : 2729                     beq     ZC78D           ;yes - queue is empty
c764 : bec719                   ldx     >ZC719          ;no - get queue contro
c767 : a684                     lda     ,x              ;get drive number
c769 : 3402                     pshs    a               ;save it
c76b : ec01                     ldd     $01,x           ;get next track and se
c76d : 8ec980                   ldx     #ZC980          ;point to queue file c
c770 : ed8840                   std     $40,x           ;set link in FCB
c773 : 3502                     puls    a               ;get drive
c775 : a703                     sta     $03,x           ;set in FCB
c777 : 6f84                     clr     ,x              ;set function = open f
c779 : 8601                     lda     #$01            ;set activity status o
c77b : a702                     sta     $02,x           ;
c77d : 6f8822                   clr     $22,x           ;clear data index
c780 : 6f883b                   clr     $3B,x           ;and set space compres
                                                        ;
c783 : 7dc71e           ZC783   tst     >ZC71E          ;are we suspended?
c786 : 270f                     beq     ZC79B           ;no - output the file 
c788 : 113f                     swi3                    ;yes - go to scheduler
c78a : 12                       nop                     ;
c78b : 20f6                     bra     ZC783           ;loop
                                                        ;
                        *       turn timer off and exit ;to foreground task
                                                        ;
c78d : 7fccfc           ZC78D   clr     >PR1            ;say that background t
c790 : 1caf                     andcc   #$AF            ;allow IRQ and FIRQ
c792 : 113f                     swi3                    ;go to scheduler
c794 : 12                       nop                     ;
c795 : 20f6                     bra     ZC78D           ;loop
                                                        ;
                        *       output the current file ;in the queue
                                                        ;
c797 : 7dc71d           ZC79B   tst     >ZC71D          ;kill flag set?
c79a : 2627                     bne     ZC7C7           ;yes - set up next que
                                                        ;
c79c : 8ec980                   ldx     #ZC980          ;point to queue FCB
c79f : bdd406                   jsr     >FMS         ;read a byte of data
c7a2 : 261f                     bne     ZC7C7           ;error or end of file
                                                        ;
c7a4 : 7dc71c                   tst     >ZC71C          ;<cr> flag set?
c7a7 : 270f                     beq     ZC7BC           ;no -
                                                        ;
c7a9 : 7fc71c                   clr     >ZC71C          ;yes - clear it and do
c7ac : 810a                     cmpa    #$0A            ;was the character alr
c7ae : 270f                     beq     ZC7C3           ;yes - just do one
c7b0 : 3402                     pshs    a               ;no - save character
c7b2 : 860a                     lda     #$0A            ;and do a line feed
c7b4 : 8d3f                     bsr     ZC7F9           ;output character
c7b6 : 3502                     puls    a               ;restore character
                                                        ;
c7b8 : 810d             ZC7BC   cmpa    #$0D            ;is character a <cr>?
c7ba : 2603                     bne     ZC7C3           ;no - then just output
c7bc : b7c71c                   sta     >ZC71C          ;yes - set <cr> flag
                                                        ;
c7bf : 8d34             ZC7C3   bsr     ZC7F9           ;output the character 
c7c1 : 20d4                     bra     ZC79B           ;
                                                        ;
                        *       got to end of file or FM;S error - do next que
                                                        ;
c7c3 : 860d             ZC7C7   lda     #$0D            ;close output file wit
c7c5 : 8d2e                     bsr     ZC7F9           ;
AS09 Assembler for M6809 [1.42].                                     Page    4
--------------------------------- FLEX9.asm ----------------------------------

c7c7 : 860a                     lda     #$0A            ;and line feed
c7c9 : 8d2a                     bsr     ZC7F9           ;
c7cb : b6c712                   lda     >ZC712          ;get TOF character
c7ce : 8d25                     bsr     ZC7F9           ;output it also
c7d0 : 7fc71d                   clr     >ZC71D          ;reset kill flag
c7d3 : bec719                   ldx     >ZC719          ;point to current entr
c7d6 : 6d03                     tst     $03,x           ;see if all copies hav
c7d8 : 2705                     beq     ZC7E3           ;yes - do next entry i
c7da : 6a03                     dec     $03,x           ;no - decrement count
c7dc : 7ec75d                   jmp     >ZC75D          ;loop on queue handler
                                                        ;
                        *       bump control pointer to ;next entry
                                                        ;
c7df : 3004             ZC7E3   leax    $04,x           ;bump pointer
c7e1 : 8cc840                   cmpx    #SYSFCB         ;overflow?
c7e4 : 2603                     bne     ZC7ED           ;no - set pointer to n
c7e6 : 8ec4ce                   ldx     #ZC810          ;yes - reset queue poi
                                                        ;
c7e9 : bfc719           ZC7ED   stx     >ZC719          ;set pointer to next e
c7ec : 7ac71b                   dec     >ZC71B          ;decrement queue count
c7ef : 7ec75d                   jmp     >ZC75D          ;loop on queue handler
                                                        ;
                        *                               ;
                                                        ;
c7f2 : 113f             ZC7F6   swi3                    ;
c7f4 : 12                       nop                     ;
                                                        ;
                        *       output to printer       ;
                                                        ;
c7f5 : bdccd8           ZC7F9   jsr     >PCHK           ;PRDYCH printer ready?
c7f8 : 2af8                     bpl     ZC7F6           ;no - go to scheduler
c7fa : 7ecce4                   jmp     >POUT           ;PTROUT -yes - ouput b
                        
                                end
                        
                        		include "INIT.asm"
                        *        NAM     INIT.TXT
                        *        OPT     pag
                        *       LEN     96
                                page
AS09 Assembler for M6809 [1.42].                                     Page    5
--------------------------------- FLEX9.asm ----------------------------------

                        *************************************************
                        *                                               *
                        *       flex 2.9:1 initialization code          *
                        *                                               *
                        *************************************************
c000 =                  STARTOFFLEX	equ	$C000
deff =                  ENDOFFLEX	equ	$DEFF
                        
c080 =                  LNBUFF  equ     $C080
c100 =                  STARTR  equ     $C100
                        ;SYSFCB  equ     $C840
                        
                        ;SMONTH  equ     $CC0E
                        ;LNBUFP  equ     $CC14
                        ;ESCRTN  equ     $CC16
                        ;MEMEND  equ     $CC2B
                        ;CPUTYP  equ     $CC33
                        ;PROMPT  equ     $CC4E
                        
cd00 =                  COLDST  equ     $CD00
cd03 =                  WARMST  equ     $CD03
                        ;RENTER  equ     $CD06
                        ;INCH    equ     $CD09
                        ;INCH2   equ     $CD0C
                        ;OUTCH   equ     $CD0F
                        ;OUTCH2  equ     $CD12
                        ;INBUFF  equ     $CD1B
                        ;PSTRNG  equ     $CD1E
                        ;PRCRLF  equ     $CD24
cd48 =                  INDECM  equ     $CD48
                        ;STAT    equ     $CD4E
                        
d0f0 =                  ZD0F0   equ     $D0F0
d0f1 =                  ZD0F1   equ     $D0F1
                        
d370 =                  STIME   equ     $D370
                        
                        ;IHNDLR  equ     $D3E7
                        ;TIMOFF  equ     $D3ED
                        ;TIMON   equ     $D3EF
                        ;TMINIT  equ     $D3F1
                        ;TRMINT  equ     $D3F5
                        ;TRMCHK  equ     $D3F7
                        ;TIMOUT  equ     $D3F9
                        ;TIMINE  equ     $D3FB
d3fd =                  ZD3FD   equ     $D3FD
                        
                        ;FMSCAL  equ     $D406
                        
                        ;DCHECK  equ     $DE0F
                        ;DWARM   equ     $DE18
                        
                        ;ZDFD0   equ     $DFD0
                        ;ZDFDC   equ     $DFDC
                        ;ZDFDD   equ     $DFDD
                        
                        ;ZE005   equ     $E005
                        ;ZE045   equ     $E045
                        ;ZE085   equ     $E085
                        ;ZE090   equ     $E090
                        ;ZE0C5   equ     $E0C5
                        
AS09 Assembler for M6809 [1.42].                                     Page    6
--------------------------------- FLEX9.asm ----------------------------------

                        ;ZF810   equ     $F810
                        ;ZFFF0   equ     $FFF0
                        ;ZFFFC   equ     $FFFC
                        ;ZFFFD   equ     $FFFD
                                page
AS09 Assembler for M6809 [1.42].                                     Page    7
--------------------------------- FLEX9.asm ----------------------------------

                        
                        ****************************************************
                        
                        
                        *
                        * STARTUp rouTINE
                        * THIS RoutinE INITIALIZES CERTAIN PARAMETERS, GETS
                        * DATE From uSER, AND EXECUTES A STARTUP.TXT FILE.
                        
c400 =                          org     $C400
                        
c400 :                  LOADADDR
c400 : 2005             STAR    bra     STAR0
c402 : 822e893a81       Vers    fcb     $82,$2E,$89,$3A,$81
                        
c407 : 8639             STAR0   lda     #$39            ;SET UP RTS
c409 : b7d3fd                   sta     >ZD3FD          ;disable re-entry to t
c40c : cccd03                   ldd     #$CD03          ;setup 'escape routine
c40f : fdcc16                   std     >RETRNR         ;ESCRTN
                                                        ;
c412 : fcd3f7                   ldd     >TRMCHK         ;get address of termin
c415 : fdcd4f                   std     >DSTAT+1         ;set in FLEX status c
                                                        ;
c418 : fcd3f9                   ldd     >TIMOUT         ;get address of termin
c41b : fdcd10                   std     >OUTCH+1        ;set in FLEX out char 
c41e : fdcd13                   std     >OUTCH2+1       ;set in FLEX alternate
                                                        ;
c421 : fcd3fb                   ldd     >TIMINE         ;get address of termin
c424 : fdcd0a                   std     >INCH+1         ;set in FLEX in char j
c427 : fdcd0d                   std     >INCH2+1        ;set in FLEX alt in ch
                                               ;
c42a : ad9fd3f5                 jsr     [TINITP]        ;do terminal init
                                
c42e : 8ec4ce                   ldx     #ZC810          ;point to Flex version
c431 : bdce79                   jsr     >PSTRNG         ;print to terminal    
c434 : bdcd24                   jsr     >DPCRLF         ;and CRLF
                                                       ;
c437 :                  ZC43A   ;ldd     >PPRMPT         ;PROMPT get  current 
                        ;        pshs    b,a             ;save it
                        ;        ldx     #ZC82E          ;request for date - P
                        ;        stx     >PPRMPT         ;set new prompt point
                        ;        jsr     >PSTRNG         ;do prompt
                        ;        jsr     >DINBUF         ;get date
                        ;        puls    b,a             ;restore prompt point
                        ;        std     >PPRMPT         ;
                        ;        ldy     #SYSMTH         ;SMONTH point Y reg t
                        ;        bsr     ZC4A0           ;convert month from a
                        ;        bcs     ZC43A           ;no good - retry
                                                        ;
                        ;        bsr     ZC4A0           ;convert day from asc
                        ;        bcs     ZC43A           ;no good - retry
                                                        ;
                        ;        bsr     ZC4A0           ;convert year from as
                        ;        bcs     ZC43A           ;no good - retry
                                                        ;
                        ;        ldy     #STIME          ;point Y reg to syste
                        ;        bsr     ZC4A0           ;
                        ;        bcs     ZC43A           ;no good - retry
                                                        ;
                        ;       bsr     ZC4A0           ;
                        ;        bcs     ZC43A           ;no good - retry
                                                        ;
AS09 Assembler for M6809 [1.42].                                     Page    8
--------------------------------- FLEX9.asm ----------------------------------

                        ;        bsr     ZC4A0           ;
                        ;        bcs     ZC43A           ;no good - retry
                        ;        clr     STIME+3         ;clear tick counter
c437 : bdf49b                   jsr     START_RD_RTC                        ;
c43a : bdcd24                   jsr     >DPCRLF         ;do CRLF
                                
c43d : bdde18                   jsr     >DWARM          ;init the disk drivers
c440 : 8ec840                   ldx     #SYSFCB         ;point to STARTUP.TXT 
c443 : bdde0f                   jsr     >DCHECK         ;do disk check
c446 : 8601                     lda     #$01            ;set for read operatio
c448 : a784                     sta     ,x              ;
c44a : bdd406                   jsr     >FMS         	;D406
c44d : 2709                     beq     ZC47E           ;no error
                                                        ;
c44f : a601                     lda     $01,x           ;
c451 : 8104                     cmpa    #$04            ;file not found error?
c453 : 263b                     bne     ZC4B2           ;no -
                                                        ;
c455 : 7ecd03                   jmp     >WARMST         ;yes - ignore file
                                                        ;
c458 : 108ec080         ZC47E   ldy     #LNBUFF         ;init line buffer poin
c45c : 10bfcc14                 sty     >BUFPNT         ;LNBUFP
c460 : c680                     ldb     #$80            ;set byte count to mov
                                                        ;
c462 : bdd406           ZC488   jsr     >FMS            ;get byte from startup
                        		
c465 : 2629                     bne     ZC4B2           ;error
c467 : 5a                       decb                    ;decrement count
c468 : 2726                     beq     ZC4B2           ;done
                                                        ;
c46a : a7a0                     sta     ,y+             ;put character in line
c46c : 810d                     cmpa    #$0D            ;see if EOL character
c46e : 26f2                     bne     ZC488           ;no - loop
                                                        ;
c470 : 8604                     lda     #$04            ;yes - close file
c472 : a784                     sta     ,x              ;
c474 : bdd406                   jsr     >FMS         ;
                        
c477 : 7ecd06                   jmp     >RENTER         ;re-enter FLEX with co
                                                        ;
                        *       convert ascii to decimal;
                                                        ;
c47a : bdcd48           ZC4A0   jsr     >INDECM         ;
c47d : 3410                     pshs    x               ;
c47f : 250d                     bcs     ZC4B0           ;
c481 : a6a4                     lda     ,y              ;
c483 : 5d                       tstb                    ;see if any valid deci
c484 : 1a01                     orcc    #$01            ;set carry flag for er
c486 : 2704                     beq     ZC4AE           ;no - return error
                                                        ;
c488 : a661                     lda     $01,s           ;yes - get returned by
c48a : 1cfe                     andcc   #$FE            ;set carry flag = 0 if
c48c : a7a0             ZC4AE   sta     ,y+             ;put in callers buffer
c48e : 3586             ZC4B0   puls    pc,b,a          ;return
                        
                        *       error in startup file - report it
                        
c490 : 8ec4bb           ZC4B2   ldx     #ZC555          ;can't run startup mes
                                
c493 : bdce79                   jsr     >PSTRNG
                        
c496 : 7ecd03                   jmp     >WARMST
AS09 Assembler for M6809 [1.42].                                     Page    9
--------------------------------- FLEX9.asm ----------------------------------

                        
                        *       fix up number of K of memory available message
                        
c499 : 3414             ZC4BB   pshs    x,b
c49b : 8ec4f6                   ldx     #ZC82B          ;'K' message
c49e : 8604                     lda     #$04
c4a0 : 2006                     bra     ZC4CA
                        
                        *
                        
c4a2 : 800a             ZC4C4   suba    #$0A
c4a4 : a784                     sta     ,x
c4a6 : 8601                     lda     #$01
                        
                        *
                        
c4a8 : ab82             ZC4CA   adda    ,-x
c4aa : 8a30                     ora     #$30
c4ac : a784                     sta     ,x
c4ae : 8139                     cmpa    #$39
c4b0 : 22f0                     bhi     ZC4C4
c4b2 : 3594                     puls    pc,x,b
                        
                        *       return status that no no RTC is available
                        *       but mPT does exist
                        
c4b4 : ad9fd3f1         ZC4D6   jsr     [TMINTP]        ;init timer
c4b8 : 8602                     lda     #$02            ;set flag for MPT
c4ba : 39                       rts
                        
                        *       startup file error message
                        
c4bb : 43616e27742072.. ZC555   fcc     "Can't run STARTUP."
c4cd : 04                       fcb     $04
                        
                        *       flex startup signon message
                        
c4ce :                  ZC810   ;fcb     $1A               ; purpose?
c4ce : 464c455820666f..         fcc     "FLEX for MC6809 Version 2.9:2 - N8VEM
c4f3 : 043438                   fcb     $04,$34,$38   ; purpose?
                        
c4f6 : 34384b2072616d   ZC82B   fcc     "48K ram"
c4fd : 04                       fcb     $04        ; purpose?
c4fe : 04                       fcb     $04
                        
                        *       date prompt
                        
c4ff : 4461746520616e.. ZC82E   fcc     "Date and TIME (MM/DD/YY HH/MM/SS)? "
c522 : 04                       fcb     $04
                        
                        ;        org     SYSFCB		; same data in FLX29CPP
                        
                        ;        fcb     $FF
                        ;        fcb     $00
                        ;        fcb     $00
                        ;        fcb     $00
                        ;        fcc     "startup"
                        ;        fcb     $00
                        ;        fcc     "txt"
                        ;        fcb     $00
                        
                        *************************************************
AS09 Assembler for M6809 [1.42].                                     Page   10
--------------------------------- FLEX9.asm ----------------------------------

                        *                                               *
                        *       flex entry point after boot             *
                        *                                               *
                        *         this must start at $C850              *
                        *       N8VEM doesn't use this!                 *
                        *************************************************
c850 =                  		org $c850
c850 :                  COLDSTART
                        ;SFRES1  orcc    #$50
                                ;lds     #LNBUFF
                                ;ldd     >ZDFDC
                                ;ldx     >ZD0F0
                                ;pshs    x,b,a
                                ;ldx     #$99AA
                                ;ldy     #STARTR+256
                                ;ldb     #$FF
                        
                        ;ZC867   lbsr    ZC91A
                                ;stx     >ZD0F0
                                ;cmpx    >ZD0F0
                                ;bne     ZC888
                                ;pshs    b
                        
                        ;ZC874   lbsr    ZC91A
                                ;stb     >ZD0F1
                                ;subb    #$01
                                ;bcc     ZC874
                        
                                ;puls    b
                                ;lbsr    ZC91A
                                ;cmpb    >ZD0F1
                                ;beq     ZC889
                        ;ZC888   clra
                        
                        ;ZC889   sta     ,-y
                                ;beq     ZC890
                                ;lbsr    ZC4BB
                        
                        ;ZC890   subb    #$01
                                ;bcc     ZC867
                        
                                ;puls    x,b,a
                                ;std     >ZFFFC
                                ;stx     >ZD0F0
                                ;clra
                                ;ldx     #STARTR
                                ;ldb     >ZDFDC
                                ;eorb    #$0F
                                ;clr     d,x
                                ;ldb     >ZDFDD
                                ;eorb    #$0F
                                ;clr     d,x
                                ;bsr     ZC922
                                ;tstb
                                ;beq     ZC8B8
                        
                        ;ZC8B3   clr     ,y+
                                ;decb
                                ;bne     ZC8B3
                        
                        ;ZC8B8   leay    -$0C,y
                                ;ldx     #ZFFF0
AS09 Assembler for M6809 [1.42].                                     Page   11
--------------------------------- FLEX9.asm ----------------------------------

                                ;ldb     #$10
                        
                        ;ZC8BF   lda     ,y+
                                ;sta     ,x+
                                ;decb
                                ;bne     ZC8BF
                                ;lda     >MEMEND
                                ;asla
                                ;asla
                                ;asla
                                ;asla
                                ;clrb     
                                ;subd    #$0001
                                ;std     >MEMEND
                                ;lbsr    ZC4D6
                                ;ora     >CPUTYP
                                ;ldb     >ZDFD0
                                ;bitb    #$F0
                                ;beq     ZC8E3
                                ;ora     #$01
                        
                        ;ZC8E3   ldb     >ZE005
                                ;beq     ZC8FD
                                ;cmpb    #$FF
                                ;beq     ZC8FD
                                ;cmpb    >ZE0C5
                                ;bne     ZC8FD
                                ;cmpb    >ZE045
                                ;bne     ZC8FD
                                ;cmpb    >ZE085
                                ;bne     ZC8FD
                                ;ora     #$04
                        
                        ;ZC8FD   ldx     >$E800
                                ;pshs    x
                                ;ldx     #$99AA
                                ;stx     >$E800
                                ;cmpx    >$E800
                                ;puls    x
                                ;bne     ZC911
                                ;ora     #$10
                        
                        ;ZC911   stx     >$E800
                                ;sta     >CPUTYP
c850 : 7ecd00                   jmp     >COLDST
                        
                        *
                        
                        ;ZC91A   tfr     b,a
                                ;eora    #$0F
                                ;sta     >ZFFFD
                                ;rts
                        
                        ;*
                        
                        ;ZC922   ldb     #$0C
                                ;ldy     #ZDFD0
                        ;*       ldx     #STARTR+16
                                ;ldx     #STARTR
                        
                        ;ZC92B   cmpx    #STARTR+256
                                ;beq     ZC93D
AS09 Assembler for M6809 [1.42].                                     Page   12
--------------------------------- FLEX9.asm ----------------------------------

                                ;lda     ,x+
                                ;beq     ZC92B
                                ;sta     ,y+
                                ;inc     >MEMEND
                                ;decb
                                ;bne     ZC92B
                                ;rts
                        
                        ;ZC93D   ldx     #STARTR
                        
                        ;ZC940   cmpx    #STARTR+16
                                ;beq     ZC951
                                ;lda     ,x+
                                ;beq     ZC940
                                ;sta     ,y+
                                ;inc     >MEMEND
                                ;decb
                                ;bne     ZC940
                        
c853 : 39               ZC951   rts
                        
                                end
                        
                        		include "FLX29CCP.asm"
                        * OPT PAG
                        ;        TTL     TSC 6809 DOS VERSION 2.92
                                page
AS09 Assembler for M6809 [1.42].                                     Page   13
--------------------------------- FLEX9.asm ----------------------------------

                        *
                        * TSC 6809 DISK OPERATING SYSTEM
                        *
                        * COPYRIGHT (C) 1979 BY
                        *
                        * TECHNICAL SYSTEMS CONSULTANTS, INC.
                        * PO BOX 2570
                        * WEST LAFAYETTE, INDIANA  47906
                        *
                        
                        *
                        * GLOBAL VARIABLE STARAGE
                        *
                        
c080 =                  LINBUF  equ     $C080
d40b =                  CURFCB  equ     $D40B
                        
                        * ASCII CODE EQUATES
                        
0000 =                  NUL     equ     $00
0004 =                  EOT     equ     $04
                        
                        * EXTERNAL LABEL EQUATES
                        
c07f =                  STACK   equ     $C07F
c400 =                  LC400   equ     $C400
c700 =                  CHPR    equ     $C700
                        ;INDEX   equ     $CC3D
                        ;CRSAVE  equ     $CC3F
                        ;RETADR  equ     $CC43
                        ;STKSTR  equ     $CC45
                        ;IOTEMP  equ     $CC47
                        ;OUTNUM  equ     $CC4A
                        ;COUNT   equ     $CC4B
                        ;GOTFIL  equ     $CC4C
                        ;TEMP    equ     $CC4D
                        
                        ;INCHNE  equ     $D3E5
                        ;IHNDLR  equ     $D3E7
                        ;SWIVEC  equ     $D3E9
                        ;IRQVEC  equ     $D3EB
                        ;MONITR  equ     $D3F3
                        
                        ;FMSINT  equ     $D400
                        ;FMSCLS  equ     $D403
                        ;FMS     equ     $D406
                        
                        ;DWARM   equ     $DE18
                        
c840 =                          org     $C840
                        
c840 :                  SYSFCB  
c840 : ff000000         		fcb     $FF,0,0,0
c844 : 73746172747570           fcc     "startup"	; SYSTEM HANGS WHEN TRYING T
c84b : 00               		fcb		0
c84c : 747874           		fcc		"txt"
c84f : 00               		fcb		0
                        		
0080 =                  LBL     equ     128         ;LINE BUFFER LENGTH
                        
cc00 =                          org     $CC00
                        
AS09 Assembler for M6809 [1.42].                                     Page   14
--------------------------------- FLEX9.asm ----------------------------------

cc00 : 08               TTYBS   fcb     $08         ;$CC00   ;BACK SPACE (^H)
cc01 : 18               TTYDEL  fcb     $18         ;$CC01   ;DELETE CHARACTER
cc02 : 3a               TTYEOL  fcb     $3A         ;$CC02   ;END OF LINE CHAR
                        ;TTYDP   fcb     $00         ;$CC03   ;LINES PER SCREE
cc03 : 18               TTYDP   fcb     24         ;$CC03   ;LINES PER SCREEN
                        ;COLCNT  fcb     $00         ;$CC04   ;COLUMNS PER LIN
cc04 : 50               COLCNT  fcb     80         ;$CC04   ;COLUMNS PER LINE
                        ;TTYNL   fcb     $06         ;$CC05   ;LINE PADDING NU
cc05 : 00               TTYNL   fcb     $00         ;$CC05   ;LINE PADDING NUL
cc06 : 00               TTYTB   fcb     $00         ;$CC06   ;TAB CHARACTER
                        ;TTYBE   fcb     $00         ;$CC07   ;BACK SPACE ECHO
cc07 : 08               TTYBE   fcb     $08         ;$CC07   ;BACK SPACE ECHO
cc08 : 00               TTYEJ   fcb     $00         ;$CC08   ;EJECT LENGTH
                        ;TTYPS   fcb     $FF         ;$CC09   ;PAUSE CONTROL  
cc09 : 00               TTYPS   fcb     $00         ;$CC09   ;PAUSE CONTROL   
cc0a : 1b               TTYESC  fcb     $1B         ;$CC0A   ;ESCAPE CHARACTER
cc0b : 00               SYSDRV  fcb     $00         ;$CC0B   ;SYSTEM DRIVE
cc0c : 01               WRKDRV  fcb     $01         ;$CC0C   ;WORKING DRIVE
cc0d : 00               SYSFLG  fcb     $00         ;$CC0D   ;SYSTEM FLAG
cc0e : 00               SYSMTH  fcb     $00         ;$CC0E   ;SYSTEM DATE
cc0f : 00               SYSDAY  fcb     $00         ;$CC0F   ;
cc10 : 00               SYSYR   fcb     $00         ;$CC10   ;
cc11 : 00               LSTTRM  fcb     $00         ;$CC11   ;LAST TERMINATOR
cc12 : 0000             USRTBL  fdb     $0000       ;$CC12   ;USER COMMAND TAB
cc14 : 0000             BUFPNT  fdb     $0000       ;$CC14   ;LINE BUFFER POIN
cc16 : 0000             RETRNR  fdb     $0000       ;$CC16   ;ESCAPE RETURN RE
cc18 : 00               CHAR    fcb     $00         ;$CC18   ;CHARACTER
cc19 : 00               PRVCHR  fcb     $00         ;$CC19   ;PREVIOUS CHARACT
cc1a : 00               LINE    fcb     $00         ;$CC1A   ;CURRENT LINE NUM
cc1b : 0000             OFFSET  fdb     $0000       ;$CC1B   ;LOADER ADR OFFSE
cc1d : 00               XFR     fcb     $00         ;$CC1D   ;TRANSFER FLAG
cc1e : 0000             TADR    fdb     $0000       ;$CC1E   ;TRANSFER ADDRESS
cc20 : 00               ERRTYP  fcb     $00         ;$CC20   ;ERROR TYPE
cc21 : 00               SPCLS   fcb     $00         ;$CC21   ;SPECIAL IO FLAG
cc22 : 00               OUTCHN  fcb     $00         ;$CC22   ;OUTPUT CHANNEL B
cc23 : 00               INCHNL  fcb     $00         ;$CC23   ;INPUT CHANNEL BY
cc24 : 0000             FILOUT  fdb     $0000       ;$CC24   ;OUTPUT FILE ADDR
cc26 : 0000             FILIN   fdb     $0000       ;$CC26   ;INPUT FILE ADDRE
cc28 : 00               CMFLG   fcb     $00         ;$CC28   ;COMMAND FLAG
cc29 : 00               COLMN   fcb     $00         ;$CC29   ;CURRENT OUTPUT C
cc2a : 00               TMRFLG  fcb     $00         ;$CC2A   ;TIMER FLAG UNUSE
cc2b : b800             MEMEND  fdb     $B800       ;$CC2B   ;MEMORY END
                        ;MEMEND  fdb     $BF00       ;$CC2B   ;MEMORY END
cc2d : 0000             ERRVEC  fdb     $0000       ;$CC2D   ;ERROR NAME VECTO
cc2f : 01               FILEKO  fcb     $01         ;$CC2F   ;FILE INPUT ECHO
cc30 : 00               FMSBSY  fcb     $00         ;$CC30   ;FMS IS BUSY FLAG
cc31 : 0000             CP      fdb     $0000       ;$CC31   ;
cc33 : 00               CPUTYP  fcb     $00         ;$CC33   ;
cc34 : 00               PRCNT   fcb     $00         ;$CC34   ;UNUSED NOW
cc35 : 000000000000     SPARES  fdb     0,0,0       ;$CC35   ;SPARE BYTES
cc3b : 0000             XTEMP   rmb     2           ;$CC3B   ;INDEX TEMP
cc3d : 0000             INDEX   rmb     2           ;$CC3D   ;INDEX TEMP STORA
cc3f : 0000             CRSAVE  rmb     2           ;$CC3F   ;INDEX SAVE
cc41 : 0000             DATPNT  rmb     2           ;$CC41   ;DATA POINTER
cc43 : 0000             RETADR  rmb     2           ;$CC43   ;RETURN ADDRESS
cc45 : 0000             STKSTR  rmb     2           ;$CC45   ;STACK STORAGE
cc47 : 0000             IOTEMP  rmb     2           ;$CC47   ;IO TEMP STORE
                        
                        * SET MAPUP TO $FF TO DISABLE MAPPING
                        
cc49 : 60               MAPUP   fcb     $60         ;$CC49   ;MAP FILENAMES TO
cc4a : 00               OUTNUM  rmb     1           ;$CC4A   ;0 SUPPRESSION FL
AS09 Assembler for M6809 [1.42].                                     Page   15
--------------------------------- FLEX9.asm ----------------------------------

cc4b : 00               COUNT   rmb     1           ;$CC4B   ;SPARE COUNT REGI
cc4c : 00               GOTFIL  rmb     1           ;$CC4C   ;FILE INDICATOR
cc4d : 00               Temp    rmb     1           ;$CC4D   ;TEMPORARY REGIST
                        
cc4e : ccac             PPRMPT  fdb     PRMPT
                        
cc50 : 574841543f       WHATST  fcc     "WHAT?"
cc55 : 04               		fcb		EOT
cc56 : 43414e27542054.. NOTRST  fcc     "CAN'T TRANSFER"
cc64 : 04               		fcb		EOT
cc65 : 4e4f5420464f55.. NONMST  fcc     "NOT FOUND"
cc6e : 04               		fcb		EOT
cc6f : 4449534b204552.. DSKERS  fcc     "DISK ERROR #"
cc7b : 04               		fcb		EOT
cc7c : 4452495645204e.. NTRST   fcc     "DRIVE NOT READY"
cc8b : 04               		fcb		EOT
cc8c : 474554           COMTBL  fcc     "GET"
cc8f : 00               		fcb		0
cc90 : d21a                     fdb     GET
cc92 : 4d4f4e                   fcc     "MON"
cc95 : 00                       fcb		0
cc96 : d356                     fdb     MEXIT
cc98 : 00                       fcb     $00
                        
cc99 : 2710             CONTBL  fdb     10000
cc9b : 03e8                     fdb     1000
cc9d : 0064                     fdb     100
cc9f : 000a                     fdb     10
                        
cca1 : 6572726f7273     ERNM    fcc     "errors"
cca7 : 0000             		fcb     0,0
cca9 : 737973           		fcc		"sys"
                        		
ccac : 2b2b2b           PRMPT   fcc     "+++"
ccaf : 04               		fcb		EOT
                                
ccc0 =                          org     $CCC0
                                
ccc0 : 39               PINIT   rts
                                
ccd8 =                          org     $CCD8
                        
ccd8 : 39               PCHK    rts
                        
cce4 =                          org     $CCE4
                        
cce4 : 39               POUT    rts
                        
ccf8 =                          org     $CCF8
                        
ccf8 : 01000000         PR0     fcb     $01,$00,$00,$00
ccfc : 00000000         PR1     fcb     $00,$00,$00,$00
                                
cd00 : 7ecd57           COLDS   jmp     INITI        ;GO INITIALIZE
cd03 : 7ecd67           WARMS   jmp     ENTRY       ;WARM ENTRY POINT
cd06 : 7ecdab           RENTER  jmp     DOS3        ;RE-ENTER DOS
cd09 : 7ef1a1           INCH    jmp     CONIN       ;INCHNE           ;INPUT R
cd0c : 7ef044           INCH2   jmp     INCHNE_           ;TERMINAL INPUT
cd0f : 7ef1a4           OUTCH   jmp     CONOUT      ;VOUTCH           ;OUTPUT 
cd12 : 7ef022           OUTCH2  jmp     VOUTCH           ;TERMINAL OUTPUT
cd15 : 7ecef7           DGETCH  jmp     GETCHR      ;GET CHARACTER
cd18 : 7ecf3d           DPUTCH  jmp     PUTCHR      ;PUT CHARACTER
AS09 Assembler for M6809 [1.42].                                     Page   16
--------------------------------- FLEX9.asm ----------------------------------

cd1b : 7ece2a           DINBUF  jmp     INBUF       ;INPUT TO BUFFER
cd1e : 7ece79           DPSTRN  jmp     PSTRNG      ;PRINT STRING
cd21 : 7ecfe9           DCLASS  jmp     CLASS       ;CLASSIFY CHARACTER
cd24 : 7eceb1           DPCRLF  jmp     PCRLF       ;PRINT CR AND LF
cd27 : 7ed00a           DNEXTC  jmp     NXTCH       ;NEXT BUFFER CHAR
cd2a : 7ecde4           RSTRIO  jmp     RESTIO      ;RESTORE IO VECTORS
cd2d : 7ed032           DFILSP  jmp     GETFIL      ;GET FILE SPEC
cd30 : 7ed1b0           DLOAD   jmp     LOAD        ;FILE LOADER
cd33 : 7ed0e7           DSETEX  jmp     SETEXT      ;SET NAME EXTENSION
cd36 : 7ed354           DADDBX  jmp     ADDBX       ;ADD B TO X
cd39 : 7ecf82           DOUTDE  jmp     OUTDEC      ;OUTPUT DECIMAL
cd3c : 7ecfd0           DOUTHE  jmp     OUTHEX      ;OUT HEX CHARACTER
cd3f : 7ed28a           DRPTER  jmp     RPTERR      ;REPORT ERROR
cd42 : 7ed13d           DGETHX  jmp     GETHEX      ;GET HEX NUMBER
cd45 : 7ecfcc           DOUTAD  jmp     OUTADR      ;OUT HEX ADDRESS
cd48 : 7ed186           DINDEC  jmp     INDEC       ;GET DECIMAL NUMBER
cd4b : 7ed334           DDOCMD  jmp     DOCMD       ;DO COMMAND LINE
cd4e : 7ef1a7           DSTAT   jmp     CONSTAT ;STAT           ;TERMINAL INPU
cd51 : 7ecdff           DSPR2   jmp     RTS
cd54 : 7ecdff           DSPR3   jmp     RTS
                        
                        * INIT
                        *
                        * INIT IS THE INITIALIZATION ROUTINE.
                        * ALL SYSTEM VARIABLES ARE SET HERE.
                        
cd57 : 10cec07f         INITI    lds     #STACK      ;SET STACK
cd5b : 7fcc11           INIT1   clr     LSTTRM      ;CLEAR TERM BYTE
cd5e : bdd400                   jsr     FMSINT      ;INIT SYSTEM
                                
cd61 : 7fcc28                   clr     CMFLG       ;CLEAR FLAG
cd64 : bdd3fd                   jsr     TSTSTR      ;CHECK FOR STARTUP
                                
                        		
                        * ENTRY
                        *
                        * ENTRY IS THE WARM START ENTRY POINT.
                        * THE STACK IS RESET HERE.
                        
cd67 : 10cec07f         ENTRY   lds     #STACK      ;SET STACK
cd6b : bdde18                   jsr     DWARM       ;DO USER WARMSTART ROUTINE
cd6e : 8ecd03                   ldx     #WARMS      ;POINT TO WARM START
cd71 : bfcc16                   stx     RETRNR      ;SET RETURN REG
cd74 : 8ec700                   ldx     #CHPR       ;SET SWI3 VECTOR
cd77 : af9fd3e9                 stx     [SWIVECP]    ;
cd7b : bed3e7                   ldx     IHNDLRP      ;SET IRQ VECTOR
cd7e : af9fd3eb                 stx     [IRQVECP]    ;
cd82 : 8eccf8                   ldx     #PR0        ;SET PR # 0
cd85 : bfcc31                   stx     CP          ;
cd88 : 7fcc34                   clr     PRCNT       ;SET STATUS
cd8b : 7fcc4c           ENTRY2  clr     GOTFIL      ;CLEAR FILE DESIG.
cd8e : 8d54                     bsr     RESTIO      ;RESTORE IO
                        
                        * DOS
                        *
                        * DOS IS THE MAIN DOS LOOP
                        
cd90 : b6cc11           DOS     lda     LSTTRM      ;CHECK TERMINATOR
cd93 : b1cc02                   cmpa    TTYEOL      ;WAS IT EOL?
                        
cd96 : 2605                     bne     DOS2        ;
cd98 : 7ccc15                   inc     BUFPNT+1    ;RESET BUFPNT
AS09 Assembler for M6809 [1.42].                                     Page   17
--------------------------------- FLEX9.asm ----------------------------------

cd9b : 200e                     bra     DOS3        ;
                                                    ;
cd9d : 7dcc28           DOS2    tst     CMFLG       ;TEST FLAG
                        		
cda0 : 102605a2                 lbne    RETRN       ;DO CMD RETURN
cda4 : bdd403                   jsr     FMSCLS      ;CLOSE ALL
                        
cda7 : 26b2                     bne     INIT1       ;ERRORS?
cda9 : 8d7a                     bsr     PRMTUSR     ;POINT TO PROMPT
                                                    ;
cdab : bdd0d0           DOS3    jsr     SKPSPC      ;SKIP SPACES		
cdae : 810d                     cmpa    #$0D        ;LONE CARRIAGE RET?
cdb0 : 27eb                     beq     DOS2        ;
                                                    ;
cdb2 : 8ec840           DOS4    ldx     #SYSFCB     ;POINT TO SYSTEM FCB
cdb5 : 7ccc0d                   inc     SYSFLG      ;SET SYSTEM DRIVE
cdb8 : bdd032                   jsr     GETFIL      ;GET FILE NAME
cdbb : 2516                     bcs     NFERR       ;ERROR?
cdbd : 8ecc8c                   ldx     #COMTBL     ;POINT TO TABLE
cdc0 : 8d3e                     bsr     LKNAM       ;LOOK FOR NAME   
cdc2 : 2709                     beq     DOS6        ;FIND?
                                
cdc4 : becc12                   ldx     USRTBL      ;CHECK USER TABLE
cdc7 : 2707                     beq     DOS8        ;IS THERE ONE?
                                
cdc9 : 8d35                     bsr     LKNAM       ;LOOK FOR NAME
cdcb : 2603                     bne     DOS8        ;FIND?
                                                    ;
cdcd : 6e9801           DOS6    jmp     [1,x]       ;JUMP TO COM ADDRESS
                                                    ;
cdd0 : bdd239           DOS8    jsr     LGO         ;DO LOAD & GO
                                                    ;
                        * NFERR                     ;
                                                    ;
cdd3 : 8ecc50           NFERR   ldx     #WHATST     ;POINT TO STRING
cdd6 : 8615                     lda     #$15        ;SET ERROR TYPE
cdd8 : b7cc20           NFERR1  sta     ERRTYP      ;
cddb : bdce79           NFERR2  jsr     PSTRNG      ;OUTPUT IT
cdde : 7fcc11           NFERR4  clr     LSTTRM      ;CLEAR TERM
cde1 : 7ecd67                   jmp     ENTRY       ;RESTART
                        
                        * RESTIO
                        *
                        * RESTIO RESTORES THE SYSTEM IO JUMP
                        * VECTORS FOR INPUT, OUTPUT, & INIT.
                        
cde4 : becd13           RESTIO  ldx     OUTCH2+1    ;SET OUTPUT
cde7 : bfcd10                   stx     OUTCH+1     ;
cdea : becd0d                   ldx     INCH2+1     ;SET INPUT
cded : bfcd0a                   stx     INCH+1      ;
cdf0 : 7fcc23                   clr     INCHNL      ;
cdf3 : 7fcc22                   clr     OUTCHN      ;CLEAR OUT CHAN
cdf6 : 7fcc21                   clr     SPCLS       ;SET SPECIALS
cdf9 : 7fcc26                   clr     FILIN       ;CLEAR FILES
cdfc : 7fcc24                   clr     FILOUT
cdff : 39               RTS     rts
                        
                        * LKNAM
                        *
                        * LKNAM looks FOR A COMMAND
                        * NAME In a tABLE
                        *
AS09 Assembler for M6809 [1.42].                                     Page   18
--------------------------------- FLEX9.asm ----------------------------------

                        *   ENTRy: x POINTS TO TABLE
                        *   EXIT:  eq IF FOUND
                        *          x+1 POINTS TO ADR
                        
ce00 : 108ec844         LKNAM   ldy     #SYSFCB+4   ;SET POINTER
ce04 : a6a0             LKNAM3  lda     ,y+        ;GET A NAME CHAR
ce06 : 815f                     cmpa    #$5F        ;CHECK IF UPPER CASE
ce08 : 2302                     bls     LKNAM4      ;SKIP IF NOT
ce0a : 8020                     suba    #$20        ;MAKE UPPER
                                                    ;
ce0c : a180             LKNAM4  cmpa    ,x+        ;CHECK AGAINST TABLE
ce0e : 2608                     bne     LKNAM6      ;BRANCH IF NO MATCH
ce10 : 6d84                     tst     ,x         ;CHECK IF END
ce12 : 26f0                     bne     LKNAM3      ;LOOP IF NOT
                                                    ;
ce14 : 6da4                     tst     ,y         ;AT END OF NAME
ce16 : 270c                     beq     LKNAM8      ;GOT COMMAND IF SO
                                                    ;
ce18 : 6d80             LKNAM6  tst     ,x+        ;END OF WORD?
ce1a : 26fc                     bne     LKNAM6      ;LOOP TIL SO
ce1c : 3002                     leax    2,x         ;BUMP PAST ADDRESS
ce1e : 6d84                     tst     ,x         ;END OF TABLE?
ce20 : 26de                     bne     LKNAM       ;REPEAT IF NOT
ce22 : 1cfb                     andcc   #$FB        ;CLZ SET NOT EQUAL
ce24 : 39               LKNAM8  rts
                        
ce25 : becc4e           PRMTUSR ldx     PPRMPT
ce28 : 8d4f                     bsr     PSTRNG
                        
                        * INBUF
                        *
                        * INBUF inputS A LINE INTO THE LINE
                        * BUFFER. delETE AND BACK SPACE
                        * CHARACters ARE CHECKED HERE.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  alL REGISTERS CHANGED
                        
ce2a : 8ec080           INBUF   ldx     #LINBUF     ;POINT TO BUFFER
ce2d : bfcc14                   stx     BUFPNT      ;SET POINTER
ce30 : bdcef7           INBUF2  jsr     GETCHR      ;GO GET A CHARACTER
ce33 : b1cc01                   cmpa    TTYDEL      ;IS IT DELETE?
ce36 : 27ed                     beq     PRMTUSR     ;
ce38 : b1cc00                   cmpa    TTYBS       ;IS IT BACK SPACE?
ce3b : 2718                     beq     INBUF6      ;
ce3d : 810d                     cmpa    #$0D        ;IS IT CARRIAGE RET?
ce3f : 270d                     beq     INBUF4      ;
ce41 : 810a                     cmpa    #$0A        ;IS IT LF?
ce43 : 272b                     beq     INBUF7      ;
ce45 : 811f                     cmpa    #$1F        ;IS IT CONTROL?
ce47 : 23e7                     bls     INBUF2      ;IGNORE IF SO
ce49 : 8cc0ff           INBUF3  cmpx    #LINBUF+LBL-1
ce4c : 27e2                     beq     INBUF2
ce4e : a780             INBUF4  sta     ,x+        ;PUT CHAR IN BUFFER
ce50 : 810d                     cmpa    #$0D        ;IS IT RETURN?
ce52 : 26dc                     bne     INBUF2      ;REPEAT IF NOT
ce54 : 39                       rts                 ;
                                                    ;
ce55 : 8cc080           INBUF6  cmpx    #LINBUF     ;FRONT OF BUFFER?
ce58 : 27cb                     beq     PRMTUSR     ;
ce5a : 301f                     leax    -1,x        ;DEC THE POINTER
ce5c : b6cc07                   lda     TTYBE       ;GET ECHO CHAR
AS09 Assembler for M6809 [1.42].                                     Page   19
--------------------------------- FLEX9.asm ----------------------------------

ce5f : 8108                     cmpa    #8          ;IS IT ^H ?
ce61 : 2608                     bne     INBU65      ;
ce63 : 8620                     lda     #$20        ;SETUP SPACE
ce65 : bdcf62                   jsr     PUTCH6      ;OUTPUT IT
ce68 : b6cc07                   lda     TTYBE       ;GET CHAR
ce6b : bdcf62           INBU65  jsr     PUTCH6      ;OUTPUT IT
ce6e : 20c0                     bra     INBUF2      ;REPEAT
                                                    ;
ce70 : 860d             INBUF7  lda     #$0D        ;OUTPUT CR
ce72 : bdcf3d                   jsr     PUTCHR      ;
ce75 : 8620                     lda     #$20        ;SETUP SPACE
ce77 : 20d0                     bra     INBUF3
                        
                        * PSTRNG
                        *
                        * PSTRNG prinTS THE STRING POINTED
                        * TO BY the iNDEX REGISTER.
                        *
                        *   ENTRy: x POINTS TO STRING
                        *   EXIT:  a & X CHANGED
                        
ce79 : 8d36             PSTRNG  bsr     PCRLF       ;OUTPUT CR & LF
                        		
ce7b : a684             PDATA1  lda     ,x         ;GET A CHARACTER
ce7d : 8104                     cmpa    #4          ;IS IT TERM?
ce7f : 2773                     beq     PCRLF8      ;
ce81 : bdcf3d                   jsr     PUTCHR      ;GO PUT CHAR.
ce84 : 3001                     leax    1,x         ;BUMP THE POINTER
ce86 : 20f3                     bra     PDATA1      ;REPEAT IT
                        
                        * BREAK
                        *
                        * BREAK checkS FOR A CHARACTER ON INPUT CHANNEL,
                        * RETURNs immEDIATELY IF NONE OR NOT ESCAPE.
                        * IF ESCape, WAITS FOR ANOTHER OR FOR RETURN.
                        
ce88 : bdcd4e           BREAK   jsr     DSTAT       ;ANY INPUT CHARACTER?
ce8b : 2769                     beq     PCRLF9      ;EXIT IF NOT
                                                    ;
ce8d : ad9fd3e5                 jsr     [INCHNEP]    ;ELSE, GET THE CHARACTER
ce91 : 847f                     anda    #$7F        ;STRIP UPPER BIT
ce93 : b1cc0a                   cmpa    TTYESC      ;AN ESCAPE?
ce96 : 265e                     bne     PCRLF9      ;EXIT IF NOT
                                                    ;
ce98 : 7fcc1a           BREAK1  clr     LINE        ;CLEAR LINE COUNT
ce9b : ad9fd3e5         BREAK2  jsr     [INCHNEP]    ;WAIT FOR A CHARACTER
ce9f : 847f                     anda    #$7F        ;STRIP UPPER BIT
cea1 : b1cc0a                   cmpa    TTYESC      ;AN ESCAPE?
cea4 : 2750                     beq     PCRLF9      ;CONTINUE IF SO
cea6 : 810d                     cmpa    #$0D        ;IS IT A C.R.?
cea8 : 26f1                     bne     BREAK2      ;LOOP IF NEITHER
ceaa : 7fcc11                   clr     LSTTRM      ;CLEAR TERMINATOR
cead : 6e9fcc16                 jmp     [RETRNR]    ;JUMP TO RETURN REG
                        
                        * PCRLF
                        *
                        * PCRLF outpuTS A CARRIAGE RETURN
                        * AND A line FEED COMBINATION.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  A & B CHANGED
                        
AS09 Assembler for M6809 [1.42].                                     Page   20
--------------------------------- FLEX9.asm ----------------------------------

ceb1 : 7dcc21           PCRLF   tst     SPCLS       ;TEST SPECIALS
ceb4 : 2627                     bne     PCRLF2      ;
                                ;bra     PCRLF2      ;
ceb6 : 8dd0                     bsr     BREAK       ;CHECK FOR BREAK
ceb8 : b6cc03                   lda     TTYDP       ;GET COUNT
cebb : 2720                     beq     PCRLF2      ;IS IT OFF?
                                                    ;
cebd : b1cc1a                   cmpa    LINE        ;CHECK COUNT
cec0 : 2218                     bhi     PCRL19      ;
cec2 : 7fcc1a                   clr     LINE        ;CLEAR COUNT
cec5 : 7dcc09                   tst     TTYPS       ;PAUSE ON?
cec8 : 2702                     beq     PCRLF1      ;
ceca : 8dcc                     bsr     BREAK1      ;WAIT FOR ESC
                                                    ;
cecc : 3404             PCRLF1  pshs    b           ;SAVE B
cece : f6cc08                   ldb     TTYEJ       ;CHECK COUNT
ced1 : 2705                     beq     PCRL18      ;
ced3 : 8d08             PCRL15  bsr     PCRLF2      ;OUTPUT CR & LF
ced5 : 5a                       decb                ;DEC THE COUNT
ced6 : 26fb                     bne     PCRL15      ;
                                                    ;
ced8 : 3504             PCRL18  puls    b           ;RESTORE B
ceda : 7ccc1a           PCRL19  inc     LINE        ;BUMP LINE COUNT
cedd : 860d             PCRLF2  lda     #$0D        ;SET UP CR
cedf : 8d5c                     bsr     PUTCHR      ;OUTPUT IT
cee1 : 860a                     lda     #$0A        ;SET UP LINE FEED
cee3 : 8d58                     bsr     PUTCHR      ;OUTPUT IT
                                ;rts					; !!! 
cee5 : 3404                     pshs    b           ;SAVE B
cee7 : f6cc05                   ldb     TTYNL       ;CHECK NULLS
ceea : 2706                     beq     PCRLF6      ;
ceec : 4f               PCRLF4  clra                ;SET UP NULL
ceed : 8d4e                     bsr     PUTCHR      ;OUTPUT IT
ceef : 5a                       decb                ;DEC THE COUNT
cef0 : 26fa                     bne     PCRLF4      ;REPEAT?
                                                    ;
cef2 : 3504             PCRLF6  puls    b           ;RESTORE B
cef4 : 1cfe             PCRLF8  andcc   #$FE        ;CLC  CLEAR ERRORS
cef6 : 39               PCRLF9  rts
                        
                        * GETCHR
                        *
                        * GETCHR gets A CHARACTER FROM EITHER
                        * THE STandarD INPUT OR A FILE.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  a HAS CHARACTER
                        
cef7 : 7dcc23           GETCHR  tst     INCHNL      ;CHECK CHAN
cefa : 261a                     bne     GETCH5      ;
cefc : 7dcc26                   tst     FILIN       ;FILE INPUT?
ceff : 2710                     beq     GETCH4      ;
cf01 : 8d1a                     bsr     FILIO       ;DO FILE INPUT
cf03 : 7dcc2f                   tst     FILEKO      ;ECHO CHARACTER?
cf06 : 2711                     beq     GETCH6      ;
cf08 : 7dcc24                   tst     FILOUT      ;OUTPUT FILE?
cf0b : 270c                     beq     GETCH6      ;
cf0d : 8d53                     bsr     PUTCH6      ;ECHO CHARACTER
cf0f : 2008                     bra     GETCH6      ;
                                                    ;
cf11 : bdcd09           GETCH4  jsr     INCH        ;GET CHAR
cf14 : 2003                     bra     GETCH6      ;
AS09 Assembler for M6809 [1.42].                                     Page   21
--------------------------------- FLEX9.asm ----------------------------------

                                                    ;
cf16 : bdcd0c           GETCH5  jsr     INCH2       ;TERMINAL INPUT
cf19 : 7fcc1a           GETCH6  clr     LINE        ;CLEAR COUNTER
cf1c : 39                       rts
                        
                        * FILIO
                        *
                        * FILIO dose A FMS CALL FOR CHARACTER
                        * IO TRAnsfer. CONTROL RETURNED TO
                        * WARM Start UPON ERROR.
                        
cf1d : bfcc47           FILIO   stx     IOTEMP      ;SAVE INDEX
cf20 : becc26                   ldx     FILIN       ;GET INPUT FCB
cf23 : 2006                     bra     FILIO4      ;
                                                    ;
cf25 : bfcc47           FILIO2  stx     IOTEMP      ;SAVE X
cf28 : becc24                   ldx     FILOUT      ;GET OUTPUT FCB
                                                    ;
cf2b : bdd406           FILIO4  jsr     FMS         ;CALL FMS
cf2e : 2604                     bne     FILIO6      ;ERROR?
cf30 : becc47                   ldx     IOTEMP      ;RESTORE INDEX
cf33 : 39                       rts                 ;
                                                    ;
cf34 : 7fcc24           FILIO6  clr     FILOUT      ;CLEAR CHAN
cf37 : bdd28a                   jsr     RPTERR      ;REPORT ERROR
cf3a : 7ecd03                   jmp     WARMS       ;DO WARM START
                        
                        * PUTCHR
                        *
                        * PUTCHR writES A CHARACTER TO EITHER
                        * THE STandarD OUTPUT OR TO A FILE.
                        *
                        *   ENTRy: chARACTER IN A
                        *   EXIT:  a MAY BE DESTROYED
                        
cf3d : 7dcc21           PUTCHR  tst     SPCLS       ;CHECK SPECIALS
cf40 : 2620                     bne     PUTCH6      ;
cf42 : 811f                     cmpa    #$1F        ;IS IT CONTROL?
cf44 : 2205                     bhi     PUTCH2      ;
cf46 : 7fcc29                   clr     COLMN       ;CLEAR COL COUNT
cf49 : 2017                     bra     PUTCH6      ;JUMP AHEAD
                                                    ;
cf4b : 7ccc29           PUTCH2  inc     COLMN       ;BUMP COUNTER
cf4e : 3402                     pshs    a           ;SAVE CHARACTER
cf50 : b6cc04                   lda     COLCNT      ;GET COUNT
cf53 : 270b                     beq     PUTCH4      ;IS IT 0?
cf55 : b1cc29                   cmpa    COLMN       ;ENOUGH?
cf58 : 2406                     bcc     PUTCH4      ;
cf5a : bdceb1                   jsr     PCRLF       ;OUTPUT CR & LF
cf5d : 7ccc29                   inc     COLMN       ;
                                                    ;
cf60 : 3502             PUTCH4  puls    a           ;RESTORE CHAR
cf62 : 3402             PUTCH6  pshs    a           ;
cf64 : 7dcc22                   tst     OUTCHN      ;TEST CHANNEL
cf67 : 2613                     bne     PUTCH7      ;
cf69 : 7dcc24                   tst     FILOUT      ;FILE OUTPUT?
cf6c : 2704                     beq     PUTC68      ;
cf6e : 8db5                     bsr     FILIO2      ;DO FMS CALL
cf70 : 200d                     bra     PUTC75      ;
                                                    ;
cf72 : 7dcc26           PUTC68  tst     FILIN       ;
cf75 : 2608                     bne     PUTC75      ;FILE INPUT?
AS09 Assembler for M6809 [1.42].                                     Page   22
--------------------------------- FLEX9.asm ----------------------------------

cf77 : bdcd0f                   jsr     OUTCH       ;OUTPUT IT
cf7a : 2003                     bra     PUTC75      ;
                                                    ;
cf7c : bdcd12           PUTCH7  jsr     OUTCH2      ;CHAN 2 OUTPUT
cf7f : 3502             PUTC75  puls    a           ;RESTORE CHAR
cf81 : 39                       rts
                        
                        * OUTDEC
                        *
                        * OUTPUT deciMAL NUMBER POINTED TO
                        * BY X. the nS ENTRY PRINTS LEADING
                        * ZEROES.
                        *
                        *   ENTRy: x POINTS TO NUMBER
                        *   EXIT:  alL CHANGED
                        
cf82 : 7fcc4a           OUTDEC  clr     OUTNUM      ;CLEAR FLAG
cf85 : f7cc1d                   stb     XFR         ;SET SUP FLAG
cf88 : 8604                     lda     #4          ;SET COUNTER
cf8a : b7d40d                   sta     TEMP        ;SAVE IT
cf8d : ec84                     ldd     ,x         ;GET VALUE
cf8f : 8ecc99                   ldx     #CONTBL     ;POINT TO CONSTANTS
                                                    ;
cf92 : 8d0b             OUTDE4  bsr     OUTDIG      ;OUTPUT DIGIT
cf94 : 3002                     leax    2,x         ;BUMP TO NEXT CONST.
cf96 : 7ad40d                   dec     TEMP        ;DEC THE COUNT
cf99 : 26f7                     bne     OUTDE4      ;
cf9b : 1f98                     tfr     b,a         ;GET LS DIGIT
cf9d : 203d                     bra     OUTHR       ;OUTPUT IT
                        
                        * OUTDIG
                        *
                        * OUTDIG outpUTS THE DIGITS PLACE
                        * OF THE numbER IN A & B CORRESPONDING
                        * TO THE consTANT POINTED TO BY X.
                        *
                        *   ENTRy: a & B CONTAIN NUMBER
                        *          x POINTS TO CONSTANT
                        *   EXIT:  alL REGISTERS PRESERVED
                        
cf9f : 7fcc4b           OUTDIG  clr     COUNT       ;CLEAR COUNTER
cfa2 : 10a300           OUTDI2  cmpd    0,x         ;COMPARE NUMBER
cfa5 : 2507                     bcs     OUTDI5      ;
cfa7 : a300                     subd    0,x         ;SUB VALUE
cfa9 : 7ccc4b                   inc     COUNT       ;BUMP COUNTER
cfac : 20f4                     bra     OUTDI2      ;REPEAT
                                                    ;
cfae : 3402             OUTDI5  pshs    a           ;SAVE A
cfb0 : b6cc4b                   lda     COUNT       ;GET TOTAL
cfb3 : 2610                     bne     OUTDI6      ;IS IT ZERO?
cfb5 : 7dcc4a                   tst     OUTNUM      ;SUPRESS ZEROES?
cfb8 : 260b                     bne     OUTDI6      ;NUMBER YET?
cfba : 7dcc1d                   tst     XFR         ;NULL OR SPACE?
cfbd : 270b                     beq     OUTDI8      ;
cfbf : 8620                     lda     #$20        ;SETUP SPACE
cfc1 : 8d23                     bsr     OUTHR2      ;OUTPUT IT
cfc3 : 2005                     bra     OUTDI8
                        
cfc5 : 7ccc4a           OUTDI6  inc     OUTNUM      ;SHOW NUMBER
cfc8 : 8d12                     bsr     OUTHR       ;OUTPUT DIGIT
                        
cfca : 3582             OUTDI8  puls    a,pc        ;RESTORE A & RETURN
AS09 Assembler for M6809 [1.42].                                     Page   23
--------------------------------- FLEX9.asm ----------------------------------

                        
                        * OUTADR
                        *
                        * OUTPUT four HEX DIGITS POINTED
                        * TO BY the iNDEX REGISTER.
                        
cfcc : 8d02             OUTADR  bsr     OUTHEX      ;OUT 2 DIGITS
cfce : 3001                     leax    1,x         ;BUMP POINTER
                        
                        * OUTHEX
                        *
                        * OUTHEX outpUTS THE BYTE IN HEX
                        * POINTEd to BY X.
                        *
                        *   ENTRy: x POINTS TO BYTE
                        *   EXIT:  b PRESERVED
                        
cfd0 : a600             OUTHEX  lda     0,x         ;GET MSB
cfd2 : 8d04                     bsr     OUTHL       ;OUTPUT IT
cfd4 : a600                     lda     0,x         ;DO LSB
cfd6 : 2004                     bra     OUTHR       ;OUTPUT IT
                                                    ;
cfd8 : 44               OUTHL   lsra                ;GET MSB TO LSB
cfd9 : 44                       lsra
cfda : 44                       lsra
cfdb : 44                       lsra
                        
cfdc : 840f             OUTHR   anda    #$0F        ;MASK OFF MSB
cfde : 8b30                     adda    #$30        ;ADD IN BIAS
cfe0 : 8139                     cmpa    #$39        ;OVER NUMBERS?
cfe2 : 2302                     bls     OUTHR2
                        
cfe4 : 8b07                     adda    #7          ;FINISH BIAS
                        
cfe6 : 7ecf3d           OUTHR2  jmp     PUTCHR      ;OUTPUT IT
                        
                        * CLASS
                        *
                        * CLASS will CLASSIFY THE CHARACTER IN A.
                        *
                        *   ENTRy: chARACTER IN A
                        *   EXIT:  cs IF NOT 0-9 OR A-Z
                        
cfe9 : 8130             CLASS   cmpa    #$30        ;IS IT 0?
cfeb : 2514                     bcs     CLASS2      ;REPORT
cfed : 8139                     cmpa    #$39        ;COMPARE TO 9
cfef : 2316                     bls     CLASS4      ;IS IT NUMBER?
cff1 : 8141                     cmpa    #$41        ;COMPARE TO A
cff3 : 250c                     bcs     CLASS2      ;REPORT
cff5 : 815a                     cmpa    #$5A        ;COMPARE TO Z
cff7 : 230e                     bls     CLASS4      ;IS IT LETTER?
cff9 : 8161                     cmpa    #$61        ;CHECK FOR LOWER
cffb : 2504                     bcs     CLASS2      ;REPORT
cffd : 817a                     cmpa    #$7A        ;UPPER LIMIT
cfff : 2306                     bls     CLASS4
                        
d001 : 1a01             CLASS2  orcc    #1          ;SEC  SET FOR NOT
d003 : b7cc11                   sta     LSTTRM
d006 : 39                       rts
                        
d007 : 1cfe             CLASS4  andcc   #$FE        ;CLC  SHOW ALPHANUMERIC
d009 : 39                       rts
AS09 Assembler for M6809 [1.42].                                     Page   24
--------------------------------- FLEX9.asm ----------------------------------

                        
                        * NXTCH
                        *
                        * NXTCH gets THE NEXT CHARACTER FROM
                        * THE LIne buFFER.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  a HAS CHARACTER
                        
d00a : 3410             NXTCH   pshs    x
d00c : becc14                   ldx     BUFPNT      ;GET POINTER
d00f : b6cc18                   lda     CHAR        ;GET OLD CHAR
d012 : b7cc19                   sta     PRVCHR      ;SAVE AS PREVIOUS
d015 : a680             NXTCH3  lda     ,x+        ;GET THE CHARACTER
d017 : b7cc18                   sta     CHAR        ;SAVE CHAR
d01a : 810d                     cmpa    #$0D        ;IS IT RETURN?
d01c : 2710                     beq     NXTCH4      ;
d01e : b1cc02                   cmpa    TTYEOL      ;IS IT EOL?
d021 : 270b                     beq     NXTCH4      ;
d023 : bfcc14                   stx     BUFPNT      ;SAVE NEW POSITION
d026 : 8120                     cmpa    #$20        ;CHECK FOR SPACE
d028 : 2604                     bne     NXTCH4      ;
d02a : a100                     cmpa    0,x         ;NEXT CHAR SPACE?
d02c : 27e7                     beq     NXTCH3      ;SKIP IF SO
                                                    ;
d02e : 8db9             NXTCH4  bsr     CLASS       ;GO CLASSIFY
d030 : 3590                     puls    x,pc        ;RESTORE REG. & RETURN
                        
                        * GETFIL
                        *
                        * GETFIL gets A FILE SPECIFICATION FROM
                        * THE INput sTREAM.
                        *
                        *   ENTRy: x POINTS TO FCB
                        *   EXIT:  alL REGISTERS CHANGED
                        
d032 : 8615             GETFIL  lda     #21         ;SET PRE ERROR
d034 : a701                     sta     1,x         ;
d036 : 86ff                     lda     #$FF        ;SET DRIVE NEG
d038 : a703                     sta     3,x         ;
d03a : 6f04                     clr     4,x         ;
d03c : 6f0c                     clr     12,x        ;CLEAR EXTENSION
d03e : bdd0d0                   jsr     SKPSPC      ;SKIP SPACES
d041 : 8608                     lda     #8          ;SET UP COUNT
d043 : b7cc4b                   sta     COUNT       ;SAVE IT
d046 : 8d34                     bsr     PRTM        ;PROCESS ITEM
d048 : 252e                     bcs     GETFI5      ;ERROR?
d04a : 260f                     bne     GETFI2      ;CHECK TERM
d04c : 8d2e                     bsr     PRTM        ;PROCESS ITEM
d04e : 2528                     bcs     GETFI5      ;ERROR?
d050 : 2609                     bne     GETFI2      ;CHECK TERM
d052 : bccc3f                   cmpx    CRSAVE      ;CHECK ERROR?
d055 : 276c                     beq     PRTM6       ;
d057 : 8d23                     bsr     PRTM        ;PROCESS ITEM
d059 : 2368                     bls     PRTM6       ;ERROR?
                                                    ;
d05b : becc3f           GETFI2  ldx     CRSAVE      ;RESTORE POINTER
d05e : 6d04                     tst     4,x         ;IS NAME NULL?
d060 : 2761                     beq     PRTM6       ;
d062 : 6d03                     tst     3,x         ;CHECK DRIVE NUMBER
d064 : 2a0f                     bpl     GETFI4      ;SET YET?
d066 : 7dcc0d                   tst     SYSFLG      ;SYSTEM DRIVE?
AS09 Assembler for M6809 [1.42].                                     Page   25
--------------------------------- FLEX9.asm ----------------------------------

d069 : 2705                     beq     GETFI3      ;
d06b : b6cc0b                   lda     SYSDRV      ;GET SYSTEM DRIVE
d06e : 2003                     bra     GETF35      ;
                                                    ;
d070 : b6cc0c           GETFI3  lda     WRKDRV      ;GET WORK DRIVE
d073 : a703             GETF35  sta     3,x         ;SET DRIVE NUMBER
d075 : 7fcc0d           GETFI4  clr     SYSFLG      ;CLEAR FLAG
d078 : becc3f           GETFI5  ldx     CRSAVE      ;RESTORE FCB
d07b : 39                       rts
                        
                        * PRTM
                        *
                        * PRTM ProcesSES AN ITEM OF THE FILE SPEC
                        
d07c : 8d8c             PRTM    bsr     NXTCH       ;GET NEXT CHAR
d07e : 2543                     bcs     PRTM6       ;ERROR?
d080 : 8139                     cmpa    #$39        ;CHECK IF NUMBER
d082 : 2215                     bhi     PRTM2       ;
d084 : becc3f                   ldx     CRSAVE      ;RESTORE POINTER
d087 : 6d03                     tst     3,x         ;CHECK FOR DRIVE NO
d089 : 2a38                     bpl     PRTM6       ;ERROR?
d08b : 8403                     anda    #3          ;MASK DRIVE
d08d : a703                     sta     3,x         ;SET DRIVE NUM
d08f : bdd00a                   jsr     NXTCH       ;GET NEXT CHAR
d092 : 242f                     bcc     PRTM6       ;ERROR?
                                                    ;
d094 : 812e             PRTM1   cmpa    #$2E        ;CHECK TERM
d096 : 1cfe                     andcc   #$FE        ;CLC  CLEAR ERROR
d098 : 39                       rts                 ;
                                                    ;
d099 : f6cc4b           PRTM2   ldb     COUNT       ;GET COUNT
d09c : 2b25                     bmi     PRTM6       ;ERROR?
d09e : 3404                     pshs    b           ;SAVE COUNT
d0a0 : c005                     subb    #5          ;SET NEW COUNT
d0a2 : f7cc4b                   stb     COUNT       ;SAVE IT
d0a5 : 3504                     puls    b           ;RESTORE OLD
                                                    ;
d0a7 : b1cc49           PRTM3   cmpa    MAPUP       ;CHECK FOR LOWER CASE
d0aa : 2502                     bcs     LD0AE       ;SKIP IF NOT
d0ac : 8020                     suba    #$20        ;CONVERT TO UPPER
                                                    ;
d0ae : a704             LD0AE   sta     4,x         ;PUT CHARACTER
d0b0 : 3001                     leax    1,x         ;BUMP THE POINTER
d0b2 : 5a                       decb                ;DEC THE COUNT
d0b3 : bdd00a                   jsr     NXTCH       ;GET NEXT CHAR
d0b6 : 2408                     bcc     PRTM5       ;TERM CHAR?
d0b8 : 812d                     cmpa    #$2D        ;IS IT HYPHEN?
d0ba : 2704                     beq     PRTM5       ;
                                                    ;
d0bc : 815f                     cmpa    #$5F        ;IS IT UNDER SCORE?
d0be : 2606                     bne     PRTM7       ;
                                                    ;
d0c0 : 5d               PRTM5   tstb                ;CHECK COUNT
d0c1 : 26e4                     bne     PRTM3       ;REPEAT
                                                    ;
d0c3 : 1a01             PRTM6   orcc    #1          ;SEC  SET ERROR
d0c5 : 39                       rts                 ;
                                                    ;
d0c6 : 5d               PRTM7   tstb                ;CHECK COUNT
d0c7 : 27cb                     beq     PRTM1       ;FINISHED?
                                                    ;
d0c9 : 6f04                     clr     4,x         ;CLEAR REST
AS09 Assembler for M6809 [1.42].                                     Page   26
--------------------------------- FLEX9.asm ----------------------------------

d0cb : 3001                     leax    1,x         ;BUMP POINTER
d0cd : 5a                       decb                ;DEC THE COUNT
d0ce : 20f6                     bra     PRTM7       ;REPEAT
                        
                        * SKPSPC
                        *
                        * SKPSPC skipS SPACES IN THE BUFFER
                        *
                        *   ENTRy: noNE
                        *   EXIT:  alL CHANGED
                        
d0d0 : bfcc3f           SKPSPC  stx     CRSAVE      ;SAVE INDEX
d0d3 : becc14                   ldx     BUFPNT      ;GET POINTER
                                                    ;
d0d6 : a600             SKPSP2  lda     0,x         ;GET CHARACTER
d0d8 : 8120                     cmpa    #$20        ;IS IT SPACE?
d0da : 2604                     bne     SKPSP4      ;
                                                    ;
d0dc : 3001                     leax    1,x         ;BUMP TO NEXT
d0de : 20f6                     bra     SKPSP2      ;REPEAT
                                                    ;
d0e0 : bfcc14           SKPSP4  stx     BUFPNT      ;SET POINTER
d0e3 : becc3f                   ldx     CRSAVE      ;RESTORE REGISTER
d0e6 : 39                       rts
                        
                        * SETEXT
                        *
                        * SETEXT sets A DEFAULT NAME EXTENSION
                        * IF THE exteNSION IS NULL. IT IS SET
                        * ACCORDing tO THE CODE IN A.
                        *
                        *   ENTRy: a HAS CODE
                        *          x POINTS TO FCB
                        *   EXIT:  alL REGISTERS CHANGED
                        
d0e7 : 3430             SETEXT  pshs    x,y         ;SAVE REGISTERS
d0e9 : e60c                     ldb     12,x        ;GET FIRST EXT
d0eb : 261e                     bne     SETEX6      ;NULL?
                                                    ;
d0ed : 318c1d                   leay    <EXTTBL,pc  ;POINT TO TABLE
d0f0 : 810f                     cmpa    #$0F        ;CHECK RANGE
d0f2 : 2217                     bhi     SETEX6      ;
d0f4 : c603                     ldb     #3          ;GET TO DESIRED EXT.
d0f6 : 3d                       mul                 ;
d0f7 : 31ab                     leay    d,y         ;
d0f9 : c603                     ldb     #3          ;GET EXTENSION LENGTH
                                                    ;
d0fb : a6a0             SETEX4  lda     ,y+        ;GET CHAR
d0fd : b1cc49                   cmpa    MAPUP       ;IS IT LOWER CASE?      
d100 : 2502                     bcs     SETEX5      ;NO
d102 : 8020                     suba    #$20        ;YES - MAKE UPPER CASE
                                                    ;
d104 : a70c             SETEX5  sta     12,x        ;PUT IN EXT
d106 : 3001                     leax    1,x         ;BUMP POINTER
d108 : 5a                       decb                ;THE COUNT
d109 : 26f0                     bne     SETEX4      ;FINISHED?
                                                    ;
d10b : 35b0             SETEX6  puls    x,y,pc      ;RESTORE REGS. & RETURN
                        
                        * EXTTBL
                        *
                        * EXTENSion cODE TABLE
AS09 Assembler for M6809 [1.42].                                     Page   27
--------------------------------- FLEX9.asm ----------------------------------

                        
d10d : 62696e           EXTTBL  fcc     "bin"   ;CODE 0
d110 : 747874                   fcc     "txt"   ;CODE 1
d113 : 636d64                   fcc     "cmd"   ;CODE 2
d116 : 626173                   fcc     "bas"   ;CODE 3
d119 : 737973                   fcc     "sys"   ;CODE 4
d11c : 62616b                   fcc     "bak"   ;CODE 5
d11f : 736372                   fcc     "scr"   ;CODE 6
d122 : 646174                   fcc     "dat"   ;CODE 7
d125 : 626163                   fcc     "bac"   ;CODE 8
d128 : 646972                   fcc     "dir"   ;CODE 9
d12b : 707274                   fcc     "prt"   ;CODE 10
d12e : 6f7574                   fcc     "out"   ;CODE 11
d131 : 72656c                   fcc     "rel"   ;CODE 12
d134 : 726669                   fcc     "rfi"   ;CODE 13
d137 : 646576                   fcc     "dev"   ;CODE 14
d13a : 617263                   fcc     "arc"   ;CODE 15
                        
                        * GETHEX
                        *
                        * GETHEX gets A HEX VALUE FROM THE
                        * INPUT buffeR.  B IS NON ZERO IF
                        * THERE was a NUMBER.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  cs IF ERROR
                        *          vaLUE IN X
                        
d13d : bdd229           GETHEX  jsr     CLROFS      ;CLEAR SPACE & B REG
d140 : bdd00a           GETHE2  jsr     NXTCH       ;GET CHARACTER
d143 : 2522                     bcs     GETHE8      ;GRAPHICS?
                                                    ;
d145 : 8d26                     bsr     TSTHEX      ;TEST FOR HEX
d147 : 2518                     bcs     GETHE6      ;ERROR?
                                                    ;
d149 : 3404                     pshs    b           ;SAVE IND
d14b : c604                     ldb     #4          ;SET UP COUNT
                                                    ;
d14d : 78cc1c           GETHE4  asl     OFFSET+1    ;SHIFT OVER 4
d150 : 79cc1b                   rol     OFFSET      ;
d153 : 5a                       decb                ;DEC THE COUNT
d154 : 26f7                     bne     GETHE4      ;LOOP TIL DONE
                                                    ;
d156 : 3504                     puls    b           ;RESTORE IND
d158 : bbcc1c                   adda    OFFSET+1    ;
d15b : b7cc1c                   sta     OFFSET+1    ;SET NEW DIGIT
d15e : 5c                       incb                ;SET INDICATOR
d15f : 20df                     bra     GETHE2      ;
                                                    ;
d161 : bdd00a           GETHE6  jsr     NXTCH       ;GET CHARACTER
d164 : 24fb                     bcc     GETHE6      ;WAIT FOR TERM
d166 : 39                       rts                 ;
                                                    ;
d167 : becc1b           GETHE8  ldx     OFFSET      ;GET VALUE
d16a : 1cfe             GETHE9  andcc   #$FE        ;CLC  CLEAR ERRORS
d16c : 39                       rts
                        
                        * TSTHEX
                        *
                        * TEST For vaLID HEX CHARACTER
                        
d16d : 815f             TSTHEX  cmpa    #$5F
AS09 Assembler for M6809 [1.42].                                     Page   28
--------------------------------- FLEX9.asm ----------------------------------

d16f : 2302                     bls     TSTHE2
d171 : 8020                     suba    #$20
                        
d173 : 8047             TSTHE2  suba    #$47        ;REMOVE BIAS
d175 : 2a0c                     bpl     TSTHE4      ;
                                                    ;
d177 : 8b06                     adda    #6          ;CHECK RANGE
d179 : 2a04                     bpl     TSTHE3      ;ERROR?
                                                    ;
d17b : 8b07                     adda    #7          ;ADD BACK IN
d17d : 2a04                     bpl     TSTHE4      ;ERROR?
                                                    ;
d17f : 8b0a             TSTHE3  adda    #$0A        ;FINAL BIAS
d181 : 2ae7                     bpl     GETHE9      ;NO ERROR
                        
d183 : 1a01             TSTHE4  orcc    #1
d185 : 39                       rts
                        
                        * INDEC
                        *
                        * INPUT decimAL NUMBER.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  cs IF ERROR
                        *          vaLUE IN X
                        *          b=0 IF NO NUMBER
                        
d186 : bdd229           INDEC   jsr     CLROFS      ;CLEAR SPACE & B REG.
d189 : bdd00a           INDEC2  jsr     NXTCH       ;GET CHARACTER
d18c : 25d9                     bcs     GETHE8      ;TERM?
d18e : 8139                     cmpa    #$39        ;CHECK FOR NUMBER
d190 : 22cf                     bhi     GETHE6      ;
d192 : 840f                     anda    #$0F        ;MASK NUMBER
d194 : 3404                     pshs    b           ;SAVE COUNT
d196 : 3402                     pshs    a           ;SAVE NUMBER
d198 : fccc1b                   ldd     OFFSET      ;GET VALUE
d19b : 58                       aslb                ;DO TIMES 8
d19c : 49                       rola                ;
d19d : 58                       aslb                ;
d19e : 49                       rola                ;
d19f : f3cc1b                   addd    OFFSET      ;PLUS TIMES 2
d1a2 : 58                       aslb                ;
d1a3 : 49                       rola                ;
d1a4 : ebe0                     addb    ,s+        ;ADD IN NEW DIGIT
d1a6 : 8900                     adca    #0          ;
d1a8 : fdcc1b                   std     OFFSET      ;SAVE RESULT
d1ab : 3504                     puls    b           ;GET COUNT
d1ad : 5c                       incb                ;BUMP COUNT
d1ae : 20d9                     bra     INDEC2      ;REPEAT
                        
                        * LOAD
                        *
                        * LOAD Is the SYSTEM BINARY LOADER
                        *
                        *   ENTRy: x POINTS TO FCB
                        *   EXIT:  waRMS IF ERROR
                        *          alL RGISTERS CHANGED
                        
d1b0 : 7fcc1d           LOAD    clr     XFR         ;CLEAR TRANSFER FLAG
d1b3 : 8d3d             LOAD2   bsr     DOFMS       ;DO READ
d1b5 : 8102                     cmpa    #2          ;BEGIN DESIGNATOR?
d1b7 : 2715                     beq     LOAD4       ;YES - GET DATA COUNT
AS09 Assembler for M6809 [1.42].                                     Page   29
--------------------------------- FLEX9.asm ----------------------------------

                                                    ;
d1b9 : 8116                     cmpa    #$16        ;TRANSFER DESIG?
d1bb : 26f6                     bne     LOAD2       ;
d1bd : 8d33                     bsr     DOFMS       ;GET NEXT CHAR
d1bf : b7cc1e                   sta     TADR        ;SET TRANSFER ADR
d1c2 : 8d2e                     bsr     DOFMS       ;GET LSB
d1c4 : b7cc1f                   sta     TADR+1      ;SAVE IT
d1c7 : 8601                     lda     #1          ;SET NON ZERO
d1c9 : b7cc1d                   sta     XFR         ;SET TRANSFER FLAG
d1cc : 20e5                     bra     LOAD2       ;REPEAT
                                                    ;
d1ce : 8d22             LOAD4   bsr     DOFMS       ;GET NEXT CHAR
d1d0 : 1f89                     tfr     a,b         ;SAVE IT
d1d2 : 8d1e                     bsr     DOFMS       ;GET REST
d1d4 : 1e89                     exg     a,b         ;PUT IN ORDER
d1d6 : f3cc1b                   addd    OFFSET      ;OFFSET + ADDRESS
d1d9 : fdcc3d                   std     INDEX       ;SAVE POINTER
d1dc : 8d14                     bsr     DOFMS       ;GET DATA COUNT
d1de : 1f89                     tfr     a,b         ;MOVE TO B
d1e0 : 4d                       tsta                ;ZERO COUNT?
d1e1 : 27d0                     beq     LOAD2       ;YES - 
                                                    ;
d1e3 : 8d0d             LOAD6   bsr     DOFMS       ;GET CHARACTER
d1e5 : becc3d                   ldx     INDEX       ;GET POINTER
d1e8 : a780                     sta     ,x+        ;SAVE IN MEMORY
d1ea : bfcc3d                   stx     INDEX       ;SAVE POINTER
d1ed : 5a                       decb                ;DEC THE COUNT
d1ee : 26f3                     bne     LOAD6       ;FINISHED?
d1f0 : 20c1                     bra     LOAD2       ;REPEAT
                        
                        * DOFMS
                        *
                        * DOFMS does AN IO TRANSFER TO THE
                        * FILE Mgmnt SYSTEM.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  saME AS FMS COMMAND
                        
d1f2 : 8ec840           DOFMS   ldx     #SYSFCB     ;POINT TO FCB
d1f5 : bdd406                   jsr     FMS         ;DO COMMAND
d1f8 : 2711                     beq     LD20B       ;ERROR?
                                                    ;
d1fa : a601                     lda     1,x         ;GET ERROR CODE
d1fc : 8108                     cmpa    #8          ;IS IT EOF?
d1fe : 260e                     bne     DOFMS4      ;
                                                    ;
d200 : 3262                     leas    2,s         ;FIX STACK
d202 : 8604                     lda     #4          ;SET CMND
d204 : a700                     sta     0,x         ;
d206 : bdd406                   jsr     FMS         ;CALL FMS
d209 : 260a                     bne     DOFMS6      ;ERROR?
                                                    ;
d20b : 1cfe             LD20B   andcc   #$FE        ;CLC  CLEAR ERROR
d20d : 39                       rts                 ;
                                                    ;
d20e : b7cc20           DOFMS4  sta     ERRTYP      ;SET TYPE
d211 : 8104                     cmpa    #4          ;NO FILE ERROR?
d213 : 2772                     beq     LD287       ;YES - 
                                                    ;
d215 : 8d73             DOFMS6  bsr     RPTERR      ;REPORT ERROR
d217 : 7ecdde                   jmp     NFERR4      ;DO WARM START
                        
AS09 Assembler for M6809 [1.42].                                     Page   30
--------------------------------- FLEX9.asm ----------------------------------

                        * GET
                        *
                        * GET IS the DOS COMMAND USED TO
                        * LOAD Binary FILES INTO MEMORY.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  alL REGISTERS CHANGED
                        
d21a : 8600             GET     lda     #0          ;SET DEFAULT CODE
d21c : 8d35                     bsr     GETOPN      ;GET & OPEN FILE
d21e : 250f                     bcs     TSTNAM      ;NO NAME?
d220 : 8d07                     bsr     CLROFS      ;CLEAR OFFSET
d222 : 7ccc4c                   inc     GOTFIL      ;SET FILE INDIC.
d225 : 8d89                     bsr     LOAD        ;GO DO LOAD
d227 : 20f1                     bra     GET         ;REPEAT PROCESS
                        
                        * CLROFS
                        *
                        * CLEARS storAGE LOC. OFFSET
                        
d229 : 4f               CLROFS  clra
d22a : 5f                       clrb
d22b : fdcc1b                   std     OFFSET
d22e : 39                       rts
                        
                        * TSTNAM
                        *
                        * TSTNAM testS TO SEE IF ANY NAMES HAVE
                        * BEEN ProcesSED YET.
                        
d22f : f6cc4c           TSTNAM  ldb     GOTFIL      ;CHECK FLAG
d232 : 1027fb9d                 lbeq    NFERR       ;REPORT ERROR
d236 : 7ecd03                   jmp     WARMS       ;ALL DONE
                        
                        * LGO
                        *
                        * LGO IS the SYSTEM LOAD AND GO MODULE.
                        *
                        *   ENTRy: noNE
                        *   EXIT:  alL CHANGED
                        
d239 : 8602             LGO     lda     #2          ;SET DEFAULT CODE
d23b : 8d22                     bsr     GETOP2      ;OPEN FILE
d23d : 8dea                     bsr     CLROFS      ;CLEAR OFFSET
d23f : bdd1b0                   jsr     LOAD        ;GO DO LOAD
                                ;                    ;
d242 : f6cc1d                   ldb     XFR         ;CHECK FOR TRANSFER ADR
d245 : 2704                     beq     LGO2        ;
d247 : 6e9fcc1e                 jmp     [TADR]      ;JUMP TO XFR ADR
                                                    ;
d24b : 8ecc56           LGO2    ldx     #NOTRST     ;POINT TO STRING
d24e : 8681                     lda     #$81        ;SET TYPE
d250 : 7ecdd8                   jmp     NFERR1      ;REPORT
                        
                        * GETOPN
                        *
                        * GETOPN gets THE FILES NAME FROM
                        * THE INput bUFFER AND OPENS THE FILE
                        *
                        *   ENTRy: a HAS DEFAULT CODE
                        *   EXIT:  alL CHANGED
                        
AS09 Assembler for M6809 [1.42].                                     Page   31
--------------------------------- FLEX9.asm ----------------------------------

d253 : 3402             GETOPN  pshs    a           ;SAVE CODE
d255 : 8ec840                   ldx     #SYSFCB     ;POINT TO FCB
d258 : bdd032                   jsr     GETFIL      ;GET FILE SPEC
d25b : 3502                     puls    a           ;RESTORE CODE
d25d : 251a                     bcs     GETOP4      ;ERROR?
                                                    ;
d25f : 8ec840           GETOP2  ldx     #SYSFCB     ;POINT TO FCB
d262 : bdd0e7                   jsr     SETEXT      ;SET EXTENSION
d265 : 8ec840                   ldx     #SYSFCB     ;POINT TO FCB
d268 : 8601                     lda     #1          ;SET OPEN CODE
d26a : a700                     sta     0,x         ;SET COMMAND
d26c : bdd1f2                   jsr     DOFMS       ;GO DO FMS
d26f : 102500bb                 lbcs    NONMER      ;REPORT ANY ERROR
d273 : 86ff                     lda     #$FF        ;SET NEG
d275 : a7883b                   sta     59,x        ;SET FOR NO SPC COMP
d278 : 39                       rts                 ;
                                                    ;
d279 : b6cc11           GETOP4  lda     LSTTRM      ;GET TERM
d27c : 810d                     cmpa    #$0D        ;IS TERM CR?
d27e : 2707                     beq     LD287       ;YES - 
                                                    ;
d280 : b1cc02                   cmpa    TTYEOL      ;IS IT EOL?
d283 : 1026fb4c                 lbne    NFERR       ;ERROR IF NEITHER
                                                    ;
d287 : 1a01             LD287   orcc    #1          ;SEC  SET TERM INDICATOR
d289 : 39                       rts
                        
                        * RPTERR
                        *
                        * RPTERR repoRTS FMS ERRORS
                        
d28a : 3430             RPTERR  pshs    x,y         ;SAVE REGISTERS
d28c : a601                     lda     1,x         ;GET ERR NUM
d28e : b7cc20                   sta     ERRTYP      ;SAVE IT
d291 : 2763                     beq     RPTE44      ;
d293 : bdcde4                   jsr     RESTIO      ;RESTORE IO
d296 : 10becc2d                 ldy     ERRVEC      ;GET ERR VECTOR
d29a : 2608                     bne     RPTER1      ;
d29c : 8110                     cmpa    #$10        ;NOT READY ERROR
d29e : 2758                     beq     RPTER6      ;
d2a0 : 108ecca1                 ldy     #ERNM       ;POINT TO STRING
                                                    ;
d2a4 : 8ec840           RPTER1  ldx     #SYSFCB     ;POINT TO FCB
d2a7 : 6d02                     tst     2,x         ;
d2a9 : 2709                     beq     RPTER2      ;
                                                    ;
d2ab : 8604                     lda     #4          ;CLOSE FILE IN FCB
d2ad : a700                     sta     0,x         ;
d2af : bdd406                   jsr     FMS         ;CALL FMS
d2b2 : 262e                     bne     RPTER4      ;
                                                    ;
d2b4 : 8ec838           RPTER2  ldx     #SYSFCB-8   ;SET TO FCB
d2b7 : c60b                     ldb     #$0B        ;SET COUNT
d2b9 : 8d6e                     bsr     RPTER9      ;COPY NAME TO FCB
d2bb : 8ec840                   ldx     #SYSFCB     ;
d2be : b6cc0b                   lda     SYSDRV      ;SET ALL DRIVES ** CHANGED
d2c1 : a703                     sta     3,x         ;
d2c3 : 8601                     lda     #1          ;SET EXTENSION
d2c5 : a700                     sta     0,x         ;OPEN FOR READ
d2c7 : bdd406                   jsr     FMS         ;
d2ca : 2616                     bne     RPTER4      ;ERROR?
                                                    ;
AS09 Assembler for M6809 [1.42].                                     Page   32
--------------------------------- FLEX9.asm ----------------------------------

d2cc : b6cc20                   lda     ERRTYP      ;GET ERROR NUM
d2cf : 4a                       deca                ;CALCULATE REC NUM
d2d0 : 47                       asra                ;
d2d1 : 47                       asra                ;
d2d2 : 4c                       inca                ;
d2d3 : 6f8820                   clr     32,x        ;SET LRN IN FCB
d2d6 : a78821                   sta     33,x        ;
d2d9 : 8615                     lda     #21         ;
d2db : a700                     sta     0,x         ;DO POSITION
d2dd : bdd406                   jsr     FMS         ;
d2e0 : 271e                     beq     RPTER7      ;
                                                    ;
d2e2 : 8ecc6f           RPTER4  ldx     #DSKERS     ;POINT TO STRING
d2e5 : bdce79                   jsr     PSTRNG      ;OUTPUT IT
d2e8 : becc3f                   ldx     CRSAVE      ;RESTORE TO FCB
d2eb : b6cc20                   lda     ERRTYP      ;GET ERR NUM
d2ee : a701                     sta     1,x         ;
d2f0 : 6f00                     clr     0,x         ;
d2f2 : 5f                       clrb                ;
d2f3 : bdcf82                   jsr     OUTDEC      ;OUTPUT NUMBER
                                                    ;
d2f6 : 35b0             RPTE44  puls    x,y,pc      ;RESTORE REGS. & RETURN
                                                    ;
d2f8 : 8ecc7c           RPTER6  ldx     #NTRST      ;POINT TO STRING
d2fb : bdce79                   jsr     PSTRNG      ;OUTPUT IT
d2fe : 20f6                     bra     RPTE44      ;
                                                    ;
d300 : bdceb1           RPTER7  jsr     PCRLF       ;OUTPUT CR & LF
d303 : 8ec840                   ldx     #SYSFCB     ;SET TO FCB
d306 : b6cc20                   lda     ERRTYP      ;GET ERROR
d309 : 4a                       deca                ;FIND RECORD IN FCB
d30a : 8403                     anda    #3          ;MASK NUMBER
d30c : c63f                     ldb     #63         ;GET MESSAGE LENGTH
d30e : 3d                       mul                 ;GET TO DESIRED MESSAGE
d30f : cb04                     addb    #4          ;ADD IN BIAS
d311 : e78822                   stb     34,x        ;SET FDI IN FCB
                                                    ;
d314 : bdd406           RPTE85  jsr     FMS         ;GET CHARACTER
d317 : 26c9                     bne     RPTER4      ;ERROR?
d319 : bdcf3d                   jsr     PUTCHR      ;OUTPUT CHARACTER
d31c : 810d                     cmpa    #$0D        ;IS IT CR?
d31e : 26f4                     bne     RPTE85      ;REPEAT
                                                    ;
d320 : 8604                     lda     #4          ;CLOSE FILE
d322 : a700                     sta     0,x         ;
d324 : bdd406                   jsr     FMS         ;CALL FMS
d327 : 20cd                     bra     RPTE44      ;EXIT
                                                    ;
d329 : 3430             RPTER9  pshs    x,y         ;SAVE REGISTERS
d32b : 7ed0fb                   jmp     SETEX4      ;GO COPY
                        
                        * NONMER
                        *
                        * REPORT no nAME ERROR
                        
d32e : 8ecc65           NONMER  ldx     #NONMST     ;POINT TO STRING
d331 : 7ecddb                   jmp     NFERR2      ;REPORT IT
                        
                        * DOCMD
                        *
                        * DO COMmand LINE
                        
AS09 Assembler for M6809 [1.42].                                     Page   33
--------------------------------- FLEX9.asm ----------------------------------

d334 : 3506             DOCMD   puls    a,b         ;GET RET ADR
d336 : fdcc43                   std     RETADR      ;SAVE ADDRESS
d339 : 10ffcc45                 sts     STKSTR      ;SAVE STACK PNTR
d33d : 7fcc20                   clr     ERRTYP      ;CLEAR FLAG
d340 : 7ccc28                   inc     CMFLG       ;SET MODE
d343 : 7ecdb2                   jmp     DOS4        ;GO DO LINE
                        
                        * RETRN
                        *
                        * RETRN returNS FROM DOCMD
                        
d346 : 7fcc28           RETRN   clr     CMFLG       ;CLEAR MODE
d349 : 10fecc45                 lds     STKSTR      ;RESTORE STACK
d34d : f6cc20                   ldb     ERRTYP      ;GET STATUS
d350 : 6e9fcc43                 jmp     [RETADR]    ;DO RETURN
                        
                        * ADDBX
                        * ADDS ContenTS OF B TO X
                        
d354 : 3a               ADDBX   abx
d355 : 39                       rts
                        
                        * MEXIT
                        *
                        * MONITOr exiT CHECK
                        
d356 : 7dccfc           MEXIT   tst     PR1         ;CHECK PROCESS 1
d359 : 2604                     bne     MEXIT2      ;
d35b : 6e9fd3f3                 jmp     [MONITR]    ;JUMP TO MONITOR
                                                    ;
d35f : 8ec840           MEXIT2  ldx     #SYSFCB     ;POINT TO FCB
d362 : 861b                     lda     #27         ;
d364 : a701                     sta     1,x         ;SET ERROR
d366 : bdd28a                   jsr     RPTERR      ;REPORT ERROR
d369 : 7ecd67                   jmp     ENTRY       ;GO BACK
                        
d3fd =                          org     $D3FD
                        
d3fd : 7ec400           TSTSTR  jmp     LC400
                        
                        
                        		include "FLX29FMS.asm"
                        * OPT PAG
                        * TTL 6809 FILE MANAGEMENT SYSTEM
                        	page
AS09 Assembler for M6809 [1.42].                                     Page   34
--------------------------------- FLEX9.asm ----------------------------------

                        *
                        * TSC 6809 DISK FILE MANAGEMENT SYSTEM
                        *
                        * COPYRIGHT (C) 1979 BY
                        *
                        * TECHNICAL SYSTEMS CONSULTANTS, INC.
                        * BOX 2574
                        * WEST LAFAYETTE, INDIANA 47906
                        * (317) 463-2502
                        *
                        * NOTE:
                        * AS OF 11/79 THE POINTS IN FMS WHICH LOAD A REGISTER
                        * WITH THE SECTOR LENGTH HAVE BEEN CHANGED TO SIMPLY
                        * CLEAR THE REGISTER (SINCE LDB #256 = LDB #0).
                        * ALL POINTS AFFECTED BY THIS CHANGE ARE FLAGGED WITH
                        * FOUR BACKSLASHES IN THE COMMENT FIELD (\\\\).
                        *
                        * CORRECTED WRITE FILE SECTOR MAP ROUTINE (WTFSM) 2/4/
                        
                        *
                        * THE FILE MANAGEMENT SYSTEM (FMS) RELIES
                        * ON THE USER DEFINITIONS OF FILE CONTROL
                        * BLOCKS (FCB) FOR EACH FILE OPENED.
                        * THE FCB STRUCTURE IS AS FOLLOWS:
                        *
                        * EACH FCB CONSUMES 320 BYTES OF RAM.
                        * EACH BYTE IS USED AS FOLLOWS:
                        *
                        * NAME  OFFSET FUNCTION
                        * ----  ------ --------
                        
0000 =                  FFC     equ     0           ;FUNCTION OP CODE
0001 =                  FES     equ     1           ;ERROR STATUS BYTE
0002 =                  FAS     equ     2           ;ACTIVITY STATUS
0003 =                  FDN     equ     3           ;DRIVE NUMBER
0004 =                  FFN     equ     4           ;- 11 FILE NAME
000c =                  FNE     equ     12          ;- 14 NAME EXTENSION
000f =                  FID     equ     15          ;IDENTIFIER BYTE
0010 =                  FNU     equ     16          ;FILE NUMBER
0011 =                  FSA     equ     17          ;- 18 START DISK ADR.
0013 =                  FEA     equ     19          ;- 20 END DISK ADDRESS
0015 =                  FSZ     equ     21          ;- 22 FILE SIZE
0017 =                  FMP     equ     23          ;- 24 FILE SECTOR MAP
0019 =                  FDT     equ     25          ;- 27 CREATION DATE
001c =                  FLP     equ     28          ;- 29 FCB LIST POINTER
001e =                  FCS     equ     30          ;- 31 CURRENT SECTOR
0020 =                  FRN     equ     32          ;- 33 RECORD NUMBER
0022 =                  FDI     equ     34          ;DATA INDEX
0023 =                  FRI     equ     35          ;RANDOM INDEX
0024 =                  FWB     equ     36          ;- 46 NAME WORK BUFFER
002f =                  FCD     equ     47          ;- 49 CURRENT DIR. ADR.
0032 =                  FFD     equ     50          ;- 52 FIRST DELETED DIR.
0035 =                  FLR     equ     53          ;- 55 LAST RECORD PNTR
0038 =                  FNK     equ     56          ;- 58 NEXT KEY POINTER
003b =                  FSC     equ     59          ;SPACE COMP. CNTR
003c =                  FSP     equ     60          ;- 63 SPARE BYTES
0040 =                  FSB     equ     64          ;- 319 SECTOR BUFFER
                        
003c =                  FMX equ FSP 				;MAX SECTOR NUMBER
0037 =                  SBC equ FLR+2 				;SEQ. BLOCK COUNT
                        
                        *
AS09 Assembler for M6809 [1.42].                                     Page   35
--------------------------------- FLEX9.asm ----------------------------------

                        * ALL DRIVER ROUTINES ARE REFERENCED
                        * THROUGH THIS TABLE.
                        
                        ;DREAD   equ     $DE00       ;DISK READ ROUTINE
                        ;DWRITE  equ     $DE03       ;DISK WRITE ROUTINE
                        ;RESTOR  equ     $DE09       ;HEAD RESTORE ROUTINE
                        ;VERIFY  equ     $DE06       ;WRITE VERIFY ROUTINE
                        ;DRIVE   equ     $DE0C       ;DRIVE SELECT
                        ;CHECK   equ     $DE0F       ;CHECK READY
                        ;QUKCHK  equ     $DE12       ;QUICK READY CHECK
                        ;DINIT   equ     $DE15       ;INITIALIZE DRIVERS
                        ;DWARM   equ     $DE18       ;USER WARMSTART ROUTINE
                        ;DSEEK   equ     $DE1B       ;SEEK TO TRACK ROUTINE
                        
                        * ALL LOW LEVEL SYSTEM VARIABLES
                        * AND CONSTANTS ARE IN THIS AREA.
                        *
                        * SYSTEM CONSTANTS
                        
0100 =                  SL      equ     256         ;SECTOR LENGTH
000b =                  NL      equ     11          ;NAME LENGTH
0005 =                  RTC     equ     5           ;RETRY COUNT
0007 =                  RSC     equ     7           ;SEEK RETRY COUNT
0004 =                  RS      equ     4           ;RECORD START
0010 =                  IRS     equ     16          ;INFO RECORD START
0018 =                  IRL     equ     24          ;INFO RECORD LENGTH
0004 =                  IRFAS   equ     $04         ;INFO MASK
0016 =                  LSTFC   equ     22          ;LAST FUNCTION CODE
007f =                  MAXSP   equ     $7F         ;MAX SPACE COUNT
0020 =                  SPC     equ     $20         ;ASCII SPACE
0009 =                  SCC     equ     9           ;SPACE COMPRESSION CHAR.
0018 =                  DELC    equ     $18         ;DELETE CHARACTER
0004 =                  NODR    equ     4           ;NUMBER OF DRIVES
0000 =                  DTRK    equ     0           ;DIRECTORY START TRACK
0005 =                  DSEC    equ     5           ;DIR. START SECTOR
0003 =                  ISEC    equ     3           ;INFO SECTOR NUMBER
007f =                  TRMSK   equ     $7F         ;TRACK MASK
007f =                  SCMSK   equ     $7F         ;SECTOR MASK
004c =                  LSTTRK  equ     76          ;LAST TRACK NUMBER
000f =                  LSTSEC  equ     15          ;LAST SECTOR NUMBER
0010 =                  RNFMSK  equ     $10         ;REC NOT FOUND MASK
0005 =                  MAIND   equ     $0005       ;MAIN DIRECTORY ADDRESS
                        
                        * DOS CONSTANTS
                        
cc0e =                  DATE    equ     $CC0E       ;SYSTEM DATA
c709 =                  LOCK    equ     $C709       ;LOCK FMS
c70c =                  UNLOCK  equ     $C70C       ;UNLOCK FMS
                        ;PR1     equ     $CCFC       ;PROCESS 1 REGISTER
                        
                        * SYSTEM ERROR NUMBER DEFINITIONS
                        *
                        * NAME  NUMBER MEANING
                        * ----  ------ -------
                        
0000 =                  NOER    equ     0           ;NO ERROR
0001 =                  ICER    equ     1           ;ILLEGAL FUNCTION CODE
0002 =                  FBER    equ     2           ;FILE BUSY
0003 =                  FEER    equ     3           ;FILE EXISTS
0004 =                  NFER    equ     4           ;NO SUCH FILE
0005 =                  DRER    equ     5           ;DIRECTORY ERROR
0006 =                  TMER    equ     6           ;TOO MANY FILES
AS09 Assembler for M6809 [1.42].                                     Page   36
--------------------------------- FLEX9.asm ----------------------------------

0007 =                  DFER    equ     7           ;DISK FULL
0008 =                  EFER    equ     8           ;END OF FILE
0009 =                  RDER    equ     9           ;READ ERROR (CRC)
000a =                  WTER    equ     10          ;WRITE ERROR (CRC)
000b =                  WPER    equ     11          ;WRITE PROTECTED
000c =                  DPER    equ     12          ;DELETE PROTECTED
000d =                  IFER    equ     13          ;ILLEGAL FCB
000e =                  DAER    equ     14          ;ILLEGAL DISK ADDRESS
000f =                  DNER    equ     15          ;DRIVE NUMBER ERROR
0010 =                  NRER    equ     16          ;NOT READY
0011 =                  ADER    equ     17          ;ACCESS DENIED
0012 =                  STER    equ     18          ;STATUS ERROR
0013 =                  IRER    equ     19          ;INDEX RANGE ERROR
0014 =                  FIER    equ     20          ;FMS INACTIVE
0015 =                  INER    equ     21          ;ILLEGAL FILE NAME
0016 =                  CLER    equ     22          ;CLOSE ERROR
0017 =                  FSER    equ     23          ;FSM OVERFLOW ERROR
0018 =                  RRER    equ     24          ;RECORD RANGE ERROR
0019 =                  RMER    equ     25          ;RECORD MATCH ERROR
                        
d400 =                          org $D400
                        
                        * FMS JUMP TABLES
                        *
                        * ALL CALLS TO THE FMS SHOULD ENTER
                        * THROUGH ONE OF THESE THREE POINTS.
                        
d400 : 7ed43a           FMSINT  jmp     INIT        ;FMS INITIALIZATION  $D400
d403 : 7ed45d           FMSCLS  jmp     EXCLS       ;FMS CLOSURE         $D403
d406 : 7ed47f           FMS     jmp     CMND        ;FMS COMMAND ENTRY   $D406
                        
                        * GLOBAL VARIABLE STORAGE
                        
d409 : 0000             FCBBAS  rmb     2           ;FCB BASE POINTER        $
d40b : 0000             FCBSTR  rmb     2           ;CURRENT FCB             $
d40d : 0000             TEMP    rmb     2           ;TEMPORARY INDEX         $
d40f : 0000             DATAPT  rmb     2           ;DATA POINTER            $
d411 : 00               ETRIES  rmb     1           ;ERROR TRY COUNT         $
d412 : 00               STRIES  rmb     1           ;SEEK TRY COUNT          $
d413 : 0000             CLD     rmb     2           ;CURRENT LOOK UP DIR     $
d415 : 0000             CUD     rmb     2           ;CURRENT USER DIR        $
d417 : 00               DIRDN   rmb     1           ;DIRECTORY DRIVE NUM     $
d418 : 0000             BKLN    rmb     2           ;BACK LINK               $
d41a : 00               SINDIR  rmb     1           ;SINGLE DIR SEARCH       $
d41b : 0000             AVLPNT  rmb     2           ;AVAIL POINTER           $
d41d : 00000000000000.. SECMAP  rmb     NODR*6      ;SECTOR MAPS             $
                        
d435 =                          org     $D435
                        
d435 : ff               VRFYFG  fcb     $FF         ;VERIFY FLAG
                        
d436 : 00000000         DRVINFO fcb     $00,$00,$00,$00
                        
                        * SYSTEM ENTRY ROUTINES
                        *
                        * THE FOLLOWING THREE ROUTINES SHOULD
                        * BE ACCESSED THROUGH THE SYSTEM JUMP
                        * TABLE.
                        
                        * INIT
                        *
                        * INIT IS THE FMS INITIALIZATION ROUTINE.
AS09 Assembler for M6809 [1.42].                                     Page   37
--------------------------------- FLEX9.asm ----------------------------------

                        * NO ERRORS CAN OCCUR FROM THIS ROUTINE
                        * AND THE SYSTEM ASSUMES NO FILES ARE OPEN.
                        
d43a : bdde15           INIT    jsr     DINIT       ;INITIALIZE DRIVERS
d43d : 8ed409                   ldx     #FCBBAS     ;SET POINTER
d440 : c60a                     ldb     #10         ;SET COUNT
d442 : 8d11                     bsr     INIT4       ;CLEAR SPACE
d444 : 8e0005                   ldx     #MAIND      ;SET MAIN DIRECTORY
d447 : bfd413                   stx     CLD         ;
d44a : bfd415                   stx     CUD         ;
d44d : 7fd41a                   clr     SINDIR      ;CLEAR SINGLE DIR
                                                    ;
d450 : 8ed41b           INIT2   ldx     #AVLPNT     ;POINT TO FMS SPC
d453 : c61a                     ldb     #26         ;SET COUNTER
                                                    ;
d455 : 6f80             INIT4   clr     ,x+        ;CLEAR BYTE
d457 : 5a                       decb                ;DEC THE COUNT
d458 : 26fb                     bne     INIT4       ;REPEAT?        
d45a : 7ec70c                   jmp     UNLOCK
                        
                        * EXCLS
                        *
                        * EXCLS IS THE FMS EXIT ROUTINE.
                        * EXECUTION OF THIS ROUTINE TELLS THE
                        * SYSTEM TO CLOSE ALL OPEN FILES.
                        
d45d : bdc709           EXCLS   jsr     LOCK        ;LOCK FMS
d460 : bed409           EXCLS1  ldx     FCBBAS      ;GET LINK BASE
d463 : 27eb                     beq     INIT2       ;ANY FCBS LEFT?
d465 : 3088e4                   leax    -FLP,x      ;
d468 : bfd40b                   stx     FCBSTR      ;SET ACT. FCB
d46b : 3420                     pshs    y           ;SAVE REGISTER
d46d : bddadb                   jsr     CLOSE       ;GO CLOSE FILE
d470 : 3520                     puls    y           ;RESTORE REGISTER
d472 : 24ec                     bcc     EXCLS1      ;REPEAT
                                                    ;
d474 : bed40b                   ldx     FCBSTR      ;SET TO FCB
d477 : 6f02                     clr     2,x         ;CLEAR FAS
d479 : bdc70c                   jsr     UNLOCK      ;UNLOCK FMS
d47c : c6ff                     ldb     #$FF        ;SET ERROR
d47e : 39                       rts
                        
                        * CMND
                        *
                        * CMND IS THE FMS COMMAND INTERPRETER.
                        * ALL COMMAND CALLS TO FMS SHOULD BE
                        * THROUGH THIS ROUTINE.
                        
d47f : 7dccfc           CMND    tst     PR1         ;PROCESS ACTIVE?
d482 : 2703                     beq     CMND1       ;
d484 : bdc709                   jsr     LOCK        ;LOCK FMS
                                                    ;
d487 : 3424             CMND1   pshs    b,y         ;SAVE REGISTERS
d489 : bfd40b                   stx     FCBSTR      ;SET FCB STORAGE
d48c : 6f01                     clr     FES,x       ;CLEAR ERRORS
d48e : e600                     ldb     FFC,x       ;GET FUNCTION CODE
d490 : 2622                     bne     CMND4       ;IO CODE?
                                                    ;
d492 : e602                     ldb     FAS,x       ;GET ACTIVITY BYTE
d494 : 271a                     beq     CMND3       ;
                                                    ;
d496 : c102                     cmpb    #2          ;IS IT WRITE?
AS09 Assembler for M6809 [1.42].                                     Page   38
--------------------------------- FLEX9.asm ----------------------------------

d498 : 2711                     beq     CMND2       ;
d49a : bdd5bd                   jsr     SRDSEQ      ;GO DO READ
d49d : bed40b           CMND15  ldx     FCBSTR      ;RESTORE X
d4a0 : 2526                     bcs     CMND7       ;ERROR?
d4a2 : 7dccfc                   tst     PR1         ;PR 1 ACTIVE?
d4a5 : 2623                     bne     CMND8       ;
d4a7 : 5f                       clrb                ;CLEAR ERRORS
d4a8 : 3524                     puls    b,y         ;RESTORE REGISTERS
d4aa : 39                       rts                 ;
                                                    ;jmp  $f82a
                                
d4ab : bdd6d8           CMND2   jsr     SWTSEQ      ;GO DO WRITE
d4ae : 20ed                     bra     CMND15      ;
                                                    ;
d4b0 : c612             CMND3   ldb     #STER       ;SET STATUS ERROR
d4b2 : 2014                     bra     CMND7       ;REPORT ERROR
                                                    ;
d4b4 : c116             CMND4   cmpb    #LSTFC      ;CHECK CODE
d4b6 : 2304                     bls     CMND5       ;
d4b8 : c601                     ldb     #ICER       ;SET CODE ERROR
d4ba : 200c                     bra     CMND7       ;REPORT IT
                                                    ;
d4bc : 5a               CMND5   decb                ;DEC THE CODE
d4bd : 58                       aslb                ;CODE TIMES 2
d4be : 8ed4d2                   ldx     #CODTBL     ;POINT TO TABLE
d4c1 : ad95                     jsr     [b,x]       ;GO DO ROUTINE
d4c3 : bed40b                   ldx     FCBSTR      ;RESTORE FCB PNTR
d4c6 : 2402                     bcc     CMND8       ;ERRORS?
                                                    ;
d4c8 : e701             CMND7   stb     FES,x       ;SET ERROR
                                                    ;
d4ca : bdc70c           CMND8   jsr     UNLOCK      ;
d4cd : 6d01                     tst     FES,x       ;TEST FOR ERROR
d4cf : 3524                     puls    b,y         ;RESTORE REGISTERS
d4d1 : 39                       rts
                        
                        * CODTBL
                        *
                        * CODTBL IS THE SYSTEM TABLE OF
                        * FUNCTION CODE ROUTINE ADDRESSES.
                        
d4d2 : d990             CODTBL  fdb     OPNRD       ;OPNRD   OPEN FOR READ
d4d4 : d9e3                     fdb     OPNWT       ;OPNWT   OPEN FOR WRITE
d4d6 : db11                     fdb     OPNRW       ;OPNRW   OPEN FOR READ WRI
d4d8 : dadb                     fdb     CLOSE       ;CLOSE   CLOSE FILE
d4da : d5eb                     fdb     REWIND      ;REWIND  REWIND FILE
d4dc : d826                     fdb     OPNDIR      ;OPNDIR  OPEN DIRECTORY
d4de : d841                     fdb     GETIR       ;GETIR   GET INFO RECORD
d4e0 : d880                     fdb     PUTIR       ;PUTIR   PUT INFO RECORD
d4e2 : d64a                     fdb     READSS      ;READSS  READ SINGLE SECTO
d4e4 : d6a8                     fdb     WRITSS      ;WRITSS  WRITE SINGLE SECT
d4e6 : d973                     fdb     WRTDIR      ;WRTDIR  WRITE DIRECTORY
d4e8 : dbee                     fdb     DELETE      ;DELETE  DELETE FILE
d4ea : db44                     fdb     RENAME      ;RENAME  RENAME FILE
d4ec : d6a2                     fdb     RETRY4      ;RETRY4  APPEND FILES
d4ee : da9f                     fdb     NEXTS       ;NEXTS   NEXT SEQU. SECTOR
d4f0 : d819                     fdb     OPNSIR      ;OPNSIR  OPEN SYSTEM INFO
d4f2 : d578                     fdb     GETRAN      ;GETRAN  GET RANDOM CHARAC
d4f4 : d599                     fdb     PUTRAN      ;PUTRAN  WRITE RANDOM CHAR
d4f6 : db1f                     fdb     WTAPP       ;WTAPP   OPEN WRITE APPEND
d4f8 : ddd6                     fdb     NXTRDY      ;NXTRDY  FIND NEXT READY D
d4fa : dd14                     fdb     POSIT       ;POSIT   POSITION TO RECOR
AS09 Assembler for M6809 [1.42].                                     Page   39
--------------------------------- FLEX9.asm ----------------------------------

d4fc : dcfe                     fdb     BKREC       ;BKREC   BACKUP ONE RECORD
                        
                        *
                        * THE FOLLOWING ROUTINES ARE THE SYSTEM
                        * LEVEL ROUTINES USED BY THE FMS.
                        
                        * SETFCB
                        *
                        * SETFCB IS USED TO TELL THE SYSTEM
                        * WHERE THE NEW FCB IS LOCATED.
                        * IT SETS UP A CHAINED STRUCTURE
                        * WITH FCBBAS AS THE BASE OF THE CHAIN.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF FCB EXISTS
                        *          ALL REGISTERS CHANGED
                        
d4fe : 8d21             SETFCB  bsr     FNDFCB      ;FIND FCB
d500 : 2605                     bne     SETFC2      ;ERROR?
d502 : c602                     ldb     #FBER       ;FILE BUSY
d504 : 1a01                     orcc    #1          ;SEC SHOW ERROR
d506 : 39                       rts                 ;
                                                    ;
d507 : ed84             SETFC2  std     ,x         ;SET FCB
d509 : ae84                     ldx     ,x         ;GET FCB POS
d50b : 6f84                     clr     ,x         ;CLEAR LAST LINK
d50d : 6f01                     clr     1,x         ;ALSO SHOWS NO ERROR
d50f : 39                       rts
                        
                        * REMFCB
                        *
                        * REMFCB IS USED TO REMOVE AN ACTIVE
                        * FCB FROM THE SYSTEM FCB LIST.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF FCB NOT FOUND
                        *          ALL REGISTERS CHANGED
                        
d510 : 8d0f             REMFCB  bsr     FNDFCB      ;FIND FCB
d512 : 2705                     beq     REMFC2      ;ERROR?
d514 : c60d                     ldb     #IFER       ;SET ERROR CODE
d516 : 1a01                     orcc    #1          ;SEC SHOW ERROR
d518 : 39                       rts                 ;
                                                    ;
d519 : ec9800           REMFC2  ldd     [0,x]       ;GET NEXT LINK
d51c : ed84                     std     ,x         ;SAVE NEW VALUE
d51e : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
d520 : 39                       rts
                        
                        * FNDFCB
                        *
                        * FNDFCB TRIES TO FIND THE FCB IN
                        * FCBSTR IN THE SYSTEM TABLE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  NE IF NOT FOUND
                        *          A & B DESTROYED
                        *          X POINTS TO FCB
                        
d521 : fcd40b           FNDFCB  ldd     FCBSTR      ;PICKUP FCB
d524 : c3001c                   addd    #FLP        ;SET TO LIST PNTR
d527 : 8ed409                   ldx     #FCBBAS     ;GET BASE LOC.
AS09 Assembler for M6809 [1.42].                                     Page   40
--------------------------------- FLEX9.asm ----------------------------------

d52a : 10ae84           FNDFC3  ldy     ,x         ;CHECK FOR LIST END
d52d : 2603                     bne     FNDFC4      ;
d52f : 1cfb                     andcc   #$FB        ;SET NE BIT
d531 : 39                       rts                 ;
                                                    ;
d532 : 10a384           FNDFC4  cmpd    ,x         ;COMPARE VALUE
d535 : 2601                     bne     FNDFC6      ;
d537 : 39                       rts                 ;RET WITH EQ
                                                    ;
d538 : ae84             FNDFC6  ldx     ,x         ;MOVE TO NEXT FCB
d53a : 20ee                     bra     FNDFC3      ;REPEAT
                        
                        * CLRFCB
                        *
                        * CLRFCB CLEARS SELECTED SECTIONS OF
                        * THE CURRENT FCB.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  ALL REGISTERS CHANGED
                        
d53c : bed40b           CLRFCB  ldx     FCBSTR      ;GET FCB
d53f : 4f                       clra                ;CLEAR A BYTE
d540 : 5f                       clrb                ;GET SECTOR LENGTH \\\\
d541 : 8d02                     bsr     CLRFC2      ;CLEAR OUT
d543 : c62f                     ldb     #FSB-FSA    ;
d545 : a78811           CLRFC2  sta     FSA,x       ;CLEAR BYTE
d548 : 3001                     leax    1,x         ;BUMP THE POINTER
d54a : 5a                       decb                ;DEC THE COUNT
d54b : 26f8                     bne     CLRFC2      ;LOOP TIL DONE
d54d : 39                       rts
                        
                        * COPNAM
                        *
                        * COPNAM WILL COPY THE NAME (NL BYTES)
                        * FROM FCB AREA FFN (FILE NAME) TO THE
                        * AREA FWB (WORK BUFFER).
                        *
                        *   ENTRY: NONE
                        *   EXIT:  ALL REGISTERS CHANGED
                        
d54e : bed40b           COPNAM  ldx     FCBSTR      ;PICKUP FCB
d551 : c60b                     ldb     #NL         ;SET NAME LENGTH
d553 : a604             COPNA2  lda     FFN,x       ;GET CHARACTER
d555 : a78824                   sta     FWB,x       ;MOVE IT
d558 : 3001                     leax    1,x         ;BUMP THE POINTER
d55a : 5a                       decb                ;DEC THE COUNTER
d55b : 26f6                     bne     COPNA2
d55d : 39                       rts
                        
                        * CMPNAM
                        *
                        * CMPNAM WILL COMPARE THE NAME (NL
                        * BYTES LONG) IN THE FCB AREA FWB
                        * (WORK BUFFER) TO THE CONTENTS OF
                        * FCB AREA FFN (FILE NAME).
                        *
                        *   ENTRY: NONE
                        *   EXIT:  NE IF NOT EQUAL
                        *          ALL REGISTERS CHANGED
                        
d55e : bed40b           CMPNAM  ldx     FCBSTR      ;PICKUP FCB
d561 : c60b                     ldb     #NL         ;SET LENGTH
AS09 Assembler for M6809 [1.42].                                     Page   41
--------------------------------- FLEX9.asm ----------------------------------

                                                    ;
d563 : a604             CMPNA1  lda     FFN,x       ;GET CHARACTER
d565 : 8a20                     ora     #$20        ;MAKE LOWERCASE
d567 : 3402                     pshs    a           ;
d569 : a68824                   lda     FWB,x       ;GET 2ND CHARACTER
d56c : 8a20                     ora     #$20        ;MAKE LOWERCASE
d56e : a1e0                     cmpa    ,s+         ;COMPARE THEM
d570 : 2605                     bne     CMPNA4      ;NOT EQUAL?
                                                    ;
d572 : 3001                     leax    1,x         ;BUMP THE POINTER
d574 : 5a                       decb                ;DEC THE COUNTER
d575 : 26ec                     bne     CMPNA1      ;REPEAT
d577 : 39               CMPNA4  rts
                        
                        * GETRAN   * FFC #17 *
                        *
                        * GETRAN GETS A RANDOM CHARACTER FROM
                        * THE CURRENT FSB.
                        *
                        *   ENTRY: FRI CONTAINS DESIRED INDEX
                        *   EXIT:  CS IF FRI OUT OF RANGE
                        *          A CONTAINS CHARACTER
                        *          B & X CHANGED
                        
d578 : bed40b           GETRAN  ldx     FCBSTR      ;GET FCB
d57b : e602                     ldb     FAS,x       ;GET STATUS
d57d : 54                       lsrb                ;CHECK IF R OR RW
d57e : 2479                     bcc     REWIN2      ;GO SET ERROR
d580 : e68823                   ldb     FRI,x       ;GET RANDOM INDEX
d583 : 7ed609                   jmp     RDSEQ0
                        
                        * PUTNXT
                        *
                        * PUTNXT PUTS THE CHARACTER IN A INTO
                        * THE NEXT AVAILABLE FSB LOCATION
                        * POINTED TO BY THE FDI.
                        *
                        *   ENTRY: A CONTAINS CHARACTER
                        *   EXIT:  CS IF LAST FSB POS. USED
                        *          B & X CHANGED
                        
d586 : bed40b           PUTNXT  ldx     FCBSTR      ;PICKUP FCB
d589 : e68822                   ldb     FDI,x       ;GET DATA INDEX
d58c : 6c8822                   inc     FDI,x       ;BUMP FDI
d58f : 3a                       abx                 ;ADD IN INDEX
d590 : a78840                   sta     FSB,x       ;PUT THE CHARACTER
d593 : 5c                       incb                ;BUMP IT
d594 : 261f                     bne     PUTRA2      ;OVER END OF FSB?
d596 : 1a01                     orcc    #1          ;SEC OVER END!
d598 : 39                       rts
                        
                        * PUTRAN   * FFC #18 *
                        *
                        * PUTRAN PUTS THE CHARACTER IN A
                        * IN THE FSB LOCATION INDEXED BY
                        * THE FRI.
                        *
                        *   ENTRY: A CONTAINS CHARACTER
                        *          FRI CONTAINS INDEX
                        *   EXIT:  CS IF FRI OUT OF RANGE
                        *          B & X CHANGED
                        
AS09 Assembler for M6809 [1.42].                                     Page   42
--------------------------------- FLEX9.asm ----------------------------------

d599 : bed40b           PUTRAN  ldx     FCBSTR      ;GET FCB
d59c : e602                     ldb     FAS,x       ;CHECK IF RW
d59e : c403                     andb    #3          ;MASK OFF
d5a0 : c103                     cmpb    #3          ;IS IT RW?
d5a2 : 2655                     bne     REWIN2      ;SKIP IF ERROR
d5a4 : ca80                     orb     #$80        ;SET UPDATE BIT
d5a6 : e702                     stb     FAS,x       ;SAVE IT
d5a8 : e60f                     ldb     FID,x       ;CHECK WP
d5aa : c580                     bitb    #$80        ;
d5ac : 260a                     bne     PUTRA4      ;
d5ae : e68823                   ldb     FRI,x       ;GET RANDOM INDEX
d5b1 : 3a                       abx                 ;ADD IN INDEX
d5b2 : a78840                   sta     64,x        ;FSB,x PUT CHARACTER
                                                    ;
d5b5 : 1cfe             PUTRA2  andcc   #$FE        ;CLC CLEAR ERROR
d5b7 : 39                       rts                 ;
                                                    ;
d5b8 : c60b             PUTRA4  ldb     #WPER       ;SET WP ERROR
d5ba : 1a01                     orcc    #1          ;SEC SET ERROR
d5bc : 39                       rts
                        
                        * SRDSEQ
                        *
                        * SRDSEQ IS THE HIGH LEVEL READ
                        * SEQUENTIAL CHARACTER ROUTINE.
                        * CONTROL CHARACTERS AND SPACE
                        * EXPANSION ARE HANDLED HERE UNLESS
                        * FSC IS NEGATIVE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        *          B HAS ERROR NUMBER
                        *          A & X CHANGED
                        
d5bd : a6883b           SRDSEQ  lda     FSC,x       ;CHECK FOR SP. EXP.
d5c0 : 2b3c                     bmi     RDSEQ       ;CONTROL IGNORE?
d5c2 : 2707                     beq     SRDSE2      ;ACTIVE EXPANSION?
d5c4 : 6a883b                   dec     FSC,x       ;DEC THE SPACE COUNT
d5c7 : 8620                     lda     #SPC        ;SETUP SPACE
d5c9 : 201d                     bra     SRDSE7      ;FINISH UP
                                                    ;
d5cb : 8d31             SRDSE2  bsr     RDSEQ       ;READ NEXT CHAR
d5cd : 251b                     bcs     SRDSE8      ;ERRORS?
d5cf : 8118                     cmpa    #DELC       ;IS IT DELETED?
d5d1 : 2215                     bhi     SRDSE7      ;SKIP ALL SPECIALS
d5d3 : 27f6                     beq     SRDSE2      ;
d5d5 : 8109                     cmpa    #SCC        ;SPACE COMP CHAR?
d5d7 : 260c                     bne     SRDSE6      ;
d5d9 : 8d23                     bsr     RDSEQ       ;GO GET COUNT
d5db : 250d                     bcs     SRDSE8      ;ERROR?
d5dd : bed40b                   ldx     FCBSTR      ;RESTORE POINTER
d5e0 : a7883b                   sta     FSC,x       ;SAVE COUNT
d5e3 : 20d8                     bra     SRDSEQ      ;REPEAT
                                                    ;
d5e5 : 4d               SRDSE6  tsta                ;IS CHAR NULL?
d5e6 : 27e3                     beq     SRDSE2      ;IGNORE IF SO
                                                    ;
d5e8 : 1cfe             SRDSE7  andcc   #$FE        ;CLC CLEAR ERROR
d5ea : 39               SRDSE8  rts
                        
                        * REWIND   * FFC #5 *
                        *
AS09 Assembler for M6809 [1.42].                                     Page   43
--------------------------------- FLEX9.asm ----------------------------------

                        * REWIND WILL LOGICALLY REWIND THE
                        * FILE SPECIFIED IN THE FCB.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  SAME AS RDNEXT
                        
d5eb : bddac9           REWIND  jsr     DOSTAT      ;CHECK STATUS
d5ee : 2509                     bcs     REWIN2      ;ERROR?
d5f0 : 8501                     bita    #1          ;CHECK FOR R BIT
d5f2 : 2705                     beq     REWIN2      ;ERROR?
d5f4 : a700                     sta     FFC,x       ;SET FFC
d5f6 : 7ed9aa                   jmp     OPNRD1      ;GO SETUP FILE
                                                    ;
d5f9 : c612             REWIN2  ldb     #STER       ;SET ERROR CODE
d5fb : 1a01                     orcc    #1          ;SEC SHOW ERROR
d5fd : 39                       rts
                        
                        * RDSEQ
                        *
                        * RDSEQ IS THE LOW LEVEL GET
                        * SEQUENTIAL CHARACTER ROUTINE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CHAR IN A
                        *          CS IF ERROR
                        *          B & X DESTROYED
                        
d5fe : bed40b           RDSEQ   ldx     FCBSTR      ;PICKUP FCB
d601 : e68822                   ldb     FDI,x       ;GET DATA INDEX
d604 : 270a                     beq     RDSEQ1      ;
d606 : 6c8822                   inc     FDI,x       ;BUMP DATA INDEX
                                                    ;
d609 : 3a               RDSEQ0  abx                 ;ADD IN OFFSET
d60a : a68840                   lda     FSB,x       ;GET CHARACTER
d60d : 1cfe                     andcc   #$FE        ;CLC
d60f : 39                       rts                 ;
                                                    ;
d610 : 8d03             RDSEQ1  bsr     RDNEXT      ;GET NEXT RECORD
d612 : 24ea                     bcc     RDSEQ       ;ERRORS?
d614 : 39                       rts
                        
                        * RDNEXT
                        *
                        * RDNEXT READS THE NEXT SEQUENTIAL
                        * RECORD IF IT EXISTS.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        *          B HAS ERROR NUMBER
                        *          A & X CHANGED
                        
d615 : bed40b           RDNEXT  ldx     FCBSTR      ;PICKUP FCB
d618 : ec8840                   ldd     FSB,x       ;GET TRACK & SECTOR
d61b : 6c8821                   inc     FRN+1,x     ;BUMP REC NUM
d61e : 2603                     bne     RDNEX1      ;
d620 : 6c8820                   inc     FRN,x       ;
                                                    ;
d623 : 10830000         RDNEX1  cmpd    #$0000      ;TEST IF 0 LINK
d627 : 271c                     beq     RDNEX4      ;END OF FILE?
d629 : ed881e           RDNEX2  std     FCS,x       ;SET CURRENT ADR.
d62c : 3402                     pshs    a           ;
d62e : 8604                     lda     #RS         ;SET RECORD START
AS09 Assembler for M6809 [1.42].                                     Page   44
--------------------------------- FLEX9.asm ----------------------------------

d630 : a78822                   sta     FDI,x       ;SAVE IT
d633 : 3502                     puls    a           ;
d635 : 8d13                     bsr     READSS      ;GO DO READ
d637 : 2410                     bcc     RDNEX8      ;ERRORS?
d639 : c580                     bitb    #$80        ;CHECK NOT READY
d63b : 2704                     beq     RDNEX3      ;
d63d : c610                     ldb     #NRER       ;SET ERROR
d63f : 2006                     bra     RDNEX6      ;
                                                    ;
d641 : c609             RDNEX3  ldb     #RDER       ;SET READ ERROR
d643 : 2002                     bra     RDNEX6      ;
                                                    ;
d645 : c608             RDNEX4  ldb     #EFER       ;SET EOF ERROR
d647 : 1a01             RDNEX6  orcc    #1          ;SEC SHOW ERROR
d649 : 39               RDNEX8  rts
                        
                        * READSS   * FFC #9 *
                        *
                        * READSS READS A SINGLE RECORD (SECTOR)
                        * FROM THE DISK.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF READ ERROR
                        *          ALL REGISTERS CHANGED
                        
d64a : 8d25             READSS  bsr     CLRTRY      ;CLEAR TRY COUNTERS
d64c : bed40b                   ldx     FCBSTR      ;SET POINTER
d64f : bdf177                   jsr     DRIVE       ;DO DRIVE SEL
d652 : 2512                     bcs     READS6      ;
                                                    ;
d654 : 8d11             READS2  bsr     GETCUR      ;GET DISK ADDRESS
d656 : bdde00                   jsr     DREAD       ;GO READ RECORD
d659 : 2603                     bne     READS4      ;ERRORS?
d65b : 1cfe                     andcc   #$FE        ;CLC CLEAR ERROR
d65d : 39                       rts                 ;
                                                    ;
d65e : 3404             READS4  pshs    b           ;SAVE B
d660 : 8d17                     bsr     RETRY       ;CHECK IF RETRY
d662 : 3504                     puls    b           ;RESTORE B
d664 : 24ee                     bcc     READS2      ;TRY AGAIN?
                        
d666 : 39               READS6  rts
                        
                        * GETCUR
                        *
                        * GETCUR GETS THE CURRENT RECORD ADDRESS
                        * (TRACK AND SECTOR) INTO A & B.
                        * IF ILLEGAL ADDRESS, CARRY IS SET.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ILLEGAL ADR.
                        *          A = TRACK NUMBER
                        *          B = SECTOR NUMBER
                        *          X POINTS TO FSB
                        
d667 : bed40b           GETCUR  ldx     FCBSTR      ;PICKUP FCB
d66a : ec881e                   ldd     FCS,x       ;GET TRACK & SECTOR
d66d : 308840                   leax    FSB,x       ;ADD FSB BIAS
d670 : 39                       rts
                        
                        * CLRTRY
                        *
AS09 Assembler for M6809 [1.42].                                     Page   45
--------------------------------- FLEX9.asm ----------------------------------

                        * CLRTRY CLEARS THE ERROR TRY COUNTERS
                        *
                        *   ENTRY: NONE
                        *   EXIT:  A CLEARED
                        
d671 : 4f               CLRTRY  clra                ;CLEAR A
d672 : b7d411                   sta     ETRIES      ;CLEAR COUNTERS
d675 : b7d412                   sta     STRIES
d678 : 39                       rts
                        
                        * RETRY
                        *
                        * RETRY WILL TEST THE TRY COUNTERS
                        * ETRIES AND STRIES TO SEE IF THEY
                        * ARE AT MAXIMUM.
                        * A RESTORE OPERATION IS PERFORMED
                        * IF NECESSARY.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF NO MORE TRIES LEFT
                        
d679 : c510             RETRY   bitb    #$10        ;CHECK IF SEEK ERROR
d67b : 2611                     bne     RETRY2      ;
d67d : c580                     bitb    #$80        ;CHECK NOT READY
d67f : 2624                     bne     RETRY6      ;
d681 : f6d411                   ldb     ETRIES      ;CHECK ERROR CNTR
d684 : 5c                       incb                ;BUMP IT ONE
d685 : c105                     cmpb    #RTC        ;IS IT MAXIMUM?
d687 : 2705                     beq     RETRY2      ;
                                                    ;
d689 : f7d411                   stb     ETRIES      ;SAVE COUNT
d68c : 2014                     bra     RETRY4      ;
                                                    ;
d68e : 7fd411           RETRY2  clr     ETRIES      ;CLEAR COUNTER
d691 : f6d412                   ldb     STRIES      ;CHECK SEEK CNTR
d694 : 5c                       incb                ;BUMP IT
d695 : c107                     cmpb    #RSC        ;IS IT MAXIMUM?
d697 : 270c                     beq     RETRY6      ;
d699 : f7d412                   stb     STRIES      ;SAVE COUNTER
d69c : bed40b                   ldx     FCBSTR      ;
d69f : bdde09                   jsr     DRESTOR      ;GO RESTORE
                                                    ;
d6a2 : 1cfe             RETRY4  andcc   #$FE        ;CLC CLEAR ERROR
d6a4 : 39                       rts                 ;
                                                    ;
d6a5 : 1a01             RETRY6  orcc    #1          ;SEC SET ERROR
d6a7 : 39                       rts
                        
                        * WRITSS   * FFC #10 *
                        *
                        * WRITSS IS THE SYSTEM WRITE SINGLE
                        * SECTOR ROUTINE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF WRITE ERROR
                        *          ALL REGISTERS CHANGED
                        
d6a8 : 8dc7             WRITSS  bsr     CLRTRY      ;CLEAR TRY COUNTERS    
d6aa : bed40b                   ldx     FCBSTR      ;SET POINTER
d6ad : bdf177                   jsr     DRIVE       ;DO DRIVE SEL
d6b0 : 2520                     bcs     WRITS6      ; 
                                                    ;
AS09 Assembler for M6809 [1.42].                                     Page   46
--------------------------------- FLEX9.asm ----------------------------------

d6b2 : bed40b           WRITS2  ldx     FCBSTR      ;SET POINTER
d6b5 : 8db0                     bsr     GETCUR      ;GET CURRENT SEC
d6b7 : bdde03                   jsr     DWRITE      ;DO ACTUAL WRITE
d6ba : 260a                     bne     WRITS4      ;ERRORS?
                                                    ;
d6bc : b6d435                   lda     VRFYFG      ;VERIFY SECTOR?
d6bf : 2737                     beq     SWTSE6      ;NO VERIFY
                                                    ;
d6c1 : bdf156                   jsr     VERIFY      ;GO DO VERIFY
d6c4 : 2732                     beq     SWTSE6      ;ERROR?
                                                    ;
d6c6 : c540             WRITS4  bitb    #$40        ;CHECK IF W.P.
d6c8 : 260b                     bne     WRITS8      ;
                                                    ;
d6ca : 3404                     pshs    b           ;SAVE STATUS
d6cc : 8dab                     bsr     RETRY       ;RETRY?
d6ce : 3504                     puls    b           ;RESTORE STATUS
d6d0 : 24e0                     bcc     WRITS2      ;TRY AGAIN
d6d2 : 39               WRITS6  rts                 ;ERROR RETURN
                                                    ;
d6d3 : c620             WRITS7  ldb     #$20        ;SET ERROR
d6d5 : 1a01             WRITS8  orcc    #1          ;SHOW ERROR
d6d7 : 39                       rts                 ;ERROR RETURN
                        
                        * SWTSEQ
                        *
                        * SWTSEQ IS THE HIGH LEVEL WRITE
                        * SEQUENTIAL CHARACTER ROUTINE.
                        * SPACE COMPRESSION IS HANDLED HERE
                        * UNLESS FSC IS NEGATIVE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        *          B HAS ERROR NUMBER
                        *          A & X CHANGED
                        
d6d8 : bed40b           SWTSEQ  ldx     FCBSTR      ;PICKUP FCB
d6db : e6883b                   ldb     FSC,x       ;GET SPC COUNT
d6de : 2b3d                     bmi     WTSEQ       ;WRITE IF NEG.
d6e0 : 8120                     cmpa    #SPC        ;IS CHARACTER SPACE?
d6e2 : 260f                     bne     SWTSE4      ;
d6e4 : 5c                       incb                ;BUMP THE COUNT
d6e5 : e7883b                   stb     FSC,x       ;SAVE IT
d6e8 : c17f                     cmpb    #MAXSP      ;MAXIMUM?
d6ea : 260c                     bne     SWTSE6      ;
d6ec : 200d                     bra     PUTSPC      ;** FIX FOR 128 SPACES **
                                                    ;
d6ee : 8d0b             SWTSE2  bsr     PUTSPC      ;GO PUT SPACES
d6f0 : 24e6                     bcc     SWTSEQ      ;ERRORS?
d6f2 : 39                       rts                 ;
                                                    ;
d6f3 : 5d               SWTSE4  tstb                ;COUNT ZERO?
d6f4 : 2727                     beq     WTSEQ       ;
d6f6 : 20f6                     bra     SWTSE2      ;DO SPACES
                                                    ;
d6f8 : 1cfe             SWTSE6  andcc   #$FE        ;CLC CLEAR ERRORS
d6fa : 39                       rts
                        
                        * PUTSPC
                        *
                        * PUTSPC IS THE ROUTINE WHICH WRITES
                        * THE SPACE COMPRESSION CODE AND THE
AS09 Assembler for M6809 [1.42].                                     Page   47
--------------------------------- FLEX9.asm ----------------------------------

                        * SPACE COUNT.
                        *
                        *   ENTRY: B HAS COUNT
                        *   EXIT:  A PRESERVED
                        
d6fb : 3402             PUTSPC  pshs    a           ;SAVE CHAR
d6fd : c101                     cmpb    #1          ;IS COUNT 1?
d6ff : 2604                     bne     PUTSP2      ;
d701 : 8620                     lda     #$20        ;SETUP SPACE
d703 : 2010                     bra     PUTSP4      ;GO WRITE
                                                    ;
d705 : 8609             PUTSP2  lda     #SCC        ;SETUP SCC
d707 : 8d14                     bsr     WTSEQ       ;WRITE IT OUT
d709 : 3502                     puls    a           ;
d70b : 250f                     bcs     PUTSP6      ;ERROR?
d70d : 3402                     pshs    a           ;SAVE CHAR
d70f : bed40b                   ldx     FCBSTR      ;PICKUP FCB
d712 : a6883b                   lda     FSC,x       ;GET COUNT
d715 : 6f883b           PUTSP4  clr     FSC,x   	;CLEAR COUNT
d718 : 8d03                     bsr     WTSEQ       ;WRITE COUNT
d71a : 3502                     puls    a           ;RESTORE CHAR
d71c : 39               PUTSP6  rts
                        
                        * WTSEQ
                        *
                        * WTSEQ WRITES THE NEXT CHARACTER TO
                        * THE FSB AREA OF THE FCB.
                        *
                        *   ENTRY: A HAS CHARACTER
                        *   EXIT:  CS IF ERROR
                        *          B HAS ERROR NUMBER
                        *          X CHANGED
                        
d71d : bed40b           WTSEQ   ldx     FCBSTR      ;GET FCB POINTER
d720 : e602                     ldb     FAS,x       ;GET ACTIVE STATUS
d722 : c102                     cmpb    #2          ;IS IT WRITE?
d724 : 1026fed1                 lbne    REWIN2      ;ERROR IF NOT
d728 : e68822                   ldb     FDI,x       ;GET INDEX
d72b : c104                     cmpb    #RS         ;IS IT BEGINNING?
d72d : 2608                     bne     WTSEQ2      ;
d72f : 3402                     pshs    a           ;SAVE CHAR.
d731 : 8d21                     bsr     WTNEXT      ;GO WRITE RECORD
d733 : 3502                     puls    a           ;RESTORE CHAR.
d735 : 250f                     bcs     WTSEQ4      ;ERRORS?
                                                    ;
d737 : bdd586           WTSEQ2  jsr     PUTNXT      ;PUT CHARACTER
d73a : 240a                     bcc     WTSEQ4      ;LAST SPACE USED?
d73c : c604                     ldb     #RS         ;SET RECORD START
d73e : bed40b                   ldx     FCBSTR      ;POINT TO FCB
d741 : e78822                   stb     FDI,x       ;SET INDEX
d744 : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
d746 : 39               WTSEQ4  rts
                        
                        * CLRLRN
                        
d747 : bed40b           CLRLRN  ldx     FCBSTR      ;GET POINTER
d74a : 4f                       clra                ;
d74b : 5f                       clrb                ;
d74c : ed8820                   std     FRN,x       ;CLEAR LRN
d74f : ed8842                   std     FSB+2,x     ;CLEAR ACTUAL RN
d752 : 2027                     bra     WTNEX1      ;GO WRITE NEXT
                        
AS09 Assembler for M6809 [1.42].                                     Page   48
--------------------------------- FLEX9.asm ----------------------------------

                        * WTNEXT
                        *
                        * WTNEXT WRITES THE NEXT RECORD.
                        *
                        *   ENTRY: X = FCB
                        *   EXIT:  CS IF ERROR
                        *          REGISTERS CHANGED
                        
d754 : e68812           WTNEXT  ldb     FSA+1,x     ;FIRST RECORD?
d757 : 2622                     bne     WTNEX1      ;
d759 : e68817                   ldb     FMP,x       ;CHECK FOR RANDOM
d75c : 2744                     beq     ASNNXT      ;
d75e : 6f8817                   clr     FMP,x       ;CLEAR FLAG
d761 : 8d3f                     bsr     ASNNXT      ;GO ASSIGN
d763 : 252a                     bcs     GETFS2      ;ERROR?
d765 : 8de0                     bsr     CLRLRN      ;CLEAR LRN
d767 : 2526                     bcs     GETFS2      ;ERROR?
d769 : 8ddc                     bsr     CLRLRN      ;CLEAR NEXT
d76b : 2522                     bcs     GETFS2      ;ERROR?
d76d : bed40b                   ldx     FCBSTR      ;GET FCB
d770 : c602                     ldb     #2          ;SET FSM COUNT
d772 : e78817                   stb     FMP,x       ;
d775 : ec8811                   ldd     FSA,x       ;GET START ADDR
d778 : 7edc9a                   jmp     UPDF75      ;GO DO UPDATE
                                                    ;
d77b : 8d0e             WTNEX1  bsr     GETFST      ;GET FIRST AVAIL
d77d : bed40b                   ldx     FCBSTR      ;SET FCB PNTR
d780 : ed8840                   std     FSB,x       ;SET FORWARD LINK
d783 : bdd6a8                   jsr     WRITSS      ;WRITE RECORD
d786 : 241a                     bcc     ASNNXT      ;ERROR?
d788 : 7edbd9                   jmp     WRTERR      ;REPORT ERROR
                        
                        * GETFST
                        *
                        * GETFST LOADS THE FIRST AVAILABLE
                        * SECTOR ADDRESS INTO A & B.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  EQ IF FSTAVL = 00
                        *          X UNCHANGED
                        *          A & B = FSTAVL H & L
                        
d78b : 8d03             GETFST  bsr     FSECMP      ;FIND SECTOR MAP
d78d : ec84                     ldd     ,x         ;GET FIRST AVAIL.
d78f : 39               GETFS2  rts
                        
                        * FSECMP
                        *
                        * FSECMP FINDS THE SECTOR MAP
                        * CORRESPONDING TO THE CURRENT
                        * DRIVE SELECTED IN THE FCB.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  EQ IF AVAIL NOT SET
                        *          X POINTS TO SECTOR MAP
                        
d790 : bed40b           FSECMP  ldx     FCBSTR      ;PICKUP FCB
d793 : e603                     ldb     FDN,x       ;GET DRIVE NUMBER
d795 : 8606                     lda     #6          ;MULTIPLY TIMES 6
d797 : 3d                       mul                 ;
d798 : 8ed41d                   ldx     #SECMAP     ;POINT TO MAPS
d79b : 3a                       abx                 ;FIX POINTER
AS09 Assembler for M6809 [1.42].                                     Page   49
--------------------------------- FLEX9.asm ----------------------------------

d79c : bfd41b                   stx     AVLPNT      ;SET POINTER
d79f : 6d84                     tst     ,x         ;IS AVAIL EMPTY?
d7a1 : 39                       rts
                        
                        * ASNNXT
                        *
                        * ASNNXT ASSIGNS THE NEXT AVAILABLE
                        * RECORD TO THE CURRENT OPEN WRITE
                        * FILE POINTED TO BY THE FCB.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        *          ALL REGISTERS CHANGED
                        
d7a2 : 8de7             ASNNXT  bsr     GETFST      ;GET FSTAVL
d7a4 : 2605                     bne     ASNNX2      ;IS IT ZERO?
d7a6 : c607                     ldb     #DFER       ;DISK FULL!
d7a8 : 1a01             ASNNX1  orcc    #1          ;SEC SET ERROR
d7aa : 39                       rts                 ;
                                                    ;
d7ab : bed40b           ASNNX2  ldx     FCBSTR      ;GET FCB POINTER
d7ae : ed8813                   std     FEA,x       ;SET END ADDRESS
d7b1 : 6d8812                   tst     FSA+1,x     ;IS THIS FIRST?
d7b4 : 2603                     bne     ASNNX4      ;JUMP AHEAD IF NOT
d7b6 : ed8811                   std     FSA,x       ;SET START ADDRESS
                                                    ;
d7b9 : 6c8816           ASNNX4  inc     FSZ+1,x     ;BUMP FILE SIZE
d7bc : 2603                     bne     ASNNX6      ;
d7be : 6c8815                   inc     FSZ,x       ;FIX MSB
                                                    ;
d7c1 : 6d8817           ASNNX6  tst     FMP,x       ;CHECK FOR RANDOM
d7c4 : 270b                     beq     ASNN65      ;
d7c6 : bddc5b                   jsr     UPDFSM      ;UPDATE FSM ENTRY
d7c9 : 25dd                     bcs     ASNNX1      ;ERROR?
d7cb : bed40b                   ldx     FCBSTR      ;GET FCB
d7ce : ec8813                   ldd     FEA,x       ;GET END ADDRESS
                                                    ;
d7d1 : bdd629           ASNN65  jsr     RDNEX2      ;READ NEXT RECORD
d7d4 : 25d2                     bcs     ASNNX1      ;READ ERROR?
d7d6 : bed40b                   ldx     FCBSTR      ;POINT TO FCB
d7d9 : ec8840                   ldd     FSB,x       ;GET FOR. LINK
d7dc : 3406                     pshs    a,b         ;SAVE LINK
d7de : 8db0                     bsr     FSECMP      ;FIND SECTOR MAP
d7e0 : 3506                     puls    a,b         ;RESTORE LINK
d7e2 : ed84                     std     ,x         ;SET FIRST AVAIL
d7e4 : 260a                     bne     ASNNX7      ;FULL DISK??
                                                    ;
d7e6 : 6f02                     clr     2,x         ;CLEAR OUT REST
d7e8 : 6f03                     clr     3,x         ;
d7ea : 6f04                     clr     4,x         ;
d7ec : 6f05                     clr     5,x         ;
d7ee : 2008                     bra     ASNNX8      ;GO AHEAD
                                                    ;
d7f0 : 10ae04           ASNNX7  ldy     4,x         ;GET SEC COUNT
d7f3 : 313f                     leay    -1,y        ;DEC BY 1
d7f5 : 10af04                   sty     4,x         ;SAVE RESULT
                                                    ;
d7f8 : 4f               ASNNX8  clra                ;CLEAR REGISTER
d7f9 : bed40b                   ldx     FCBSTR      ;SET POINTER
d7fc : 6c8821                   inc     FRN+1,x     ;INC LRN
d7ff : 2603                     bne     ASNN85      ;
d801 : 6c8820                   inc     FRN,x       ;
AS09 Assembler for M6809 [1.42].                                     Page   50
--------------------------------- FLEX9.asm ----------------------------------

                                                    ;
d804 : 5f               ASNN85  clrb                ;GET SECTOR LENGTH \\\\
d805 : a78840           ASNNX9  sta     FSB,x       ;CLEAR LOCATION
d808 : 3001                     leax    1,x         ;BUMP POINTER
d80a : 5a                       decb                ;DEC THE COUNTER
d80b : 26f8                     bne     ASNNX9      ;REPEAT?
                                                    ;
d80d : bed40b                   ldx     FCBSTR      ;GET FCB PNTR
d810 : ec8820                   ldd     FRN,x       ;GET LRN
d813 : ed8842                   std     FSB+2,x     ;SAVE IN DATA
d816 : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
d818 : 39                       rts
                        
                        * OPN - SIR, DIR
                        *
                        * OPNIR OPENS EITHER THE SYSTEM IR
                        * OR THE DIRECTORY IR, DEPENDING ON
                        * THE ENTRY POINT.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  B & X DESTROYED
                        
d819 : 5f               OPNSIR  clrb                ;SET TRACK 0
d81a : 3404                     pshs    b
d81c : c603                     ldb     #ISEC       ;GET SECTOR
d81e : 200e                     bra     OPNIR
                        
                        * ------- No Path to this code
                        
d820 : bed415           OPNCUD  ldx     CUD         ;GET CUD
d823 : bfd413                   stx     CLD         ;SAVE AS LOOKUP
                                                    ;
                        * -------                   ;
                                                    ;
d826 : f6d413           OPNCLD  ldb     CLD         ;GET TRACK
d829 : 3404                     pshs    b           ;SAVE IT
d82b : f6d414                   ldb     CLD+1       ;GET SECTOR
                                                    ;
d826 =                  OPNDIR  equ     OPNCLD      ;
                                                    ;
d82e : bed40b           OPNIR   ldx     FCBSTR      ;SET FCB POINTER
d831 : e78841                   stb     FSB+1,x     ;SAVE SECTOR
d834 : 3504                     puls    b           ;GET TRACK
d836 : e78840                   stb     FSB,x       ;SET SECTOR PNTR
d839 : 7fd418                   clr     BKLN        ;CLEAR BACK LINK
d83c : 5f                       clrb                ;GET SECTOR LENGTH \\\\
d83d : e78822                   stb     FDI,x       ;SAVE IT
d840 : 39                       rts
                        
                        * GETIR
                        *
                        * GETIR GETS THE NEXT INFORMATION
                        * RECORD (IR) FROM THE FSB.
                        *
                        *   ENTRY: X = FCB
                        *   EXIT:  CS IF ERROR
                        
d841 : bed40b           GETIR   ldx     FCBSTR      ;SET FCB POINTER
d844 : e68822                   ldb     FDI,x       ;GET DATA INDEX
d847 : 261e                     bne     GETIR2      ;NEXT SECTOR?
                                                    ;
d849 : bdd615                   jsr     RDNEXT      ;GET NEXT SECTOR
AS09 Assembler for M6809 [1.42].                                     Page   51
--------------------------------- FLEX9.asm ----------------------------------

d84c : 2531                     bcs     GETIR8      ;ERROR?
                                                    ;
d84e : bed40b                   ldx     FCBSTR      ;GET FCB POINTER
d851 : 7dd418                   tst     BKLN        ;TEST BACK LINK
d854 : 2606                     bne     GETIR1      ;IS IT SET?
                                                    ;
d856 : cc0005                   ldd     #$0005 		;< OLD Code
                        *       ldd     FSB+4,x    	;GET NEW BL  <- CORRECTED
d859 : fdd418                   std     BKLN        ;SAVE IT
                                                    ;
d85c : 8610             GETIR1  lda     #IRS        ;SET START INDEX
d85e : a78822                   sta     FDI,x       ;
d861 : ec881e                   ldd     FCS,x       ;GET CURRENT SEC ADR
d864 : ed882f                   std     FCD,x       ;SET CURRENT IR
                                                    ;
d867 : a68822           GETIR2  lda     FDI,x       ;GET CURRENT INDEX
d86a : a78831                   sta     FCD+2,x     ;SAVE IT
d86d : c618                     ldb     #IRL        ;SET LENGTH
                                                    ;
d86f : 3414             GETIR4  pshs    b,x         ;SAVE VALUES
d871 : bdd5fe                   jsr     RDSEQ       ;READ NEXT CHAR
d874 : 3514                     puls    b,x         ;RESTORE VALUES
d876 : a704                     sta     FFN,x       ;PUT THE CHAR
d878 : 3001                     leax    1,x         ;BUMP THE POINTER
d87a : 5a                       decb                ;DEC THE COUNT
d87b : 26f2                     bne     GETIR4      ;FINISHED?
                        *       clrb                ;CLEAR ERRORS
d87d : 1cfe                     andcc   #$FE        ;CLC CLEAR ERROR
d87f : 39               GETIR8  rts
                        
                        * PUTIR
                        *
                        * PUTIR PUTS THE IR INTO THE FSB.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        
d880 : bed40b           PUTIR   ldx     FCBSTR      ;SET FCB POINTER
d883 : a68831                   lda     FCD+2,x     ;GET INDEX
d886 : a78822                   sta     FDI,x       ;SET IT
d889 : c618                     ldb     #IRL        ;SET LENGTH COUNT
                                                    ;
d88b : 3414             PUTIR2  pshs    b,x         ;SAVE POINTERS
d88d : a604                     lda     FFN,x       ;GET THE CHAR
d88f : bdd71d                   jsr     WTSEQ       ;GO WRITE CHAR
d892 : 3514                     puls    b,x         ;RESTORE POINTERS
d894 : 3001                     leax    1,x         ;BUMP THE POINTER
d896 : 5a                       decb                ;DEC THE COUNT
d897 : 26f2                     bne     PUTIR2      ;REPEAT?
                                                    ;
d899 : 7ed6a8                   jmp     WRITSS      ;GO WRITE SECTOR
                        
                        * FNDNAM
                        *
                        * FNDNAM TRIES TO FIND THE NAME IN
                        * FFN IN THE DIRECTORY.
                        *
                        *   ENTRY: NAME IN FFN
                        *   EXIT:  EQ IF FOUND
                        *          CS IF ERROR ( IN B )
                        *          REGISTERS CHANGED
                        
AS09 Assembler for M6809 [1.42].                                     Page   52
--------------------------------- FLEX9.asm ----------------------------------

d89c : bed40b           FNDNAM  ldx     FCBSTR      ;GET FCB
d89f : a603                     lda     FDN,x       ;GET DRIVE NUM
d8a1 : a78823                   sta     FRI,x       ;SAVE IT IN TEMP
d8a4 : b6d417                   lda     DIRDN       ;GET DIR DRIVE NUM
d8a7 : 7dd41a                   tst     SINDIR      ;SINGLE DIR ?
d8aa : 2631                     bne     FNDNA1      ;
                                                    ;
d8ac : a703                     sta     FDN,x       ;SET NEW DRIVE NUM
d8ae : bed415                   ldx     CUD         ;GET DIR POINTER
d8b1 : bfd413                   stx     CLD         ;SET CLD
                                                    ;
d8b4 : 8c0005           FNDN04  cmpx    #MAIND      ;IS IT MAIN?
d8b7 : 270c                     beq     FNDN06      ;
d8b9 : 8d22                     bsr     FNDNA1      ;SEARCH DIR
d8bb : 2337                     bls     FNDNA3      ;FIND OR ERROR?
d8bd : bed418                   ldx     BKLN        ;GET BACK LINK
d8c0 : bfd413                   stx     CLD         ;SET CLD
d8c3 : 20ef                     bra     FNDN04      ;REPEAT
                                                    ;
d8c5 : bed40b           FNDN06  ldx     FCBSTR      ;SET POINTER
d8c8 : a68823                   lda     FRI,x       ;RESTORE DN
d8cb : a703                     sta     FDN,x       ;
d8cd : 2a0e                     bpl     FNDNA1      ;DRIVE SPECIFIC?
                                                    ;
d8cf : bdddd6           FNDN08  jsr     NXTRDY      ;GET NEXT RDY DRV
d8d2 : 2536                     bcs     FNDNA9      ;ERROR?
d8d4 : 8d07                     bsr     FNDNA1      ;DO SEARCH
d8d6 : 231c                     bls     FNDNA3      ;FIND OR ERROR?
d8d8 : bdddc6                   jsr     RSTNAM      ;RESTORE NAME
d8db : 20f2                     bra     FNDN08      ;
                                                    ;
d8dd : bed40b           FNDNA1  ldx     FCBSTR      ;SET POINTER
d8e0 : 7fd41a                   clr     SINDIR      ;CLEAR MODE
d8e3 : bdd54e                   jsr     COPNAM      ;COPY NAME TO FWB
d8e6 : bdd826                   jsr     OPNDIR      ;OPEN DIRECTORY
                                                    ;
d8e9 : bdd841           FNDNA2  jsr     GETIR       ;GET RECORD
d8ec : 2407                     bcc     FNDNA4      ;ERROR?
d8ee : c108                     cmpb    #EFER       ;END OF FILE?
d8f0 : 2718                     beq     FNDNA9      ;
d8f2 : 1a01                     orcc    #1          ;SEC SET ERROR
d8f4 : 39               FNDNA3  rts                 ;ERROR RETURN
                                                    ;
d8f5 : bed40b           FNDNA4  ldx     FCBSTR      ;POINT TO FCB
d8f8 : a604                     lda     FFN,x       ;GET CHAR
d8fa : 270c                     beq     FNDNA8      ;NO MORE?
d8fc : 2a02                     bpl     FNDNA6      ;DELETED NAME?
d8fe : 8d0f                     bsr     SETFD       ;SET DELETED
                                                    ;
d900 : bdd55e           FNDNA6  jsr     CMPNAM      ;COMPARE NAME
d903 : 26e4                     bne     FNDNA2      ;EQUAL?
d905 : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
d907 : 39                       rts                 ;
                                                    ;
d908 : 8d05             FNDNA8  bsr     SETFD       ;
d90a : 1cfb             FNDNA9  andcc   #$FB        ;SHOW NO FIND
d90c : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
d90e : 39                       rts                 ;
                                                    ;
d90f : a68833           SETFD   lda     FFD+1,x     ;FIRST DELETED?
d912 : 260c                     bne     SETFD2      ;
d914 : ec882f                   ldd     FCD,x       ;GET CURRENT ADR
AS09 Assembler for M6809 [1.42].                                     Page   53
--------------------------------- FLEX9.asm ----------------------------------

d917 : ed8832                   std     FFD,x       ;SET FIRST DELETED
d91a : a68831                   lda     FCD+2,x     ;GET INDEX
d91d : a78834                   sta     FFD+2,x     ;SAVE IT
d920 : 39               SETFD2  rts
                        
                        * GETAVL
                        *
                        * GETAVL SETS THE SECTOR MAP POINTERS
                        * IF THEY HAVE NOT BEEN SET.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS SET IF ERROR
                        *          REGISTERS CHANGED
                        
d921 : bdd790           GETAVL  jsr     FSECMP      ;FIND MAP
d924 : 2617                     bne     GETAV3      ;SET YET?
d926 : 8d18                     bsr     GETDIS      ;READ IN DIS
d928 : 2515                     bcs     GETAV4      ;ERROR?
                                                    ;
d92a : c606                     ldb     #6          ;SET COUNTER
d92c : 10bed40b                 ldy     FCBSTR      ;GET FCB
d930 : bed41b                   ldx     AVLPNT      ;POINT TO MAP
                        
d933 : a6a85d           GETAV2  lda     FSB+FSA+IRS-4,y
d936 : 3121                     leay    1,y
d938 : a780                     sta     ,x+
d93a : 5a                       decb                ;DEC THE COUNT
d93b : 26f6                     bne     GETAV2      ;FINISHED?
                        
d93d : 1cfe             GETAV3  andcc   #$FE        ;CLC CLEAR ERRORS
d93f : 39               GETAV4  rts
                        
                        * GETDIS
                        *
                        * GETDIS READS IN THE DIS SECTOR.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        *          REGISTERS CHANGED
                        
d940 : bdd819           GETDIS  jsr     OPNSIR      ;OPEN THE DIS
d943 : bdd615                   jsr     RDNEXT      ;READ NEXT BLOCK
d946 : 2508                     bcs     GETDI2      ;ERROR?
                                                    ;
d948 : bed40b                   ldx     FCBSTR      ;SET POINTER
d94b : c610                     ldb     #IRS        ;SET START POINT
d94d : e78822                   stb     FDI,x       ;SET INDEX
d950 : 39               GETDI2  rts
                        
                        * PUTAVL
                        *
                        * PUTAVL UPDATES THE DIS SECTOR.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        *          REGISTERS CHANGED
                        
d951 : bdd790           PUTAVL  jsr     FSECMP      ;FIND SECTOR MAP
d954 : 8dea                     bsr     GETDIS      ;GO GET DIS
d956 : 25f8                     bcs     GETDI2      ;ERROR?
d958 : c606                     ldb     #6          ;SET UP COUNTER
d95a : 10bed40b                 ldy     FCBSTR      ;GET FCB POINTER
AS09 Assembler for M6809 [1.42].                                     Page   54
--------------------------------- FLEX9.asm ----------------------------------

d95e : bed41b                   ldx     AVLPNT      ;POINT TO MAP
                        
d961 : a680             PUTAV2  lda     ,x+
d963 : a7a85d                   sta     FSB+FSA+IRS-4,y
d966 : 3121                     leay    1,y
d968 : 5a                       decb                ;DEC THE COUNT
d969 : 26f6                     bne     PUTAV2      ;FINISHED?
                                                    ;
d96b : bdd6a8                   jsr     WRITSS      ;WRITE SECTOR
d96e : 24e0                     bcc     GETDI2      ;ERROR?
d970 : 7edbd9                   jmp     WRTERR      ;REPORT ERROR
                        
                        * WRTDIR
                        *
                        * WRTDIR UPDATES THE DISK DIRECTORY.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        
d973 : bed40b           WRTDIR  ldx     FCBSTR      ;POINT TO FCB
d976 : 8602                     lda     #2          ;SET FOR WRITE
d978 : a702                     sta     FAS,x       ;
d97a : ec882f                   ldd     FCD,x       ;GET CURRENT DIR
d97d : ed881e                   std     FCS,x       ;SET CURRENT SECTOR
d980 : bdd64a                   jsr     READSS      ;READ IN DIR
d983 : 2508                     bcs     WRTDI2      ;ERROR?
d985 : bdd880                   jsr     PUTIR       ;GO WRITE DIR
d988 : 2405                     bcc     WRTDI4      ;
d98a : 7edbd9                   jmp     WRTERR      ;CHECK FOR WP ERR
                                                    ;
d98d : c60a             WRTDI2  ldb     #WTER       ;SET ERROR
d98f : 39               WRTDI4  rts                 ;ERROR RETURN
                        
                        * OPNRD
                        *
                        * OPNRD IS THE HIGH LEVEL SYSTEM
                        * ROUTINE WHICH OPENS A FILE FOR
                        * A READ OPERATION.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR (IN B)
                        *          REGISTERS CHANGED
                        
d990 : bdd4fe           OPNRD   jsr     SETFCB      ;SET FCB POINTER
d993 : 253d                     bcs     OPNRD2      ;ERROR?
d995 : bdd89c                   jsr     FNDNAM      ;LOOK UP NAME
d998 : 2538                     bcs     OPNRD2      ;ERRORS?
                                                    ;
d99a : 263b                     bne     LD9D6       ;WAS IT FOUND?
                                                    ;
d99c : bed40b                   ldx     FCBSTR      ;POINT TO FCB
d99f : 7dd41a                   tst     SINDIR      ;SINGLE DIR?
d9a2 : 2706                     beq     OPNRD1      ;
d9a4 : a60f                     lda     FID,x       ;CHECK RP BIT
d9a6 : 8520                     bita    #$20        ;IS IT SET?
d9a8 : 2629                     bne     OPNRD3      ;REPORT ERROR
                                                    ;
d9aa : bddcd9           OPNRD1  jsr     SETMAX      ;SET MAX SEC
d9ad : 252a                     bcs     OPNERR      ;ERROR?
d9af : ec8811                   ldd     FSA,x       ;GET ADDRESS
d9b2 : ed8840                   std     FSB,x       ;SET FRWD LINK
d9b5 : bdda8e                   jsr     SETST       ;SET STATUS
AS09 Assembler for M6809 [1.42].                                     Page   55
--------------------------------- FLEX9.asm ----------------------------------

d9b8 : e68817                   ldb     FMP,x       ;CHECK RANDOM
d9bb : 2713                     beq     OPNR15      ;
                                                    ;
d9bd : 3404             OPNR12  pshs    b           ;SAVE COUNT
d9bf : bdd615                   jsr     RDNEXT      ;GET NEXT SECTOR
d9c2 : 3504                     puls    b           ;RESTORE COUNT
d9c4 : 250c                     bcs     OPNRD2      ;ERROR?
                                                    ;
d9c6 : 5a                       decb                ;DEC THE COUNT
d9c7 : 26f4                     bne     OPNR12      ;
                                                    ;
d9c9 : bed40b                   ldx     FCBSTR      ;SET FCB PNTR
d9cc : 5f                       clrb                ;GET SECTOR LENGTH \\\\
d9cd : e78822                   stb     FDI,x       ;
                                                    ;
d9d0 : 1cfe             OPNR15  andcc   #$FE        ;CLC CLEAR ERRORS
d9d2 : 39               OPNRD2  rts                 ;
                                                    ;
d9d3 : c611             OPNRD3  ldb     #ADER       ;READ ACC DENIED
d9d5 : 2002                     bra     OPNERR      ;
                                                    ;
d9d7 : c604             LD9D6   ldb     #NFER       ;FILE NOT FOUND
                        
                        * OPEN ERROR
                        
d9d9 : 3404             OPNERR  pshs    b           ;SAVE ERROR
d9db : bdd510                   jsr     REMFCB      ;REMOVE FCB
d9de : 3504                     puls    b           ;
d9e0 : 1a01                     orcc    #1          ;SEC  SET ERROR
d9e2 : 39                       rts
                        
                        * OPNWT
                        *
                        * OPNWT OPENS A FILE FOR WRITE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR (IN B)
                        *          REGISTERS CHANGED
                        
d9e3 : bed40b           OPNWT   ldx     FCBSTR      ;SET POINTER
d9e6 : 6d03                     tst     FDN,x       ;CHECK FOR ALL DRIVES
d9e8 : 2a08                     bpl     OPNWT3      ;
d9ea : bdddd6                   jsr     NXTRDY      ;FIND READY
d9ed : 2403                     bcc     OPNWT3      ;FOUND ONE
d9ef : c610                     ldb     #NRER       ;NONE READY
d9f1 : 39                       rts                 ;
                                                    ;
d9f2 : bdd4fe           OPNWT3  jsr     SETFCB      ;SET FCB LINK
d9f5 : 25e2                     bcs     OPNERR      ;ERROR?
d9f7 : bdd53c                   jsr     CLRFCB      ;CLEAR OUT FCB
d9fa : bdd921                   jsr     GETAVL      ;SETUP SECTOR MAP
d9fd : 25da                     bcs     OPNERR      ;ERROR?
d9ff : bdd89c                   jsr     FNDNAM      ;GO LOOK FOR NAME
da02 : 25d5                     bcs     OPNERR      ;ERROR?
da04 : 2604                     bne     OPNWT4      ;FIND?
da06 : c603                     ldb     #FEER       ;FOUND - ERROR
da08 : 20cf                     bra     OPNERR      ;
                                                    ;
da0a : bddcd9           OPNWT4  jsr     SETMAX      ;SET MAX SEC
da0d : 25ca                     bcs     OPNERR      ;ERROR?
da0f : bed40b                   ldx     FCBSTR      ;POINT TO FCB
da12 : c60a                     ldb     #10         ;SET COUNT
AS09 Assembler for M6809 [1.42].                                     Page   56
--------------------------------- FLEX9.asm ----------------------------------

da14 : 6f0f             OPNWT5  clr     FID,x       ;CLEAR BLOCK
da16 : 3001                     leax    1,x         ;
da18 : 5a                       decb                ;DEC THE COUNT
da19 : 26f9                     bne     OPNWT5      ;
                                                    ;
da1b : bed40b                   ldx     FCBSTR      ;
da1e : ec8832                   ldd     FFD,x       ;GET FIRST DELETED
da21 : 2734                     beq     OPNWT8      ;EOF ER?
da23 : ed882f                   std     FCD,x       ;SET CURRENT DIR
da26 : a68834                   lda     FFD+2,x     ;GET INDEX
da29 : a78831                   sta     FCD+2,x     ;SAVE IT
da2c : fccc0e                   ldd     DATE        ;GET DATE
da2f : ed8819                   std     FDT,x       ;SET DATE
da32 : b6cc10                   lda     DATE+2
da35 : a7881b                   sta     FDT+2,x
                        
                        *       -- not in UniFLEX version
                        
da38 : a603                     lda     FDN,x       ;GET DRIVE
da3a : 8ed436                   ldx     #DRVINFO    ;GET TABLE POINTER
da3d : a686                     lda     a,x         ;GET DRIVE INFO
da3f : bed40b                   ldx     FCBSTR      ;POINT TO FCB
da42 : a78818                   sta     24,x        ;
                                                    ;
                        *       --                  ;
                                                    ;
da45 : bdddc6                   jsr     RSTNAM      ;RESTORE NAME
da48 : bdd973                   jsr     WRTDIR      ;SET DIRECTORY
da4b : 258c                     bcs     OPNERR      ;ERROR?
da4d : 8d3f                     bsr     SETST       ;SET STATUS
da4f : 8604                     lda     #RS         ;SET DATA POINTER
da51 : a78822                   sta     FDI,x       ;
da54 : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
da56 : 39                       rts                 ;
                                                    ;
da57 : bed40b           OPNWT8  ldx     FCBSTR      ;POINT TO FCB
da5a : 6f8817                   clr     FMP,x       ;CLEAR FLAG
da5d : 6c8812                   inc     FSA+1,x     ;SET FSA NON 0
da60 : ec882f                   ldd     FCD,x       ;GET POSITION
da63 : bdd629                   jsr     RDNEX2      ;READ SECTOR
da66 : 250d                     bcs     OPNW85      ;ERROR?
                                                    ;
da68 : bdd77b                   jsr     WTNEX1      ;GO WRITE NEW
da6b : 2508                     bcs     OPNW85      ;ERROR?
                                                    ;
da6d : bdd6a8                   jsr     WRITSS      ;WRITE NEW SECTOR
da70 : 2406                     bcc     OPNWT9      ;ERROR?
da72 : bddbd9                   jsr     WRTERR      ;REPORT ERROR
                                                    ;
da75 : 7ed9d9           OPNW85  jmp     OPNERR      ;
                                                    ;
da78 : bed40b           OPNWT9  ldx     FCBSTR      ;SET POINTER
da7b : ec881e                   ldd     FCS,x       ;GET CURRENT
da7e : ed8832                   std     FFD,x       ;SET FIRST DELETED
da81 : 8610                     lda     #IRS        ;SET INDEX
da83 : a78834                   sta     FFD+2,x     ;
da86 : bdd951                   jsr     PUTAVL      ;UPDATE AVLS
da89 : 25ea                     bcs     OPNW85      ;
da8b : 7eda0a                   jmp     OPNWT4      ;FINISH UP
                        
                        * SETST
                        *
AS09 Assembler for M6809 [1.42].                                     Page   57
--------------------------------- FLEX9.asm ----------------------------------

                        * SETST SETS THE FCB STATUS AFTER
                        * AN OPEN FILE COMMAND.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  A & X CHANGED
                        
da8e : bed40b           SETST   ldx     FCBSTR      ;POINT TO FCB
da91 : a600                     lda     FFC,x       ;GET FUNCTION CODE
da93 : a702                     sta     FAS,x       ;SET ACTIVITY STATUS
da95 : 6f00                     clr     FFC,x       ;CLEAR FUNCTION CODE
da97 : 6f883b                   clr     FSC,x       ;CLEAR SPC COMP
da9a : 4f                       clra                ;GET SECTOR LENGTH \\\\
da9b : a78822                   sta     FDI,x       ;SET INDEX
da9e : 39                       rts
                        
                        * NEXTS
                        *
                        * NEXTS IS THE SYSTEM ROUTINE TO
                        * ADVANCE TO THE NEXT SECTOR.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  ALL CHANGED
                        
da9f : 8d28             NEXTS   bsr     DOSTAT      ;CHECK STATUS
daa1 : 250e                     bcs     NEXTS4      ;ERROR?
daa3 : 6f84                     clr     ,x         ;
daa5 : 44                       lsra                ;READING?
daa6 : 1025fb6b                 lbcs    RDNEXT      ;READ NEXT
                                                    ;
daaa : c604                     ldb     #RS         ;SET START
daac : e78822                   stb     FDI,x       ;SET INDEX
daaf : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
dab1 : 39               NEXTS4  rts
                        
                        * CHKWT
                        *
                        * CHECK FOR WRITE SECTOR NECESSITY
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        
dab2 : bed40b           CHKWT   ldx     FCBSTR      ;GET FCB POINTER
dab5 : a602                     lda     FAS,x       ;GET STATUS
dab7 : 8183                     cmpa    #$83        ;NEED WRITING?
dab9 : 260b                     bne     CHKWT4      ;
                                                    ;
dabb : 8603                     lda     #3          ;RESET STATUS
dabd : a702                     sta     FAS,x       ;
                                                    ;
dabf : bdd6a8           CHKWT2  jsr     WRITSS      ;WRITE SECTOR
dac2 : 10250113                 lbcs    WRTERR      ;REPORT ERROR
                                                    ;
dac6 : 1cfe             CHKWT4  andcc   #$FE        ;CLC CLEAR ERRORS
dac8 : 39                       rts
                        
                        * DOSTAT
                        *
                        * DOSTAT DOES FILE STATUS CHECKING
                        *
                        *   ENTRY: NONE
                        *   EXIT:  ALL CHANGED
                        *          CS IF ERROR
AS09 Assembler for M6809 [1.42].                                     Page   58
--------------------------------- FLEX9.asm ----------------------------------

                        
dac9 : 8de7             DOSTAT  bsr     CHKWT       ;CHECK FOR WRITE
dacb : 250d                     bcs     DOSTA4      ;ERRORS?
                                                    ;
dacd : bed40b                   ldx     FCBSTR      ;SET POINTER
dad0 : a602                     lda     FAS,x       ;GET STATUS
dad2 : 8103                     cmpa    #3          ;IS IT RW?
dad4 : 23f0                     bls     CHKWT4      ;ERROR?
                                                    ;
dad6 : c612                     ldb     #STER       ;SET ERROR
dad8 : 1a01                     orcc    #1          ;SEC
dada : 39               DOSTA4  rts                 ;ERROR RETURN
                        
                        * CLOSE
                        *
                        * CLOSE A DISK FILE
                        *
                        *   ENTRY: NONE
                        *   EXIT:  ALL CHANGED
                        
dadb : 8dec             CLOSE   bsr     DOSTAT      ;CHECK STATUS
dadd : 2531                     bcs     CLOSE4      ;ERROR?
dadf : 8102                     cmpa    #2          ;IS IT WRITE?
dae1 : 2708                     beq     CLOSE2      ;
                                                    ;
dae3 : bed40b           CLOSE1  ldx     FCBSTR      ;GET FCB
dae6 : 6f02                     clr     FAS,x       ;CLEAR STATUS
dae8 : 7ed510                   jmp     REMFCB      ;REMOVE FCB
                                                    ;
daeb : a68812           CLOSE2  lda     FSA+1,x     ;CHECK IF EMPTY
daee : 2605                     bne     CLOSE3      ;EMPTY?
daf0 : bddbbf                   jsr     DELNAM      ;DELETE NAME
daf3 : 2019                     bra     CLOS35      ;
                                                    ;
daf5 : 8dc8             CLOSE3  bsr     CHKWT2      ;WRITE SECTOR
daf7 : 2517                     bcs     CLOSE4      ;ERROR?
daf9 : bed40b                   ldx     FCBSTR      ;GET POINTER
dafc : 6d8817                   tst     FMP,x       ;RANDOM?
daff : 2705                     beq     CLOS32      ;
                                                    ;
db01 : bddcb0                   jsr     WTFSM       ;WRITE FSM
db04 : 250a                     bcs     CLOSE4      ;ERROR?
                                                    ;
db06 : bdd973           CLOS32  jsr     WRTDIR      ;WRITE DIRECTORY
db09 : 2505                     bcs     CLOSE4      ;ERROR?
                                                    ;
db0b : bdd951                   jsr     PUTAVL      ;SET AVL MAP
                                                    ;
db0e : 24d3             CLOS35  bcc     CLOSE1      ;ERRORS?
db10 : 39               CLOSE4  rts                 ;ERROR RETURN
                        
                        * OPNRW
                        *
                        * OPNRW OPENS A FILE FOR UPDATE
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        
db11 : bdd990           OPNRW   jsr     OPNRD       ;OPEN AS READ
db14 : 2528                     bcs     WTAPP4      ;ERROR?
db16 : bdd615                   jsr     RDNEXT      ;READ FIRST SEC
db19 : 2523                     bcs     WTAPP4      ;ERRORS?
AS09 Assembler for M6809 [1.42].                                     Page   59
--------------------------------- FLEX9.asm ----------------------------------

                        
db1b : 8603                     lda     #3          ;SET RW STATUS
db1d : 2018                     bra     WTAPP2      ;FINISH UP
                        
                        * WTAPP
                        *
                        * WTAPP IS THE SYSTEM OPEN FILE
                        * FOR WRITE APPEND. THE FILE MUST
                        * EXIST AND NEW DATA IS WRITTEN ON
                        * THE END OF THE FILE.
                        *
                        *   ENTRY: NONE
                        *   EXIT:  CS IF ERROR
                        
db1f : bdd990           WTAPP   jsr     OPNRD       ;OPEN AS READ
db22 : 251a                     bcs     WTAPP4      ;ERRORS?
                                                    ;
db24 : bed40b                   ldx     FCBSTR      ;GET FCB POINTER
db27 : a60f                     lda     FID,x       ;GET ATT BYTE
db29 : 8580                     bita    #$80        ;CHECK WP BIT
db2b : 2612                     bne     WTAPP6      ;
                                                    ;
db2d : ec8813                   ldd     FEA,x       ;GET END ADDRESS
db30 : bdd629                   jsr     RDNEX2      ;READ IN LAST
db33 : 2509                     bcs     WTAPP4      ;ERRORS?
                                                    ;
db35 : 8602                     lda     #2          ;SET WRITE STATUS
                                                    ;
db37 : bed40b           WTAPP2  ldx     FCBSTR      ;SET POINTER
db3a : a702                     sta     FAS,x       ;SET STATUS
db3c : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
db3e : 39               WTAPP4  rts                 ;
                                                    ;
db3f : c60b             WTAPP6  ldb     #WPER       ;SET ERROR
db41 : 1a01                     orcc    #1          ;SEC
db43 : 39                       rts
                        
                        * RENAME
                        *
                        * RENAME IS THE SYSTEM FILE RENAME
                        * ROUTINE.  THE NEW NAME MUST BE IN
                        * FCB+FLR.
                        *
                        *   ENTRY: SEE ABOVE
                        *   EXIT:  CS IF ERROR
                        
db44 : 8d35             RENAME  bsr     SWAP        ;SWAP NAMES
db46 : bdd89c                   jsr     FNDNAM      ;GO LOOK FOR IT
db49 : 252a                     bcs     RENAM5      ;ERROR?
db4b : 2724                     beq     RENAM4      ;ALREADY EXISTS?
                                                    ;
db4d : bed40b                   ldx     FCBSTR      ;
db50 : c60b                     ldb     #NL         ;SET COUNTER
                                                    ;
db52 : a68824           RENAM1  lda     FWB,x       ;GET CHAR
db55 : a704                     sta     FFN,x       ;MOVE BACK
db57 : 3001                     leax    1,x         ;BUMP THE POINTER
db59 : 5a                       decb                ;DEC THE COUNT
db5a : 26f6                     bne     RENAM1      ;
db5c : 8d4d                     bsr     SWPNM       ;SWAP AND FIND
db5e : 2515                     bcs     RENAM5      ;ERROR?
db60 : bed40b                   ldx     FCBSTR      ;GET POINTER
AS09 Assembler for M6809 [1.42].                                     Page   60
--------------------------------- FLEX9.asm ----------------------------------

db63 : a60f                     lda     FID,x       ;GET ATT BYTE
db65 : 8580                     bita    #$80        ;
db67 : 26d6                     bne     WTAPP6      ;
db69 : 8560                     bita    #$60        ;CHECK DP BIT
db6b : 2609                     bne     RENAM6      ;
db6d : 8d0c                     bsr     SWAP        ;SWAP NAMES
db6f : 2055                     bra     DELNA2      ;WRITE DIRECTORY
                                                    ;
db71 : c603             RENAM4  ldb     #FEER       ;SET ERROR
db73 : 1a01                     orcc    #1          ;SEC SHOW ERROR
db75 : 39               RENAM5  rts                 ;
                                                    ;
db76 : c60c             RENAM6  ldb     #DPER       ;SET ERROR
db78 : 1a01                     orcc    #1          ;SEC SHOW ERROR
db7a : 39                       rts
                        
                        * SWAP
                        *
                        * SWAP THE NAME IN FLR WITH FFN.
                        * IF FLR HAS NULL EXT SET AS FFN.
                        
db7b : bed40b           SWAP    ldx     FCBSTR      ;SET FCB POINTER
db7e : 860b                     lda     #NL         ;SET COUNT
db80 : b7d411                   sta     ETRIES      ;SAVE IT
                                                    ;
db83 : a604             SWAP2   lda     FFN,x       ;GET CHARACTER
db85 : e68835                   ldb     FLR,x       ;GET OTHER
db88 : a78835                   sta     FLR,x       ;SWAP THEM
db8b : e704                     stb     FFN,x       ;
db8d : 3001                     leax    1,x         ;BUMP TO NEXT
db8f : 7ad411                   dec     ETRIES      ;DEC THE COUNT
db92 : 26ef                     bne     SWAP2       ;AGAIN?
                                                    ;
db94 : bed40b                   ldx     FCBSTR      ;RESTORE POINTER
db97 : a60c                     lda     FNE,x       ;GET IST CHAR
db99 : 260c                     bne     SWAP6       ;IS IT NULL?
db9b : c603                     ldb     #3          ;SET COUNT
db9d : a6883d           SWAP4   lda     FLR+8,x     ;GET CHAR
dba0 : a70c                     sta     FNE,x       ;SAVE IT
dba2 : 3001                     leax    1,x         ;BUMP TO NEXT
dba4 : 5a                       decb                ;DEC THE COUNT
dba5 : 26f6                     bne     SWAP4       ;
dba7 : bed40b           SWAP6   ldx     FCBSTR      ;RESTORE POINTER
dbaa : 39                       rts
                        
                        * SWPNM
                        *
                        * SWAP NAMES AND DO FNDNAM
                        
dbab : 8dce             SWPNM   bsr     SWAP        ;GO DO SWAP
dbad : bdd89c           SWPNM2  jsr     FNDNAM      ;FIND NAME
dbb0 : 2507                     bcs     SWPNM4      ;ERROR?
dbb2 : 2606                     bne     SWPNM5      ;NO FIND?
                                                    ;
dbb4 : bed40b                   ldx     FCBSTR      ;RESTORE POINTER
dbb7 : 1cfe                     andcc   #$FE        ;CLC CLEAR ERRORS
dbb9 : 39               SWPNM4  rts                 ;
                                                    ;
dbba : c604             SWPNM5  ldb     #NFER       ;SET ERROR
dbbc : 1a01                     orcc    #1          ;SEC
dbbe : 39                       rts
                        
AS09 Assembler for M6809 [1.42].                                     Page   61
--------------------------------- FLEX9.asm ----------------------------------

                        * DELNAM
                        *
                        * DELETE FILE NAME IN DIR
                        
dbbf : bed40b           DELNAM  ldx     FCBSTR      ;POINT TO FCB
dbc2 : 86ff                     lda     #$FF        ;SET NEGATIVE
dbc4 : a704                     sta     FFN,x       ;SET VALUE
                                                    ;
dbc6 : bdd973           DELNA2  jsr     WRTDIR      ;WRITE DIRECTORY
dbc9 : bed40b                   ldx     FCBSTR      ;SET POINTER
dbcc : 8600                     lda     #0          ;CLEAR STATUS
dbce : a702                     sta     FAS,x
dbd0 : 39                       rts
                        
                        * WRITIT
                        *
                        * WRITIT PUTS AND WRITES NEW
                        * FORWARD LINK IN SECTOR.
                        
dbd1 : ed8840           WRITIT  std     FSB,x       ;SET NEW LINK
dbd4 : bdd6a8                   jsr     WRITSS      ;WRITE SECTOR
dbd7 : 2414                     bcc     WRTER4      ;
                                                    ;
dbd9 : c540             WRTERR  bitb    #$40        ;W.P. ?
dbdb : 2608                     bne     WRTER1      ;
dbdd : c580                     bitb    #$80        ;
dbdf : 270a                     beq     WRTER3      ;
dbe1 : c610                     ldb     #NRER       ;SET NOT READY
dbe3 : 2006                     bra     WRTER3      ;
                                                    ;
dbe5 : c60b             WRTER1  ldb     #WPER       ;SET WP ERROR
dbe7 : 2002                     bra     WRTER3      ;
                                                    ;
                        * ---- No path to this code ;
                                                    ;
dbe9 : c60a             WRTER2  ldb     #WTER       ;SET WRITE ERROR
                        
                        * ---- 
                        
dbeb : 1a01             WRTER3  orcc    #1
dbed : 39               WRTER4  rts
                        
                        * DELETE
                        *
                        * DELETE A SYSTEM FILE RETURNING ITS
                        * SECTORS BACK TO THE LIST OF AVAIL.
                        *
                        *   ENTRY: NAME IN FFN
                        *   EXIT:  ALL CHANGED
                        *          CS IF ERROR
                        
dbee : bdd921           DELETE  jsr     GETAVL      ;GET SEC MAP
dbf1 : 255e                     bcs     DELET6      ;ERROR?
dbf3 : 8db8                     bsr     SWPNM2      ;FIND NAME
dbf5 : 255a                     bcs     DELET6      ;ERROR?
                                                    ;
dbf7 : bed40b                   ldx     FCBSTR      ;GET POINTER
dbfa : a60f                     lda     FID,x       ;GET ATT BYTE
dbfc : 8580                     bita    #$80        ;CHECK WP BIT
dbfe : 2652                     bne     DELET7      ;
                                                    ;
dc00 : 8560                     bita    #$60        ;CHECK DP BIT
AS09 Assembler for M6809 [1.42].                                     Page   62
--------------------------------- FLEX9.asm ----------------------------------

dc02 : 2652                     bne     DELET8      ;
                                                    ;
dc04 : bdd790                   jsr     FSECMP      ;FIND SEC MAP
dc07 : bed41b                   ldx     AVLPNT      ;GET MAP POINTER
dc0a : ec02                     ldd     2,x         ;GET LAST AVAIL
dc0c : 260f                     bne     DELET2      ;IS IT NULL?
dc0e : bed40b                   ldx     FCBSTR      ;RESTORE POINTER
dc11 : ec8811                   ldd     FSA,x       ;GET START ADR
dc14 : 2733                     beq     DELET5      ;
dc16 : bed41b                   ldx     AVLPNT      ;POINT TO AVAILS
dc19 : ed84                     std     ,x         ;SET NEW
dc1b : 2014                     bra     DELET4      ;JUMP AHEAD
                                                    ;
dc1d : bed40b           DELET2  ldx     FCBSTR      ;SET POINTER
dc20 : bdd629                   jsr     RDNEX2      ;READ SECTOR
dc23 : 252c                     bcs     DELET6      ;ERRORS?
dc25 : bed40b                   ldx     FCBSTR      ;RESTORE POINTER
dc28 : ec8811                   ldd     FSA,x       ;GET START ADR
dc2b : 271c                     beq     DELET5      ;
dc2d : 8da2                     bsr     WRITIT      ;SET LINK
dc2f : 2520                     bcs     DELET6      ;ERROR?
                                                    ;
dc31 : bed40b           DELET4  ldx     FCBSTR      ;SET FCB PNTR
dc34 : ec8813                   ldd     FEA,x       ;GET END ADR
dc37 : bed41b                   ldx     AVLPNT      ;POINT TO AVAILS
dc3a : ed02                     std     2,x         ;SET NEW LAST
dc3c : bed40b                   ldx     FCBSTR      ;SET POINTER
dc3f : ec8815                   ldd     FSZ,x       ;GET SIZE
dc42 : bed41b                   ldx     AVLPNT      ;POINT TO AVAILS
dc45 : e304                     addd    4,x         ;ADD IN SECTORS
dc47 : ed04                     std     4,x         ;SAVE NEW COUNT
                                                    ;
dc49 : bddbbf           DELET5  jsr     DELNAM      ;DELETE NAME
dc4c : 2503                     bcs     DELET6      ;ERROR?
dc4e : bdd951                   jsr     PUTAVL      ;WRITE AVAIL SEC
dc51 : 39               DELET6  rts                 ;
                                                    ;
dc52 : c60b             DELET7  ldb     #WPER       ;SET ERROR
dc54 : 2002                     bra     DELET9      ;
                                                    ;
dc56 : c60c             DELET8  ldb     #DPER       ;SET ERROR
dc58 : 1a01             DELET9  orcc    #1          ;SEC SHOW ERROR
dc5a : 39                       rts
                        
                        * UPDFSM
                        *
                        * UPDATE FILE SECTOR MAP
                        
dc5b : ec881e           UPDFSM  ldd     FCS,x       ;GET CURRENT SEC
dc5e : 5c                       incb    			;CHECK IF SEQUENTIAL
dc5f : e1883c                   cmpb    FMX,x       ;CHECK MAX
dc62 : 2303                     bls     UPDFS2      ;
dc64 : c601                     ldb     #1          ;SET SECTOR 1
dc66 : 4c                       inca                ;BUMP TRACK
dc67 : 10a38813         UPDFS2  cmpd    FEA,x       ;CHECK END
dc6b : 260e                     bne     UPDFS4      ;
dc6d : a68837                   lda     SBC,x       ;CHECK MAX COUNT
dc70 : 81ff                     cmpa    #$FF        ;IS IT MAX?
dc72 : 2707                     beq     UPDFS4      ;
dc74 : 4c                       inca                ;BUMP COUNT
dc75 : a78837                   sta     SBC,x       ;SAVE IT
dc78 : 1cfe                     andcc	#$fe        ;clc CLEAR ERRORS
AS09 Assembler for M6809 [1.42].                                     Page   63
--------------------------------- FLEX9.asm ----------------------------------

dc7a : 39                       rts                 ;RETURN
                                                    ;
dc7b : 8d33             UPDFS4  bsr     WTFSM       ;WRITE FSM
dc7d : 2530                     bcs     UPDFS9      ;ERROR?
dc7f : bed40b                   ldx     FCBSTR      ;SET POINTER
dc82 : a6883a                   lda     FNK+2,x     ;GET OFFSET
dc85 : 8b03                     adda    #3          ;BUMP TO NEXT ENTRY
dc87 : 2616                     bne     UPDFS8      ;END OF SECTOR?
dc89 : ec881e                   ldd     FCS,x       ;GET CURRENT
dc8c : 10a38811                 cmpd    FSA,x       ;START ADDR?
dc90 : 2705                     beq     UPDFS7      ;
dc92 : c617             UPDFS6  ldb     #FSER       ;SET ERROR
dc94 : 1a01                     orcc    #1			;sec
dc96 : 39                       rts                 ;RETURN
                                                    ;
dc97 : ec8840           UPDFS7  ldd     FSB,x       ;GET LINK
dc9a : ed8838           UPDF75  std     FNK,x       ;SET POINTER
dc9d : 8604                     lda     #4          ;SET INITIAL OFFSET
dc9f : a7883a           UPDFS8  sta     FNK+2,x     ;
dca2 : ec8813                   ldd     FEA,x       ;GET END ADDR
dca5 : ed8835                   std     FLR,x       ;MARK POSITION
dca8 : 8601                     lda     #1          ;SET COUNT
dcaa : a78837                   sta     SBC,x       ;
dcad : 1cfe                     andcc	#$fe        ;clc CLEAR ERRORS
dcaf : 39               UPDFS9  rts                 ;RETURN
                        
                        * WTFSM
                        *
                        * WRITE FILE SECTOR MAP
                        
dcb0 : ec8838           WTFSM   ldd     FNK,x       ;GET RECORD
dcb3 : bdd629                   jsr     RDNEX2      ;READ SECTOR
dcb6 : 25f7                     bcs     UPDFS9      ;ERROR?
dcb8 : bed40b                   ldx     FCBSTR
dcbb : 1f12                     tfr     x,y
dcbd : e6883a                   ldb     FNK+2,x
                        
                        * LEAX    B,x   < original code
                        * Add NOP and ABX
                        
dcc0 : 12                       nop
dcc1 : 3a                       abx                 ;CORRECTED 2/4/80
dcc2 : c603                     ldb     #3
dcc4 : a6a835           WTFSM2  lda     FLR,y
dcc7 : 3121                     leay    1,y
dcc9 : a78840                   sta     FSB,x
dccc : 3001                     leax    1,x
dcce : 5a                       decb                ;DEC THE COUNT
dccf : 26f3                     bne     WTFSM2      ;
dcd1 : bdd6a8                   jsr     WRITSS      ;WRITE SECTOR
dcd4 : 24d9                     bcc     UPDFS9      ;ERROR?
dcd6 : 7edbd9                   jmp     WRTERR      ;SET ERROR
                        
                        * SETMAX
                        *
                        * SET MAX SECTOR NUMBER
                        
dcd9 : bdd819           SETMAX  jsr     OPNSIR      ;GET SECTOR
dcdc : bdd615                   jsr     RDNEXT      ;
dcdf : 2546                     bcs     POSI05      ;ERROR?
dce1 : bed40b                   ldx     FCBSTR      ;SET FCB PNTR
dce4 : 4f                       clra                ;
AS09 Assembler for M6809 [1.42].                                     Page   64
--------------------------------- FLEX9.asm ----------------------------------

dce5 : 5f                       clrb                ;
dce6 : ed8820                   std     FRN,x       ;CLEAR REC NUM
dce9 : a68867                   lda     FSB+39,x    ;GET MAX
dcec : a7883c                   sta     FMX,x       ;SAVE MAX
dcef : 5f                       clrb                ;GET SECTOR LENGTH \\\\
dcf0 : 6f8840           SETMA2  clr     FSB,x       ;CLEAR BYTES
dcf3 : 3001                     leax    1,x         ;
dcf5 : 5a                       decb                ;DEC THE COUNTER
dcf6 : 26f8                     bne     SETMA2      ;
dcf8 : bed40b                   ldx     FCBSTR      ;RESTORE POINTER
dcfb : 1cfe                     andcc	#$fe        ;clc CLEAR ERRORS
dcfd : 39                       rts                 ;RETURN
                        
                        * BKREC
                        *
                        * BACK UP ONE RECORD
                        
dcfe : bed40b           BKREC   ldx     FCBSTR      ;GET FCB
dd01 : a68817                   lda     FMP,x       ;RANDOM?
dd04 : 271d                     beq     POSIT0      ;
dd06 : ec8820                   ldd     FRN,x       ;GET REC NUMBER
dd09 : 830001                   subd    #1          ;DEC BY ONE
dd0c : 2a03                     bpl     BKREC2      ;UNDERFLOW?
dd0e : 7eddb3                   jmp     POSIT8      ;
dd11 : ed8820           BKREC2  std     FRN,x       ;SAVE NEW
                        
                        * POSIT
                        *
                        * POSITION TO FRN RECORD NUMBER
                        
dd14 : bddac9           POSIT   jsr     DOSTAT      ;CHECK STATUS
dd17 : 250e                     bcs     POSI05      ;ERROR?
dd19 : 46                       rora                ;
dd1a : 2407                     bcc     POSIT0      ;ERROR?
dd1c : 6f84                     clr     ,x         ;CLEAR FFC
dd1e : a68817                   lda     FMP,x       ;CHECK RANDOM
dd21 : 2605                     bne     POSIT1      ;ERROR?
                                                    ;
dd23 : c612             POSIT0  ldb     #STER       ;SET ERROR
dd25 : 1a01                     orcc    #1			;sec                 
dd27 : 39               POSI05  rts                 ;RETURN
                                                    ;
dd28 : 7fd411           POSIT1  clr     ETRIES      ;CLEAR COUNT
dd2b : ec8811                   ldd     FSA,x       ;GET START ADDR
dd2e : 10ae8820                 ldy     FRN,x       ;CHECK FOR 0
dd32 : 276a                     beq     POSIT7      ;GO DO ZERO
dd34 : bdddb8           POSIT2  jsr     GETFSM      ;GET FSM
dd37 : 25ee                     bcs     POSI05      ;
dd39 : 4f                       clra                ;CLEAR COUNT
dd3a : 5f                       clrb                ;
dd3b : 6d02             POSIT3  tst     2,x         ;CHECK FOR EOF
dd3d : 2774                     beq     POSIT8      ;
dd3f : eb02                     addb    2,x         ;ADD IN NEW
dd41 : 8900                     adca    #0          ;
dd43 : bfd40f                   stx     DATAPT      ;
dd46 : bed40b                   ldx     FCBSTR      ;
dd49 : 10a38820                 cmpd    FRN,x       ;CHECK NUMBER
dd4d : 242c                     bhs     POSIT6      ;
dd4f : bed40f           POSIT4  ldx     DATAPT      ;RESTORE POINTER
dd52 : 3003                     leax    3,x         ;BUMP TO NEXT
dd54 : 3402                     pshs a              ;SAVE COUNT
dd56 : b6d411                   lda     ETRIES      ;
AS09 Assembler for M6809 [1.42].                                     Page   65
--------------------------------- FLEX9.asm ----------------------------------

dd59 : 4c                       inca                ;BUMP POSITION
dd5a : b7d411                   sta     ETRIES      ;SAVE RESULT
dd5d : 8154                     cmpa    #84         ;LAST RECORD?
dd5f : 2708                     beq     POSIT5      ;
dd61 : 81a8                     cmpa    #168        ;
dd63 : 3502                     puls a              ;RESTORE TOTAL
dd65 : 274c                     beq     POSIT8      ;ERROR?
dd67 : 20d2                     bra     POSIT3      ;REPEAT
dd69 : 3404             POSIT5  pshs b              ;
dd6b : bed40b                   ldx     FCBSTR      ;SET POINTER
dd6e : ec8840                   ldd     FSB,x       ;
dd71 : 8d45                     bsr     GETFSM      ;GET FSM
dd73 : 253e                     bcs     POSIT8      ;ERROR?
dd75 : 3504                     puls b              ;
dd77 : 3502                     puls a              ;RESTORE TOTAL
dd79 : 20c0                     bra     POSIT3      ;REPEAT
dd7b : a38820           POSIT6  subd    FRN,x       ;SUB REC NUM
dd7e : bed40f                   ldx     DATAPT      ;RESTORE POINTER
dd81 : a602                     lda     2,x         ;
dd83 : 3404                     pshs b				; sba
dd85 : a0e0             		suba ,s+            ;
dd87 : 4a                       deca                ;FIX UP COUNT
dd88 : 1f89                     tfr     a,b         ;
dd8a : a684                     lda     ,x         ;GET TRACK
dd8c : eb01                     addb    1,x         ;ADD IN SECTOR
dd8e : bed40b                   ldx     FCBSTR      ;
dd91 : 2505                     bcs     POSI68      ;
dd93 : e1883c           POSI65  cmpb    FMX,x       ;MAX?
dd96 : 2306                     bls     POSIT7      ;
dd98 : e0883c           POSI68  subb    FMX,x       ;FIX IF SO
dd9b : 4c                       inca                ;BUMP TRACK
dd9c : 20f5                     bra     POSI65      ;
dd9e : bdd629           POSIT7  jsr     RDNEX2      ;READ NEXT
dda1 : 2514                     bcs     POSI85      ;ERROR?
dda3 : bed40b                   ldx     FCBSTR      ;
dda6 : ec8842                   ldd     FSB+2,x     ;GET LRN
dda9 : 10a38820                 cmpd    FRN,x       ;COMPARE TO FRN
ddad : 2714                     beq     GETS1       ;
ddaf : c619             POSI75  ldb     #RMER       ;SET ERROR
ddb1 : 2002                     bra     POSI82      ;
ddb3 : c618             POSIT8  ldb     #RRER       ;SET ERROR
ddb5 : 1a01             POSI82  orcc	#01			;sec
ddb7 : 39               POSI85  rts     			;RETURN
                        
                        * GET FSM SECTOR
                        
ddb8 : bdd629           GETFSM  jsr     RDNEX2      ;READ NEXT SEC
ddbb : 2508                     bcs     GETS2       ;ERROR?
ddbd : bed40b                   ldx     FCBSTR      ;SET INDEX
ddc0 : c644                     ldb     #FSB+4      ;SET OFFSET
ddc2 : 3a                       abx                 ;
ddc3 : 1cfe             GETS1   andcc	#$fe        ; clc CLEAR ERRORS
ddc5 : 39               GETS2   rts
                        
                        * RSTNAM
                        *
                        * RESTORE NAME FROM FWB TO FFN.
                        
ddc6 : bed40b           RSTNAM  ldx     FCBSTR      ;SET FCB
ddc9 : c60b                     ldb     #NL         ;SET COUNTER
ddcb : a68824           RSTNA2  lda     FWB,x       ;GET CHARACTER
ddce : a704                     sta     FFN,x       ;PUT IT
AS09 Assembler for M6809 [1.42].                                     Page   66
--------------------------------- FLEX9.asm ----------------------------------

ddd0 : 3001                     leax    1,x           ;BUMP THE POINTER
ddd2 : 5a                       decb                ;DEC THE COUNT
ddd3 : 26f6                     bne     RSTNA2      ;
ddd5 : 39                       rts                 ;RETURN
                        
                        * NXTRDY
                        *
                        * NXTRDY RETURNS THE DRIVE NUMBER IN
                        * FCB+FDN OF THE NEXT READY DRIVE.
                        * CS IF NO MORE READY DRIVES.
                        
ddd6 : bed40b           NXTRDY  ldx     FCBSTR      ;GET FCB
ddd9 : a603                     lda     FDN,x       ;GET DRIVE NUMBER
dddb : 4c                       inca                ;BUMP BY ONE
dddc : 8104                     cmpa    #4          ;PAST RANGE?
ddde : 240f                     bhs     NXTRD6      ;
dde0 : a703                     sta     FDN,x       ;SAVE NEW NUMBER
dde2 : 2605                     bne     NXTRD2      ;DRIVE 0 ?
dde4 : bdde0f                   jsr     DCHECK       ;CHECK IF READY
dde7 : 2003                     bra     NXTRD4      ;
dde9 : bdde12           NXTRD2  jsr     DQUICK      ;QUICK CHECK
ddec : 25e8             NXTRD4  bcs     NXTRDY      ;CHECK NEXT DRIVE
ddee : 39                       rts                 ;RETURN
ddef : c610             NXTRD6  ldb     #NRER       ;SET ERROR
ddf1 : 1a01                     orcc    #1			;sec                 
ddf3 : 39                       rts                 ;RETURN
                        
                                end
                        
                        		include "DRIVERS.asm"
                        ;                NAM     DRIVERS 
                                        page
AS09 Assembler for M6809 [1.42].                                     Page   67
--------------------------------- FLEX9.asm ----------------------------------

                        
                        * ----------------------------------------------------
                        * File Name   : DRIVERS.ASM
                        * Format      : AS09
                        *
                        * Processor:       6809 []
                        * Target assebler: Public domain 6809 assembler v2.01 
                        *
                        *
                        
cc30 =                  SCRATCH3        equ     $CC30
cc33 =                  CPUFLAG         equ     $CC33
cc34 =                  SPLFLG          equ     $CC34           ;spooling acti
                        ;WARMS           equ     $CD03
                        
cc0e =                  MONTH           equ     $CC0E
cc0f =                  DAY             equ     $CC0F
cc10 =                  YEAR            equ     $CC10
                        
d370 =                  HOUR            equ     $D370               
d371 =                  MINUTE          equ     $D371
d372 =                  SECOND          equ     $D372
d373 =                  TICK            equ     $D373
                        
dfc2 =                  SWIVEC          equ     $DFC2
dfc8 =                  IRQVEC          equ     $DFC8
                        
                        ;ACIADD          equ     $DFE0
                        
                        ;ACIAS           equ     $E004
                        ;MPT             equ     $E042
                        ;MPLPIA          equ     $E070
                        
                        ;OUTCHAR           equ    $F9c9 ;$FAEB
                        ;INCHEK          equ     $F808
                        ;INCHE           equ     $F806
                        ;INCHAR            equ    $FACF
ef04 =                  UART1			equ 	$ef04
e808 =                  PTM				equ     $e808
ec00 =                  VIA0			equ		$ec00
                        *
                        * CONSOLE I/O DRIVER VECTOR TABLE
                        *
d3e1 =                                  org     $D3E1       ;* TABLE STARTS AT
                                                            ;
d3e1 : f07a             ADDDEVP         fdb     ADDDEV      ;* add an IRQ hand
d3e3 : f086                             fdb     DELDEV      ;* delete an IRQ h
                                                            ;
d3e5 : f259             INCHNEP         fdb     INCHNE_IMPL      ;* ($E86F) IN
d3e7 : f066             IHNDLRP         fdb     IHNDLR      ;* ($E873) IRQ INT
d3e9 : dfc2             SWIVECP         fdb     SWIVEC      ;* ($DFC2) SWI3 VE
d3eb : dfc8             IRQVECP         fdb     IRQVEC      ;* ($DFC8) IRQ VEC
d3ed : f0aa             TMOFFP          fdb     TMOFF       ;* ($E8D6) TIMER O
d3ef : f0a9             TMONP           fdb     TMON        ;* ($E8D0) TIMER O
d3f1 : f0a2             TMINTP          fdb     TMINT       ;* ($E8B4) TIMER I
d3f3 : f008             MONITR          fdb     MONITOR     ;* ($E844) MONITOR
d3f5 : f015             TINITP          fdb     TINIT       ;* ($E850) TERMINA
d3f7 : f29e             TRMCHK          fdb     CONSTAT_IMPL ;STAT        ;* (
d3f9 : f28c             TIMOUT          fdb     CONOUT_IMPL ;VOUTCH      ;* ($
d3fb : f273             TIMINE          fdb     CONIN_IMPL ;VINCH       ;* ($E
                        
                        *
AS09 Assembler for M6809 [1.42].                                     Page   68
--------------------------------- FLEX9.asm ----------------------------------

                        * DISK DRIVER ROUTINE JUMP TABLE
                        *
de00 =                                  org     $DE00
                        
de00 : 7ef11d           DREAD           jmp     >READ       ;* DE00 7E E955   
de03 : 7ef145           DWRITE          jmp     >WRITE      ;* DE03 7E E9B9   
de06 : 7ef156           DVERFY          jmp     >VERIFY     ;* DE06 7E EA21   
de09 : 7ef173           DRESTOR         jmp     >RESTORE    ;* DE09 7E EAE8   
de0c : 7ef177           DDRIVE          jmp     >DRIVE      ;* DE0C 7E EB00   
de0f : 7ef184           DCHECK          jmp     >CHKRDY     ;* DE0F 7E EB42   
de12 : 7ef184           DQUICK          jmp     >QUICK      ;* DE12 7E EB82   
de15 : 7ef15a           DINIT           jmp     >INITIAL       ;* DE15 7E EAD2
de18 : 7ef168           DWARM           jmp     >WARM       ;* DE18 7E EADD   
de1b : 7ef158           DSEEK           jmp     >SEEKIT     ;* DE1B 7E EA36   
                        
de1e : 00               DRVTBL          fcb     $00
de1f : 00                               fcb     $00
de20 : 00                               fcb     $00
de21 : 00                               fcb     $00
                        
de22 : 00000000                         fcb     $00,$00,$00,$00
de26 : 00000000                         fcb     $00,$00,$00,$00
                        
                        * ----------------------------------------------------
                        
de2a : ec00             PPORT           fdb     VIA0                ;* address
de2c : 0000                             fdb     0                   ;* IRQ han
de2e : 00               IRQBM           fcb     0                   ;* bit mas
                        
                        * ----------------------------------------------------
                        
de2f : 0000             IRQLL           fdb     0                   ;pointer t
de31 : 01                               fcb     1                   
                        
de32 : 0000             TAPPTR          fdb     0                   ;no termin
                        * ----------------------------------------------------
                        
de34 : e809             TIMER           fdb     PTM+1               ;* where w
de36 : f0ab                             fdb     IHND                ;* pointer
de38 : 0000                             fdb     0                   ;* pointer
de3a : 80                               fcb     $80                 ;* mask fo
                        * ----------------------------------------------------
                        * disk driver temp. storage
                        
de3b : 00               CURTRK:		db $00
de3c : 00               CURSEC:		db $00
de3d : 00               CURDRV:		db $00
de3e : 00               CURSSE:		db $00
de3f : 00               CURSECO:	db $00
de40 : 00               TEMPA:		db $00
de41 : 0000             DMAAD:      dw $0000
                        
                        *-----------------------------------------------------
                        * date time functions temp storage
                        * 
de43 : 1f               RTCMONTH          fcb    $1F
de44 : 3f               RTCDATE           fcb    $3F
de45 : 7f               RTCYEAR           fcb    $7F
de46 : 07               RTCHOURS          fcb    7
de47 : 03               RTCMINUTES        fcb    3
de48 : 01               RTCSECONDS        fcb    1
de49 : 0f               RTCDAY            fcb    $F
AS09 Assembler for M6809 [1.42].                                     Page   69
--------------------------------- FLEX9.asm ----------------------------------

                        
de4a : 00               LASTCHAR       db 0
                        * ----------------------------------------------------
                        * Beginning of rom, drivers are in rom
f000 =                                  org $f000
f000 : 7ef18f           BOOTFLEX        jmp FLEXBOOT
                        * ----------------------------------------------------
                        *       Printer port initialization
                        
f003 : 39               OPNPRT          rts						; no printer on N8VEM
                        
                        * ----------------------------------------------------
                        *       Close the printer device (issue a <CR>)
                        
f004 : 860d             CLSPRT          lda     #$D
                        
                        * ----------------------------------------------------
                        *       Output a character to the printer
                        
f006 : 39               OUTPRT          rts						; no printer on N8VEM
                        
                        * ----------------------------------------------------
                        *       check for printer ready
                        
f007 : 39               CHKPRT          rts						; no printer on N8VEM
                        
                        
                        
                        * ----------------------------------------------------
                        *       Monitor entry routine
                        
f008 : 860a             MONITOR         lda     #$A
f00a : 8d16                             bsr     VOUTCH              ;* output 
f00c : 860d                             lda     #$D                 ;
f00e : 8d12                             bsr     VOUTCH              ;* output 
f010 : 3f                               swi                         ;* enter m
f011 : 08                               fcb		8					     ; assist09
f012 : 7ecd03                           jmp     WARMS               ;* re-ente
                        
                        * ----------------------------------------------------
                        *       Terminal init routine
                        
f015 :                  TINIT           ;pshs    a
                                        ;lda     #$11
                                        ;sta     [ACIADD]
                                        ;puls    pc,a
f015 : bdf3e9                           jsr     prop_init
f018 : 39                               rts
                        
                        * ----------------------------------------------------
                        *       Terminal input routine
                        
f019 : 7dde32           VINCH           tst     >TAPPTR             ;* allow r
f01c : 270a                             beq     TREDIR              ;* redirec
f01e : ad9fde32                         jsr     [TAPPTR]            ;* redirec
                        
                        * ----------------------------------------------------
                        *       Terminal output routine
                        * ----------------------------------------------------
f022 : 7ef057           VOUTCH    jmp      OUTCHAR                 
                        * ----------------------------------------------------
                        *       Terminal status check routine
AS09 Assembler for M6809 [1.42].                                     Page   70
--------------------------------- FLEX9.asm ----------------------------------

                                         
f025 : 7ef02b           STAT_      jmp      TRSCHK_
                                         
                        * ----------------------------------------------------
                        *       Monitor terminal input character with echo
                                         
f028 : 7ef03e           TREDIR    jmp      INCHE_
                                         
                        
                        
                        
                        * ----------------------------------------------------
                        *       Terminal status check routine
f02b : 3402             TRSCHK_     pshs	a
f02d : b6ef05           				lda     UART1+1                 ; GET STATUS 
f030 : 8508             				bita    #%00001000              ; IS RX READY
f032 : 2605             				bne		TRSCHK1
f034 : 3502             				puls	a
f036 : 1a04             				orcc	#$04					; set zero flag
f038 : 39               				rts
f039 : 3502             TRSCHK1			puls	a
f03b : 1cfb             				andcc	#$fb					; clear zero
f03d : 39               				rts
                        				
                        
                        * ----------------------------------------------------
                        *       Monitor terminal input character with echo
f03e : bdf044           INCHE_		jsr      INCHNE_
f041 : 7ef057           				jmp	   OUTCHAR
                        
                        * ----------------------------------------------------
                        *       Monitor terminal input character without echo
f044 : bdf04a           INCHNE_     jsr      INCHAR
f047 : 24fb             				bcc		INCHNE_
f049 : 39               				rts
                        				
f04a : b6ef05           INCHAR		lda UART1+1		;,u ;LOAD STATUS REGISTER
f04d : 44               				lsra
f04e : 44               				lsra
f04f : 44               				lsra
f050 : 44               				lsra ;TEST RECIEVER REGISTER FLAG
f051 : 2403             				bcc CIRTN ;RETURN IF NOTHING
                                
f053 : b6ef04           				lda UART1   ;0,u ;LOAD DATA BYTE
f056 : 39               CIRTN 			rts ;RETURN TO CALLER
                        * ----------------------------------------------------
                        *       Monitor terminal output character 
                        				
f057 : 3404             OUTCHAR pshs b       ;SAVE REGISTERS,WORK BYTE
f059 : f6ef05           CODTAO  ldb UART1+1             ;LOAD ACIA CONTROL REG
f05c : c510                     bitb #%00010000      ;           ? TX REGISTER
f05e : 27f9                     beq CODTAO           ;     RELEASE CONTROL IF 
                                
f060 : b7ef04                   sta UART1              ;     STORE INTO DATA R
                                                     ;     RETURN TO CALLER
f063 : 3504             CODTRT  puls b      ;RESTORE REGISTERS AND RETURN
f065 : 39               		rts
                        
                        				
                        * ----------------------------------------------------
                        * Interupt handler
                        
AS09 Assembler for M6809 [1.42].                                     Page   71
--------------------------------- FLEX9.asm ----------------------------------

f066 : fede2b           IHNDLR          ldu     IRQLL-4             ; leau    
f069 : ee44             CHKNXT          ldu     4,u                 ;get a lin
f06b : 270c                             beq     IHDONE              ;end of li
                                                                    ;
f06d : a6d4                             lda     [,u]                ;get statu
f06f : a546                             bita    6,u                 ;did it in
f071 : 27f6                             beq     CHKNXT              ;no - chec
                                                                    ;
f073 : 10aec4                           ldy     ,u                  ;yes - get
f076 : 6ed802                           jmp     [2,u]               ;go to dev
                                                                    ;
f079 : 3b               IHDONE          rti                         ;return fr
                        
                        * ----------------------------------------------------
                        *       add a device to IRQ handler table
                        
f07a : 3470             ADDDEV          pshs    x,y,u               
f07c : 8d14                             bsr     SRCHLST             ;find link
f07e : 2704                             beq     DEVARE              ;already e
f080 : ef04                             stu     4,x                 ;set link 
f082 : af24                             stx     4,y                 ;link this
f084 : 35f0             DEVARE          puls    pc,u,y,x            
                        
                        * ----------------------------------------------------
                        *       delete a device from IRQ handler table
                        
f086 : 3470             DELDEV          pshs    x,y,u
f088 : 8d08                             bsr     SRCHLST             ;find link
f08a : 2604                             bne     NODEV               ;not found
f08c : ae04                             ldx     4,x                 ;get link 
f08e : af44                             stx     4,u                 ;set in pr
f090 : 35f0             NODEV           puls    pc,u,y,x            
                        
                        * ----------------------------------------------------
                        *       search a linked list
                        *
                        *               entry: X = address of ISR control bloc
                        *               exit:  Y = address of link pointer
                        *                     CC = Z bit set if already linked
                        *
                        *               format of ISR control block:
                        *
                        *                       offset  description
                        *                         0     address of I/O device
                        *                         2     address of ISR
                        *                         4     link to next ISR contr
                        *                         6     bit mask for determini
                        
f092 : fede2b           SRCHLST         ldu      IRQLL-4            ;  leau   
f095 : 31c4             SRCHLP          leay    ,u
f097 : ac44                             cmpx    4,u                 ;X = link?
f099 : 2706                             beq     FNDENT              ;yes - ret
                                                                    ;
f09b : ee44                             ldu     4,u                 ;no - get 
f09d : 26f6                             bne     SRCHLP              ;not end o
f09f : 1cfb                             andcc   #$FB                ;clear Z f
                                                                    ;
f0a1 : 39               FNDENT          rts                         ;return - 
                        
                        
                        * ----------------------------------------------------
                        *       Timer routines for MPT
AS09 Assembler for M6809 [1.42].                                     Page   72
--------------------------------- FLEX9.asm ----------------------------------

                        *
                        *       timer initialize - install the handler into th
                        
f0a2 :                  TMINT           ;ldx     #MPT                ;point to
                                        ;lda     #$FF                ;set up t
                                        ;sta     ,x
                                        ;lda     #$3C
                                        ;sta     1,x
                                        ;lda     #$8F                ;this tur
                                        ;sta     ,x                  ;not fire
                                        ;lda     ,x                  ;get's in
                                        ;lda     #$3D
                                        ;sta     1,x
                        
                        *               point X at address of timer handler co
                        
f0a2 : 8ede34                           ldx     #TIMER
f0a5 : 6e9fd3e1                         jmp     [ADDDEVP]             ;Add it 
                        
                        
                        * ----------------------------------------------------
                        *       timer on
f0a9 :                  TMON            ;lda     #4                  ;10 milli
                                        ;sta     MPT                 ;enable t
f0a9 : 39                               rts
                        
                        * ----------------------------------------------------
                        *       timer off
                        
f0aa :                  TMOFF           ;lda     #$8F                ;disable 
                                        ;sta     MPT
f0aa : 39                               rts
                        * ----------------------------------------------------
                        *
                        *   Interrupt handler for the TIMER irq
                            
f0ab : b6e808           IHND            lda     PTM                 ;kill IRQ 
f0ae : 7cd373                           inc     TICK                ;bump tick
f0b1 : b6d373                           lda     TICK                ;
f0b4 : 8164                             cmpa    #100                ;100 ticks
f0b6 : 2656                             bne     NOUP                ;no - skip
                                                                    ;
f0b8 : 7fd373                           clr     TICK                ;yes - res
f0bb : 7cd372                           inc     SECOND              ;- increme
f0be : b6d372                           lda     SECOND              ;see if ov
f0c1 : 813c                             cmpa    #60                 ;
f0c3 : 2649                             bne     NOUP                ;no - don'
                                                                    ;
f0c5 : 7fd372                           clr     SECOND              ;yes - res
f0c8 : 7cd371                           inc     MINUTE              ;increment
f0cb : b6d371                           lda     MINUTE              ;
f0ce : 813c                             cmpa    #60                 ;see if ov
f0d0 : 263c                             bne     NOUP                ;no - don'
                                                                    ;
f0d2 : 7fd371                           clr     MINUTE              ;yes - res
f0d5 : 7cd370                           inc     HOUR                ;increment
f0d8 : b6d370                           lda     HOUR                ;
f0db : 8118                             cmpa    #24                 ;overflow?
f0dd : 262f                             bne     NOUP                ;no - don'
                                                                    ;
f0df : 7fd370                           clr     HOUR                ;yes - res
f0e2 : 7ccc0f                           inc     DAY                 ;increment
AS09 Assembler for M6809 [1.42].                                     Page   73
--------------------------------- FLEX9.asm ----------------------------------

f0e5 : b6cc0f                           lda     DAY                 ;get the d
f0e8 : 308d0025                         leax    MONTHDAYS,pc        ;point to 
f0ec : f6cc0e                           ldb     MONTH               ;get month
f0ef : 5a                               decb                        ;make zero
f0f0 : 3085                             leax    b,x                 ;set X to 
f0f2 : 4c                               inca                        ;
f0f3 : a184                             cmpa    ,x                  ;
f0f5 : 2617                             bne     NOUP                ;not time 
                                                                    ;
f0f7 : 8601                             lda     #1                  ;reset the
f0f9 : b7cc0f                           sta     DAY                 ;
f0fc : 7ccc0e                           inc     MONTH               ;bump the 
f0ff : b6cc0e                           lda     MONTH               ;get the m
f102 : 810d                             cmpa    #13                 ;see if ov
f104 : 2608                             bne     NOUP                ;no
                                                                    ;
f106 : 8601                             lda     #1                  ;set back 
f108 : b7cc0e                           sta     MONTH               ;
f10b : 7ccc10                           inc     YEAR                ;and bump 
                                                                    ;
f10e : 7ec700           NOUP            jmp     $C700               ;go to spo
                                                                    ;
f111 : 1f               MONTHDAYS       fcb     31                  ;Jan
f112 : 1c                               fcb     28                  ;Feb
f113 : 1f                               fcb     31                  ;Mar
f114 : 1e                               fcb     30                  ;Apr
f115 : 1f                               fcb     31                  ;May
f116 : 1e                               fcb     30                  ;Jun
f117 : 1f                               fcb     31                  ;Jul
f118 : 1f                               fcb     31                  ;Aug
f119 : 1e                               fcb     30                  ;Sep
f11a : 1f                               fcb     31                  ;Oct
f11b : 1e                               fcb     30                  ;Nov
f11c : 1f                               fcb     31                  ;Dec
                        
                        
                        *   READ    This routine reads the specified sector in
                        *           specified address. This routine should per
                        *           operation if necessary. A sector is 256 by
                        *
                        *           ENTRY - (X) = Address in memory where sect
                        *                   (A) = Track Number
                        *                   (B) = Sector Number
                        *
                        *           EXIT -  (X) May be destroyed
                        *                   (A) May be destroyed
                        *                   (B) = Error condition
                        *                   (Z) = 1 if no error
                        *                       = 0 if an error
                        
f11d : bfde41           READ            stx     DMAAD			; store dma addr
f120 : f7de3c           				stb		CURSEC			; STORE ORIGINAL SECTOR
f123 : b7de3b           				sta		CURTRK			; STORE TRACK	
                        
f126 : 8d0c             				bsr 	recalc_sector
f128 : bdf195           				jsr     PROP_READ_SD
f12b : c1ff             				cmpb	#$FF			; IS ERROR?
f12d : 2702             				beq		DRDSECA			; YES, ABORT	
f12f : 5f               				clrb	     			; NO ERROR		
                        				;jmp $f82a		
f130 : 39               				rts
                        
AS09 Assembler for M6809 [1.42].                                     Page   74
--------------------------------- FLEX9.asm ----------------------------------

f131 :                  DRDSECA:
f131 : c601             				ldb		#01				; RETURN ERROR CODE	
f133 : 39               				rts
                        
                        
                        ;*********************************************
                        ; recalculate sector number
                        ;*          (A) = TRACK NUMBER
                        ;*          (B) = SECTOR NUMBER
                        
f134 :                  recalc_sector:
f134 : b7de3b           	sta		CURTRK			; STORE TRACK	
f137 : 2703                 beq     rs_0_track  	; Track 0?
f139 : 5a                   decb                	; All of the other tracks don
f13a : 2004                 bra     rs1
f13c :                  rs_0_track:
f13c : 5d                   tstb					; sector0 ?
f13d : 2701                 beq  	rs1    		;  
f13f : 5a                   decb					; Track 0 does not have a sector 1    
f140 :                  rs1:
f140 : f7de3c               stb		CURSEC			; store recalculated sector
f143 : 39               	rts
                        
f144 : 39                               rts
                        
                        *   WRITE   This routine writes the information from t
                        *           buffer area to the disk sector specified. 
                        *           perform a seek operation if necessary. A s
                        *           in length.
                        *
                        *           ENTRY - (X) = Address of 256 memory buffer
                        *                         to be written to disk
                        *                   (A) = Track Number
                        *                   (B) = Sector Number
                        *
                        *           EXIT -  (X) May be destroyed
                        *                   (A) May be destroyed
                        *                   (B) = Error condition
                        *                   (Z) = 1 if no error
                        *                       = 0 if an error
                        
f145 : bfde41           WRITE           stx     DMAAD			; store dma addr
f148 : b7de3b           				sta	CURTRK			; STORE TRACK	
f14b : f7de3c           				stb	CURSEC			; STORE ORIGINAL SECTOR
f14e : 8de4             				bsr	    recalc_sector
f150 :                  DWRSEC1	
f150 : 7ef192           				jmp     PROP_WRITE_SD
f153 :                  DWRSECA:
f153 : c608             				ldb	#08			; RETURN ERROR CODE		
f155 : 39               				rts
                        
                        *   VERIFY  The sector just written to the disk is to 
                        *           determine if there are CRC errors. No seek
                        *           this routine will only be called immediate
                        *           single sector operation.
                        *
                        *           ENTRY - No entry parameters
                        *
                        *           EXIT -  (X) May be destroyed
                        *                   (A) May be destroyed
                        *                   (B) = Error condition
                        *                   (Z) = 1 if no error
AS09 Assembler for M6809 [1.42].                                     Page   75
--------------------------------- FLEX9.asm ----------------------------------

                        *                       = 0 if an error
                        
f156 : 5f               VERIFY          clrb                    
f157 : 39                               rts                             
                        
                        *   SEEK    Seeks to the track specified in the 'A' ac
                        *           double-sided systems, this routine should 
                        *           correct side depending on the sector numbe
                        *
                        *           ENTRY - (A) = Track Number
                        *                   (B) = Sector Number
                        *
                        *           EXIT -  (X) May be destroyed (See text)
                        *                   (A) May be destroyed (See text)
                        *                   (B) = Error condition
                        *                   (Z) = 1 if no error
                        *                       = 0 if an error
                        
f158 : 5f               SEEKIT          clrb
f159 : 39                               rts
                        
                        
                        *   INIT    This routine performs any necessary initia
                        *           drivers during cold start (at boot time). 
                        *           operation which must be done when the syst
                        *           can be done here.
                        *
                        *           ENTRY - No parameters
                        *
                        *           EXIT - A, B, X, Y, and U may be destroyed
                        
f15a : bdf015           INITIAL        jsr      TINIT 
f15d : 8ede1e                          ldx     #DRVTBL
f160 : c60c                            ldb     #12
                        
f162 : 6f80             INIT_2          clr     ,x+
f164 : 5a                               decb
f165 : 26fb                             bne     INIT_2
f167 : 39                               rts
                        
                        *   WARM    Performs any necessary functions during FL
                        *           calls this routine each time it goes thru 
                        *           procedure (after every command). As an exa
                        *           controllers use PIA's for communication wi
                        *           If FLEX is exited with a CPU reset, these 
                        *           reset such that the controller would not f
                        *           upon a jump to the FLEX warm start entry p
                        *           could re-initialize the PIA when the warm 
                        *
                        *           ENTRY - No parameters
                        *
                        *           EXIT - A, B, X, Y, and U may be destroyed
                        
f168 : bdf015           WARM            jsr		TINIT
f16b : 7dcc30           				tst     SCRATCH3
f16e : 2602                             bne     LREAE7
f170 : 8680                             lda     #$80
                                        ;sta     $E014      ; initialization o
                        
f172 : 39               LREAE7          rts
                        
                        *   RESTORE A restore operation (also known as a "seek
AS09 Assembler for M6809 [1.42].                                     Page   76
--------------------------------- FLEX9.asm ----------------------------------

                        *           be performed on the specified drive. The d
                        *           in the FCB pointed to by the contents of t
                        *           that the drive number is the 4th byte of t
                        *           routine should select the drive before exe
                        *           operation.
                        *
                        *           ENTRY - (X) = FCB address (3,x contains dr
                        *
                        *           EXIT -  (X) May be destroyed
                        *                   (A) May be destroyed
                        *                   (B) = Error condition
                        *                   (Z) = 1 if no error
                        *                       = 0 if an error
                        
f173 : 8d02             RESTORE         bsr     DRIVE
f175 : 5f                               clrb
                        
f176 : 39               LREAFF          rts
                        
                        *   DRIVE   The specified drive is to be selected. The
                        *           in the FCB pointed to by the contents of t
                        *           that the drive number is the 4th byte of t
                        *
                        *           ENTRY - (X) = FCB address (3,x contains dr
                        *
                        *           EXIT -  (X) May be destroyed
                        *                   (A) May be destroyed
                        *                   (B) = $0F if non-existent drive
                        *                       = Error condition otherwise
                        *                   (Z) = 1 if no error
                        *                       = 0 if an error
                        *                   (C) = 0 if no error
                        *                       = 1 if an error
                        
f177 : a603             DRIVE           lda 	3,x 		; GET DRIVE NUMBER FROM FCB
f179 : 8103             				cmpa 	#$03		;
f17b : 2301             				bls 	DRVSEL1 	; ONLY DRIVES 0 TO 3 ALLOWED
f17d : 4f               				clra			;
f17e : b7de3d           DRVSEL1:		sta 	CURDRV		;
f181 : 1cfe                             andcc	#$fe
f183 : 39               				rts
                        
                        *   CHKRDY  Check for a drive ready condition. The dri
                        *           in the specified FCB (at 3,x). If the user
                        *           the drive motors off after some time delay
                        *           should first check for a drive ready condi
                        *           not ready, should delay long enough for th
                        *           to speed, then check again. This delay sho
                        *           not ready on the first try and ONLY if nec
                        *           particular drives and controller! If the h
                        *           leaves the drive motors on, this routine s
                        *           single check for drive ready and immediate
                        *           resulting status. Systems which do not hav
                        *           check for a drive ready condition should s
                        *           a ready status if the drive number is vali
                        *
                        *           ENTRY - (X) = FCB address (3,x contains dr
                        *
                        *           EXIT -  (X) May be destroyed
                        *                   (A) May be destroyed
                        *                   (B) = Error condition
                        *                   (Z) = 1 if drive ready
AS09 Assembler for M6809 [1.42].                                     Page   77
--------------------------------- FLEX9.asm ----------------------------------

                        *                       = 0 if not ready
                        *                   (C) = 0 if drive ready
                        *                       = 1 if not ready
                        
f184 :                  CHKRDY          
                                        
                        
                        *   QUICK   This routine performs a "quick" drive read
                        *           function is exactly like the CHKRDY routin
                        *           no delay should be done. If the drive does
                        *           condition on the first check, a not ready 
                        *           immediately returned. Entry and exit are a
                        
f184 : 5f               QUICK           clrb
f185 : 1cfe                             andcc	#$fe
f187 : 39                               rts
                        
f188 : 8d00             SEBB8           bsr     *+2
f18a : 8d00                             bsr     *+2
f18c : 8d00                             bsr     *+2
f18e : 39                               rts
                        
f188 =                                  end     $C850
                        
                        		include "prop_io.asm"
                        ;* PROP i/O driver
                        ;* idea by PROP I/O N8VEM
                        
                        ;* porta [0..7] - 	PROP D[0..7]
                        ;* PB0				PROP CS           out
                        ;* PB1            SD_WP             in
                        ;* PB2				!RST              out
                        ;* PB3            SD_CD             in
                        ;* PB4				PROP A0           out
                        ;* PB5				PROP A1           out
                        ;* PB6				PROP !RD          out
                        ;* PB7				MRDY/!BUSY        in
                        
                        ;* functionality
                        ;* PS2 kbd in
                        ;* VGA out
                        ;* SD card i/o
                        
                        ;* definition of registers:
                        ;*                    +------/WAIT
                        ;*                    |+-----/RD
                        ;*                    ||+---- A1
                        ;*                    |||+--- A0
                        ;*                    ||||+--/CS
                        ;*                    |||||
                        ;*                    |||||
                        ;*   P15..P0  -->  xxxxxxxx_xxxxxxxx
                        ;*                          +------+
                        ;*                          D7....D0
                        ;*
                        ;*
                        ;*    /wait /rd  A1  A0 CD RES WP CS  
                        ;*     i      0   0   0  i  0	  i 1   Status Port
                        ;*     i      0   0   1  i  0	  i 1   Keyboard receive
                        ;*     i      1   0   1  i  0   i 1   vga out port
                        ;*     i      1   1   0  i  0   i 1   Disk command por
                        ;*     i      0   1   0  i  0   i 1   Disk command sta
AS09 Assembler for M6809 [1.42].                                     Page   78
--------------------------------- FLEX9.asm ----------------------------------

                        ;*     i      1   1   1  i  0   i 1   Disk write
                        ;*     i      0   1   1  i  0   i 1   Disk read 
                        ;*     i      x   x   x  i  1   i x   Reset Prop      
                        ;*     i      x   x   x  i  0   i 0   Unselect Prop 
                               
                        ;*     0      1   1   1  0  1   0 1   Data Direction  
                                    
                        
0000 =                  PROP_UNSELECT:	   equ   $00
0001 =                  PROP_STAT_C_RD:	equ   $01
0011 =                  PROP_KEYB_D_RD:	equ   $11
0051 =                  PROP_VGA_D_WR:	   equ   $51
0061 =                  PROP_SD_C_WR:	   equ   $61
0021 =                  PROP_SD_C_RD:	   equ   $21
0071 =                  PROP_SD_D_WR:	   equ   $71
0031 =                  PROP_SD_D_RD:	   equ   $31
0004 =                  PROP_RST:		   equ   $04
                        
ee0c =                  iobase:			   equ   $ee0c
                        ;porta:			   equ	$00		; pa0 - mrdy
                        ;portb:			   equ	$04		; pb1 - cs, pb2 - a0, pb3 - a1, 
                        
0000 =                  portain:		      equ	$00
00ff =                  portaout:		   equ	$ff
0075 =                  portbdd:		      equ   $75
0004 =                  selectbdr		   equ	4
                        
ee0c =                  porta			      equ	iobase
ee0d =                  portacr			   equ   porta+1
ee0e =                  portb			      equ   iobase+2
ee0f =                  portbcr			   equ   portb+1
                        
ed00 =                  via1               equ  $ed00
                        
                        ;* mrdy is connected to pb7
0080 =                  mrdy:			      equ   $80
                        
                        ;* disk commands
0001 =                  DISK_READ: 	 	   equ   $01			; COMMAND FOR READING FRO
0002 =                  DISK_WRITE: 	   equ   $02			; COMMAND FOR WRITING TO S
00ee =                  DISK_REQ: 	 	   equ   $EE			; COMMAND TO SEE IF DISK C
00aa =                  DISK_IODONE:	   equ   $AA        	; WRITE IS COMPLETE
                        
                        *
                        * PORT A ASSIGMENTS
                        *               
                        ;       EQU     IC3     ;                       PA0 
                        ;io_src  equ     IC2     ;                       PA1
                        ;       EQU     IC1     ;                       PA2 
                        ;       EQU     I4O5    ;                       PA3
                        ;       EQU     0C4     ;                       PA4 
                        ;       EQU     OC3     ;                       PA5
                        ;RST     equ     OC2     ;Enable DS1302          PA6
                        ;       EQU     OC1     ;                       PA7
                        *
                        * PORT D ASSIGNMENTS
                        *
0008 =                  I_O     equ     %00001000       ;DS1302 I/O    PD3
0010 =                  SCLK    equ     %00010000       ;DS1302 CLOCK  PD4
                        *
                        
                        
AS09 Assembler for M6809 [1.42].                                     Page   79
--------------------------------- FLEX9.asm ----------------------------------

                        ;*****************************************************
                        ;	PropIO vectors
                        ;
                        ;*****************************************************
f18f : 7ef442           FLEXBOOT		   jmp		FLEXBOOT_IMPL
f192 : 7ef1e2           PROP_WRITE_SD	jmp		PROP_WRITE_SD_IMPL
f195 : 7ef3f9           PROP_READ_SD	jmp		PROP_READ_SD_IMPL
f198 : 7ef242           PROP_CONIN		jmp		PROP_CONIN_IMPL
f19b : 7ef24c           PROP_CONOUT		jmp		PROP_CONOUT_IMPL
f19e : 7ef238           PROP_CONST		jmp		PROP_CONST_IMPL
f1a1 : 7ef273           CONIN			jmp		CONIN_IMPL
f1a4 : 7ef28c           CONOUT			jmp		CONOUT_IMPL
f1a7 : 7ef29e           CONSTAT			jmp		CONSTAT_IMPL
f1aa : 7ef34b           PROP_RESET		jmp		Reset_Prop
                        
                                 ;org   $bee0
                        ;test2    jsr prop_init
                                 
                        ;done2    jsr CONSTAT
                        			;;bita #$01
                        			;beq   done2
                                 ;jsr   CONIN
                            		;jsr   CONOUT   
                                 ;jmp   done2   
                                 
                              				
f1cf =                  			org		FLEXBOOT+$40
f1cf : bdf3e9           test     jsr prop_init
                                 
f1d2 : bdf39f           done     jsr prop_stat_rd
f1d5 : 8501             			bita #$01
f1d7 : 27f9             			beq   done
f1d9 : bdf3c3                    jsr   prop_keyb_rd
                            		;lda 	#$41	; output control signals
f1dc : bdf326           			jsr   prop_vga_wr   
f1df : 7ef1d2                    jmp   done   
                                 
                        ;*****************************************************
                        ;
                        ;
                        ;   HANDLE prop WRITE CALL
                        ;
                        ;*****************************************************
f1e2 :                  PROP_WRITE_SD_IMPL:
f1e2 : 86ee             			lda #DISK_REQ
f1e4 : bdf2de           			jsr prop_dsk_cmd_wr
                        			
f1e7 :                  REQUEST_LOOP_WR:
f1e7 : bdf35f           			jsr prop_dsk_stat_rd
f1ea : 8504             			bita #$04
f1ec : 27f9             			beq REQUEST_LOOP_WR
                        
f1ee : 8602             			lda #DISK_WRITE
f1f0 : bdf2de           			jsr  prop_dsk_cmd_wr
                        
f1f3 : b6de3d           			lda CURDRV
f1f6 : bdf2de           			jsr prop_dsk_cmd_wr
                        
f1f9 : b6de3c           			lda CURSEC
f1fc : bdf2de           			jsr prop_dsk_cmd_wr
                        
f1ff : b6de3b           			lda CURTRK
AS09 Assembler for M6809 [1.42].                                     Page   80
--------------------------------- FLEX9.asm ----------------------------------

f202 : bdf2de           			jsr prop_dsk_cmd_wr
                        
f205 : 4f               			clra					; hi track is 0
f206 : bdf2de           			jsr prop_dsk_cmd_wr
                        
f209 : b6de42           			lda DMAAD+1
f20c : bdf2de           			jsr prop_dsk_cmd_wr
                        
f20f : b6de41           			lda DMAAD
f212 : bdf2de           			jsr prop_dsk_cmd_wr
                        			
f215 :                  PROP_DISK_READY1:
f215 : bdf35f           			jsr prop_dsk_stat_rd
f218 : 8510             			bita #$10
f21a : 27f9             			beq PROP_DISK_READY1
                        
f21c : bede41           			ldx DMAAD
f21f : 5f               			clrb				; one sector is 256 bytes
f220 : a600             wl:			lda 0,x
f222 : bdf302           			jsr prop_dsk_data_wr
f225 : 3001             			leax 1,x
f227 : 5a               			decb
f228 : 26f6             			bne wl
                        
f22a : 86aa             			lda #DISK_IODONE
f22c : bdf2de           			jsr  prop_dsk_cmd_wr
                        			
f22f :                  PROP_DISK_READY2:
f22f : bdf35f           			jsr prop_dsk_stat_rd
f232 : 8520             			bita #$20
f234 : 27f9             			beq PROP_DISK_READY2
                        
f236 : 5f               			clrb
f237 : 39               			rts
                        ;*****************************************************
f238 :                  PROP_CONST_IMPL:					; CONSOLE STATUS, RETURN 0FFH IF 
f238 : bdf39f           			jsr prop_stat_rd
f23b : 8401             			anda #$01
f23d : 2702             			beq	NOT_READY
                        		
f23f : 86ff             			lda	#$ff
f241 :                  NOT_READY:				;
f241 : 39               			rts			;
                        ;*****************************************************
                        		
                        
                        			
                        ;*****************************************************
f242 :                  PROP_CONIN_IMPL:					; KBD CHARACTER INTO REGISTER A
                        					;
f242 : bdf39f           			jsr		prop_stat_rd
                        
f245 : 4d               			tsta
f246 : 27fa             			beq	PROP_CONIN_IMPL
                        
f248 : bdf3c3           			jsr prop_keyb_rd
f24b : 39               			rts			;
                        ;*****************************************************
f24c :                  PROP_CONOUT_IMPL:				
f24c : bdf326           			jsr	prop_vga_wr
f24f : 39               			rts			;
                        ;*****************************************************
AS09 Assembler for M6809 [1.42].                                     Page   81
--------------------------------- FLEX9.asm ----------------------------------

f250 : 7ef019           SER_CONIN_IMPL   jmp VINCH
                        
f253 : 7ef022           SER_CONOUT_IMPL	 jmp VOUTCH
                        
f256 : 7ef025           SER_CONSTAT_IMP  jmp STAT_
                        
                        ;****************************+************************
f259 : 3404             INCHNE_IMPL     pshs    b
f25b : f6ed00                           ldb     VIA1+DRB
f25e : c502                             bitb    #%00000010           ;pd1     
f260 : 2705                             beq     ci1
f262 : 3504                             puls    b
f264 : 7ef044                           jmp     INCHNE_
f267 : 3504             ci1             puls    b
f269 : bdf39f           ci4             jsr     prop_stat_rd
f26c : 8501                             bita    #$01                
f26e : 27f9                             beq     ci4                
f270 : 160150                           lbra    prop_keyb_rd 
                        
f273 : 3404             CONIN_IMPL      pshs    b
f275 : f6ed00                           ldb     VIA1+DRB
f278 : c502                             bitb    #%00000010           ;pd1     
f27a : 2704                             beq     ci5
f27c : 3504                             puls    b
f27e : 20d0                             bra     SER_CONIN_IMPL
f280 : 3504             ci5             puls    b
f282 : bdf39f           ci6             jsr     prop_stat_rd
f285 : 8501                             bita    #$01                
f287 : 27f9                             beq     ci6                
f289 : 170137                           lbsr    prop_keyb_rd
                                        
f28c : 3404             CONOUT_IMPL     pshs    b
f28e : f6ed00                           ldb     VIA1+DRB
f291 : c502                             bitb    #%00000010
f293 : 2704                             beq     ci2
f295 : 3504                             puls    b
f297 : 20ba                             bra     SER_CONOUT_IMPL
f299 : 3504             ci2             puls    b
f29b : 160088                           lbra    prop_vga_wr
                                        
f29e : 3402             CONSTAT_IMPL    pshs    a
f2a0 : b6ed00                           lda     VIA1+DRB
f2a3 : 8502                             bita    #%00000010
f2a5 : 2704                             beq     ci3
                                        
f2a7 : 3502                             puls    a
f2a9 : 20ab                             bra     SER_CONSTAT_IMP
                                        
f2ab : bdf39f           ci3             jsr     prop_stat_rd
f2ae : 8501                             bita    #$01                
f2b0 : 2605                             bne     cs2
                                        
f2b2 : 3502                             puls	   a
f2b4 : 1a04                             orcc	   #$04					; set zero flag
f2b6 : 39                               rts
f2b7 : 3502             cs2  			    puls	   a
f2b9 : 1cfb                             andcc	#$fb					; clear zero
f2bb : 39                               rts
                        
                        ;*****************************************************
                        ;			prop communication subroutines
                        ;*****************************************************
AS09 Assembler for M6809 [1.42].                                     Page   82
--------------------------------- FLEX9.asm ----------------------------------

                        				
f2bc : 8680             waitmrdy: 	lda   #mrdy	
f2be : b5ee0e           wm1:			bita  portb
f2c1 : 27fb             				beq  	wm1   ; wait for mrdy
f2c3 : 39               				rts
                        ;prepare ports for output
f2c4 :                  prepare_prop_wr
                        				;ldx		#iobase
f2c4 : c6ff             				ldb 	#portaout		;porta to output
f2c6 : f7ee0c           				stb 	porta
f2c9 : c604             				ldb		#selectbdr		; enable data
f2cb : f7ee0d           				stb     portacr
f2ce : b7ee0c           				sta 	porta			; output data on porta
f2d1 : 39               				rts
                        ; unselect prop port				
f2d2 :                  prop_unslct
f2d2 : c600             				ldb 	#PROP_UNSELECT			; reset control
f2d4 : f7ee0e           				stb 	portb			; reset control
f2d7 : 7fee0d           				clr		portacr
f2da : 7fee0c           				clr     porta
f2dd : 39               				rts
                                    
                        ;* A contains command
f2de : 3404             prop_dsk_cmd_wr: pshs	b        ;
f2e0 : c6ff             				ldb 	#portaout		;porta to output
f2e2 : f7ee0c           				stb 	porta
f2e5 : c604             				ldb		#selectbdr		; enable data
f2e7 : f7ee0d           				stb     portacr
f2ea : b7ee0c           				sta 	porta			; output data on porta
f2ed : c661             				ldb 	#PROP_SD_C_WR	; output control signals
f2ef : f7ee0e           				stb 	portb
f2f2 : 8dc8                         bsr 	waitmrdy
f2f4 : c600             				ldb 	#PROP_UNSELECT			; reset control
f2f6 : f7ee0e           				stb 	portb			; reset control
f2f9 : 7fee0d           				clr		portacr
f2fc : 7fee0c           				clr     porta
f2ff : 3504             				puls    b
f301 : 39               				rts
                        			
                        ;* A contains data
f302 :                  prop_dsk_data_wr:
f302 : 3404             			    pshs	b
f304 : c6ff             				ldb 	#portaout		;porta to output
f306 : f7ee0c           				stb 	porta
f309 : c604             				ldb		#selectbdr		; enable data
f30b : f7ee0d           				stb     portacr
f30e : b7ee0c           				sta 	porta			; output data on porta
f311 : c671             				ldb 	#PROP_SD_D_WR	; output control signals
f313 : f7ee0e           				stb 	portb
f316 : 8da4                         bsr 	waitmrdy
f318 : c600             				ldb 	#PROP_UNSELECT			; reset control
f31a : f7ee0e           				stb 	portb			; reset control
f31d : 7fee0d           				clr		portacr
f320 : 7fee0c           				clr     porta
f323 : 3504             				puls    b
f325 : 39               				rts
                        
                        ;*************************************************
                        ;* Write to prop vga 
                        ;* A contains data
f326 :                  prop_vga_wr:
f326 : 3406             				pshs	a,b
AS09 Assembler for M6809 [1.42].                                     Page   83
--------------------------------- FLEX9.asm ----------------------------------

f328 : c6ff             				ldb 	#portaout		;porta to output
f32a : f7ee0c           				stb 	porta
f32d : c604             				ldb	#selectbdr		; enable data
f32f : f7ee0d           				stb   portacr
f332 : b7ee0c           				sta 	porta			; output data on porta
f335 : c651             				ldb 	#PROP_VGA_D_WR	; output control signals
f337 : f7ee0e           				stb 	portb
f33a : bdf2bc           				jsr 	waitmrdy
f33d : c600             				ldb 	#PROP_UNSELECT			; reset control
f33f : f7ee0e           				stb 	portb			; reset control
f342 : 7fee0d           				clr	portacr
f345 : 7fee0c           				clr   porta
f348 : 3506             				puls  a,b
f34a : 39               			rts
                        ;* reset Propeller
f34b : 3404             Reset_Prop: pshs     b
f34d : 17ff74                       lbsr      prepare_prop_wr
f350 : c604                         ldb		#PROP_RST
f352 : f7ee0e                       stb 	   portb
f355 : 5f                           clrb
f356 : 5a               reset_dly	decb
f357 : 26fd                         bne		reset_dly
f359 : 17ff76                       lbsr      prop_unslct		
f35c : 3504                         puls	   b
f35e : 39                           rts	
                        ;* A contains status
f35f :                  prop_dsk_stat_rd:
f35f : 3404             			   pshs	   b
                        				;ldx		#iobase
f361 : c604             				ldb		#selectbdr		; enable data
f363 : f7ee0d           				stb      portacr
f366 : c621             				ldb 	   #PROP_SD_C_RD	; output control signals
f368 : f7ee0e           				stb 	   portb
f36b : bdf2bc                       jsr 	   waitmrdy
f36e : b6ee0c           				lda 	   porta
f371 : c600             				ldb 	#PROP_UNSELECT			; reset control
f373 : f7ee0e           				stb 	portb			; reset control
f376 : 7fee0d           				clr		portacr
f379 : 7fee0c           				clr     porta
f37c : 3504             				puls     b
f37e : 39               				rts
                        			
                        ;* A contains data
f37f :                  prop_dsk_data_rd:
f37f : 3404             				pshs	   b
f381 : c604             				ldb		#selectbdr		; enable data
f383 : f7ee0d           				stb      portacr
f386 : c631             				ldb 	   #PROP_SD_D_RD	; output control signals
f388 : f7ee0e           				stb 	   portb
f38b : bdf2bc                       jsr 	   waitmrdy			
f38e : b6ee0c           				lda 	   porta
f391 : c600             				ldb 	   #PROP_UNSELECT			; reset control
f393 : f7ee0e           				stb 	   portb			; reset control
f396 : 7fee0d           				clr		portacr
f399 : 7fee0c           				clr      porta
f39c : 3504             				puls     b
f39e : 39               				rts
                        			
                        ;* A contains status
f39f :                  prop_stat_rd:
f39f : 3404             				pshs	   b
f3a1 : f6de4a                       ldb      LASTCHAR
AS09 Assembler for M6809 [1.42].                                     Page   84
--------------------------------- FLEX9.asm ----------------------------------

f3a4 : c10d                         cmpb     #$0d
f3a6 : 2716                         beq      psr
                        				;ldx		#iobase
f3a8 : c604             				ldb		#selectbdr		; enable data
f3aa : f7ee0d           				stb      portacr
f3ad : c601             				ldb 	   #PROP_STAT_C_RD	; output control signals
f3af : f7ee0e           				stb 	   portb
f3b2 : bdf2bc           				jsr 	   waitmrdy
f3b5 : b6ee0c           				lda 	   porta
f3b8 : 17ff17           				lbsr     prop_unslct
f3bb : 3504                   		puls     b
f3bd : 39               			   rts
f3be : 8601             psr         lda      #$1	
f3c0 : 3504                   		puls     b
f3c2 : 39               			   rts
                           
                        ;* A contains data
f3c3 :                  prop_keyb_rd:
f3c3 : 3404             				pshs     b
f3c5 : f6de4a                       ldb      LASTCHAR
f3c8 : c10d                         cmpb     #$0d
f3ca : 2719                         beq      pkbr
                        				;ldx		#iobase
f3cc : c604             				ldb		#selectbdr		; enable data
f3ce : f7ee0d           				stb      portacr
f3d1 : c611             				ldb      #PROP_KEYB_D_RD	; output control signals
f3d3 : f7ee0e           				stb      portb
f3d6 : bdf2bc           				jsr      waitmrdy
                        			;brclr  	   portb,x,mrdy,*
f3d9 : b6ee0c           				lda 	   porta
f3dc : 17fef3           				lbsr     prop_unslct
f3df : 3504             pkbr1  		puls     b
f3e1 : b7de4a                       sta      LASTCHAR
f3e4 : 39                   			rts
f3e5 : 860a             pkbr        lda      #$0a
f3e7 : 20f6                         bra      pkbr1
                        
                           
f3e9 :                  prop_init:  
                                    ;clr     portacr
                                    ;clr     porta
f3e9 : 7fee0f                       clr      portbcr
f3ec : 8675                         lda      #portbdd
f3ee : b7ee0e                       sta	   portb
f3f1 : 8604                         lda 	   #selectbdr
f3f3 : b7ee0f                       sta		portbcr		
f3f6 : 16fed9                       lbra     prop_unslct
                        ;*****************************************************
                        
f3f9 :                  PROP_READ_SD_IMPL:
                        			;sei
f3f9 : 86ee             			lda #DISK_REQ		; REQUEST TO SEE IF DISK IS READY TO
f3fb : bdf2de           			jsr  prop_dsk_cmd_wr						
                        			
f3fe :                  REQUEST_LOOP_RD:
f3fe : bdf35f           			jsr prop_dsk_stat_rd
f401 : 8504             			bita #$04
f403 : 27f9             			beq REQUEST_LOOP_RD
                        	
f405 : 8601             			lda #DISK_READ
f407 : bdf2de           			jsr  prop_dsk_cmd_wr
                        	
AS09 Assembler for M6809 [1.42].                                     Page   85
--------------------------------- FLEX9.asm ----------------------------------

f40a : b6de3d           			lda CURDRV
f40d : bdf2de           			jsr prop_dsk_cmd_wr
f410 : b6de3c           			lda CURSEC
f413 : bdf2de           			jsr	prop_dsk_cmd_wr
                        
f416 : b6de3b            			lda CURTRK
f419 : bdf2de           			jsr	prop_dsk_cmd_wr
f41c : 4f               			clra			; hi track is 0
f41d : bdf2de           			jsr	prop_dsk_cmd_wr
                        
f420 : b6de42           			lda DMAAD+1
f423 : bdf2de           			jsr	prop_dsk_cmd_wr
                        
f426 : b6de41           			lda DMAAD
f429 : bdf2de           			jsr	prop_dsk_cmd_wr
                        
                        
f42c :                  PROP_DISK_READY:
f42c : bdf35f           			jsr prop_dsk_stat_rd
                        			
f42f : 8510             			bita #$10
f431 : 27f9             			beq PROP_DISK_READY
                        	
f433 : bede41           			ldx DMAAD
f436 : 5f               			clrb				; one sector is 256 bytes
f437 : bdf37f           rl:			jsr prop_dsk_data_rd
f43a : a784             			sta ,x
f43c : 3001             			leax 1,x
f43e : 5a               			decb
f43f : 26f6             			bne rl
                        
f441 : 39               			rts
                        ;*****************************************************
                        ; BOOTLOADER
                        ; Loads Flex executable from SD card 
                        ; File is FLEX.SYS
                        ; Prop opens this file as drive 15
                        ; treat as single track
                        ;*****************************************************
f442 :                  FLEXBOOT_IMPL:	
f442 : bdf3e9           			jsr     prop_init
f445 : b6ee0e           fb1      lda      portb
f448 : 8580                      bita     #$80
f44a : 27f9                      beq     fb1
f44c : 8ec000           			ldx		#STARTOFFLEX
f44f : 6f00             clearmem:   clr		0,x
f451 : 3001             			leax 1,x
f453 : 8cdeff           			cmpx		#ENDOFFLEX
f456 : 26f7             			bne     clearmem
f458 : 860f             			lda 	#$0f
f45a : b7de3d           			sta 	CURDRV
f45d : 4f               			clra 
f45e : b7de3c           			sta	CURSEC
f461 : 7fde3b           			clr		CURTRK
f464 : 8ec400           			ldx		#LOADADDR
f467 : bfde41           			stx		DMAAD
f46a : c61b             			ldb	    #27			; 26 consecutive sectors
f46c : 3404             BootLoop:	pshs	b
f46e : 3402             			pshs	a
f470 : bdf195           			jsr		PROP_READ_SD
f473 : bfde41           			stx		DMAAD
f476 : 860f             			lda 	#$0f
AS09 Assembler for M6809 [1.42].                                     Page   86
--------------------------------- FLEX9.asm ----------------------------------

f478 : b7de3d           			sta 	CURDRV
f47b : 3502             			puls	a
f47d : 4c               			inca
f47e : b7de3c           			sta		CURSEC
f481 : 3504             			puls	b
f483 : 5a               			decb
f484 : 26e6             			bne		BootLoop
f486 : 7fde3c           			clr 	CURSEC
f489 : 7fde3d           			clr 	CURDRV
f48c : 7ecd00           			jmp		COLDS
                        ;*****************************************************
                        
                        		include "rtc_driver.asm"
                        * N8VEM 6x0x (6809) driver for 
                        * DS1302 on VIA1
                        * as9 rtc_driver.asm -l s19 now
                        
ed00 =                  VIA1           equ   $ED00
                        
0010 =                  CE             equ   $10      ;PD4=CE
00ef =                  NCE            equ   $EF      ;PD4=CE
0020 =                  DQ             equ   $20      ;PD5=DQ
00df =                  NDQ            equ   $DF      ;PD5=DQ
0040 =                  SCK            equ   $40      ;SCLK = PD6
00bf =                  NSCK           equ   $BF      ;SCLK = PD6
                        
                        
                        
0001 =                  DRA            equ   1
0003 =                  DDRA           equ   3
0000 =                  DRB            equ   0
0002 =                  DDRB           equ   2
000c =                  PCR            equ   12
000b =                  ACR            equ   11
                        
00bf =                  RTC_BURST_RD   equ   $BF
00be =                  RTC_BURST_WR   equ   $BE
00ff =                  RAM_BURST_RD   equ   $FF
00fe =                  RAM_BURST_WR   equ   $FE
0000 =                  WP             equ   $00
00a5 =                  CHARGE         equ   $A5      ;1 DIODE, 2k
008e =                  RTC_WP_WR      equ   $8E
008f =                  RTC_WP_RD      equ   $8F
                        
                        ;INCHNP equ 0   ;INPUT CHAR IN A REG - NO PARITY
                        ;OUTCH equ 1    ;OUTPUT CHAR FROM A REG
                        ;PDATA1 equ 2   ;OUTPUT STRING
                        ;PDATA equ 3    ;OUTPUT CR/LF THEN STRING
                        ;OUT2HS equ 4   ;OUTPUT TWO HEX AND SPACE
                        ;OUT4HS equ 5   ;OUTPUT FOUR HEX AND SPACE
                        ;PCRLF equ 6    ;OUTPUT CR/LF
                        ;SPACE equ 7    ;OUTPUT A SPACE
                        ;MONITR equ 8   ;ENTER ASSIST09 MONITOR
                        ;VCTRSW equ 9   ;VECTOR EXAMINE/SWITCH
                        ;BRKPT equ 10   ;USER PROGRAM BREAKPOINT
                        ;PAUSE equ 11   ;TASK PAUSE FUNCTION
                        
                        ;GETCHR      equ   $CD15
                        ;OUTCH       equ   $CD0F
                        ;OUTHEX      equ   $CD3C
                        ;PCRLF       equ   $CD24
                        ;PSTRNG      equ   $CD1E
AS09 Assembler for M6809 [1.42].                                     Page   87
--------------------------------- FLEX9.asm ----------------------------------

                        ;WARMS       equ   $CD03
                        ;PUTCHR      equ   $CD18
                        
0000 =                  LATCH_DIS           equ     0
cc0e =                  FLEXMONTH           equ     $CC0E
cc0f =                  FLEXDATE            equ     $CC0F
cc10 =                  FLEXYEAR            equ     $CC10
                                                
d370 =                  FLEXHOURS           equ     $D370               
d371 =                  FLEXMINS            equ     $D371
d372 =                  FLEXSECS            equ     $D372
                                  
                              
                        
f48f : bdf5a4           START_WR_RTC   jsr   ASKDAT
f492 : bdf50d                          jsr   WRITE_WP_OFF
f495 : bdf4d2                          jsr   WRITE_BURST_RTC
                                       ;swi
                                       ;fcb   MONITR
f498 : 7ecd03                          jmp   WARMS
                        
                        ;BACKSP         fcb   $08 ;BACKSPACE CHARACTER
                        ;DELETE         fcb   $18 ;CONTROL-X
                        ;ENDLIN         fcc   ':' ;END OF LINE
                        ;TEMP           rmb   3 ;TEMPORARY IN FCS4, DEC-HEXIN,
                        
                        ;MONTH          rmb   1
                        ;DATE           rmb   1
                        ;YEAR           rmb   1
                        ;HOURS          rmb   1
                        ;MINUTES        rmb   1
                        ;SECONDS        rmb   1
                        ;DAY            rmb   1
                        
f49b : bdf50d           START_RD_RTC   jsr   WRITE_WP_OFF
f49e : bdf567                          jsr   READ_BURST_RTC
f4a1 : bdf676                          jsr   WRITEDATE
f4a4 : bdf6c9                          jsr   FLEXDATETIME
f4a7 : 39                              rts
                        
                        
                        
                        ******************************************************
                        * write bit in C               
f4a8 : 2404             WRITE_BIT      bcc   BIT0_0
f4aa : c630                            ldb   #CE+DQ
f4ac : 2002                            bra   BIT0
f4ae : c610             BIT0_0         ldb   #CE               
f4b0 : f7ed00           BIT0           stb   VIA1+DRB
f4b3 : ca40                            orb   #SCK
f4b5 : f7ed00                          stb   VIA1+DRB
f4b8 : 39                              rts
                                       
                        ******************************************************
                        * write A to bitbang serial      
f4b9 : 44               WRITE_1BYTE    lsra
f4ba : 8dec                            bsr   WRITE_BIT
f4bc : 44                              lsra
f4bd : 8de9                            bsr   WRITE_BIT
f4bf : 44                              lsra
f4c0 : 8de6                            bsr   WRITE_BIT
f4c2 : 44                              lsra
AS09 Assembler for M6809 [1.42].                                     Page   88
--------------------------------- FLEX9.asm ----------------------------------

f4c3 : 8de3                            bsr   WRITE_BIT
f4c5 : 44                              lsra
f4c6 : 8de0                            bsr   WRITE_BIT
f4c8 : 44                              lsra
f4c9 : 8ddd                            bsr   WRITE_BIT
f4cb : 44                              lsra
f4cc : 8dda                            bsr   WRITE_BIT
f4ce : 44                              lsra
f4cf : 8dd7                            bsr   WRITE_BIT
f4d1 : 39                              rts
                        ******************************************************
                        * write rtc in burst mode            
f4d2 :                  WRITE_BURST_RTC
f4d2 : c670                            ldb   #CE+DQ+SCK
f4d4 : f7ed02                          stb   VIA1+DDRB
f4d7 : 7fed00                          clr   VIA1+DRB
f4da : 86be                            lda   #RTC_BURST_WR
f4dc : 8ddb                            bsr   WRITE_1BYTE
f4de : b6de48                          lda   RTCSECONDS
f4e1 : 8dd6                            bsr   WRITE_1BYTE
f4e3 : b6de47                          lda   RTCMINUTES
f4e6 : 8dd1                            bsr   WRITE_1BYTE
f4e8 : b6de46                          lda   RTCHOURS
f4eb : 8dcc                            bsr   WRITE_1BYTE
f4ed : b6de44                          lda   RTCDATE
f4f0 : 8dc7                            bsr   WRITE_1BYTE
f4f2 : b6de43                          lda   RTCMONTH
f4f5 : 8dc2                            bsr   WRITE_1BYTE
f4f7 : b6de49                          lda   RTCDAY
f4fa : 8dbd                            bsr   WRITE_1BYTE
f4fc : b6de45                          lda   RTCYEAR
f4ff : 8db8                            bsr   WRITE_1BYTE
f501 : 8600                            lda   #WP
f503 : 8db4                            bsr   WRITE_1BYTE
f505 : 86a5                            lda   #CHARGE
f507 : 8db0                            bsr   WRITE_1BYTE
f509 : 7fed00                          clr   VIA1+DRB
f50c : 39                              rts
                        ******************************************************
                        * disable write protection
f50d : c670             WRITE_WP_OFF   ldb   #CE+DQ+SCK
f50f : f7ed02                          stb   VIA1+DDRB
f512 : 7fed00                          clr   VIA1+DRB
f515 : 868e                            lda   #RTC_WP_WR
f517 : 8da0                            bsr   WRITE_1BYTE
f519 : 8600                            lda   #0
f51b : 8d9c                            bsr   WRITE_1BYTE
f51d : 7fed00                          clr   VIA1+DRB
f520 : 39                              rts
                        ******************************************************
                        * read single bit          
f521 : 3402             READ_BIT       pshs  a
f523 : c610                            ldb   #CE
f525 : f7ed00                          stb   VIA1+DRB
f528 : b6ed00                          lda   VIA1+DRB
f52b : c650                            ldb   #CE+SCK
f52d : f7ed00                          stb   VIA1+DRB
f530 : 8420                            anda  #DQ
f532 : 3502                            puls  a
f534 : 39                              rts
                        ******************************************************
                        * read byte
AS09 Assembler for M6809 [1.42].                                     Page   89
--------------------------------- FLEX9.asm ----------------------------------

f535 : 4f               READ_1BYTE     clra
f536 : 8de9                            bsr   READ_BIT
f538 : 2702                            beq   BIT1  
f53a : 8a01                            ora   #1
f53c : 8de3             BIT1           bsr   READ_BIT
f53e : 2702                            beq   BIT2  
f540 : 8a02                            ora   #2
f542 : 8ddd             BIT2           bsr   READ_BIT
f544 : 2702                            beq   BIT3  
f546 : 8a04                            ora   #4
f548 : 8dd7             BIT3           bsr   READ_BIT
f54a : 2702                            beq   BIT4  
f54c : 8a08                            ora   #8
f54e : 8dd1             BIT4           bsr   READ_BIT
f550 : 2702                            beq   BIT5  
f552 : 8a10                            ora   #$10
f554 : 8dcb             BIT5           bsr   READ_BIT
f556 : 2702                            beq   BIT6  
f558 : 8a20                            ora   #$20
f55a : 8dc5             BIT6           bsr   READ_BIT
f55c : 2702                            beq   BIT7  
f55e : 8a40                            ora   #$40
f560 : 8dbf             BIT7           bsr   READ_BIT
f562 : 2702                            beq   RET
f564 : 8a80                            ora   #$80
f566 : 39               RET            rts
                        ******************************************************
                        * read rtc in burst mode
f567 : c670             READ_BURST_RTC ldb   #CE+DQ+SCK
f569 : f7ed02                          stb   VIA1+DDRB
f56c : 7fed00                          clr   VIA1+DRB
f56f : 86bf                            lda   #RTC_BURST_RD
f571 : bdf4b9                          jsr   WRITE_1BYTE   
f574 : c650                            ldb   #CE+SCK
f576 : f7ed02                          stb   VIA1+DDRB
f579 : 8dba                            bsr   READ_1BYTE
f57b : b7de48                          sta   RTCSECONDS
f57e : 8db5                            bsr   READ_1BYTE
f580 : b7de47                          sta   RTCMINUTES
f583 : 8db0                            bsr   READ_1BYTE
f585 : b7de46                          sta   RTCHOURS
f588 : 8dab                            bsr   READ_1BYTE
f58a : b7de44                          sta   RTCDATE
f58d : 8da6                            bsr   READ_1BYTE
f58f : b7de43                          sta   RTCMONTH
f592 : 8da1                            bsr   READ_1BYTE
f594 : b7de49                          sta   RTCDAY
f597 : 8d9c                            bsr   READ_1BYTE
f599 : b7de45                          sta   RTCYEAR
f59c : 8d97                            bsr   READ_1BYTE     ;WP discard
f59e : 8d95                            bsr   READ_1BYTE     ;CHARGE discard
f5a0 : 7fed00                          clr   VIA1+DRB
f5a3 : 39                              rts
                          
                        ******************************************************
                        * ask for date & time
f5a4 : 12               ASKDAT         nop
f5a5 : 308d0066         ASKDA1         leax DATERQ,pc
                                       ;swi
                                       ;fcb PDATA
f5a9 : bdce79                          jsr  PSTRNG
                        
AS09 Assembler for M6809 [1.42].                                     Page   90
--------------------------------- FLEX9.asm ----------------------------------

f5ac : 108ede43                        ldy #RTCMONTH ;POINT TO MONTH LOCATION
f5b0 : 8d14                            bsr GETDAT ;GET MONTH
f5b2 : 8d12                            bsr GETDAT ;GET DATE
f5b4 : 8d10                            bsr GETDAT ;GET YEAR
f5b6 : 8d0e                            bsr GETDAT ;GET HOUR
f5b8 : 8d0c                            bsr GETDAT ;GET MINUTES
f5ba : 8d0a                            bsr GETDAT ;GET SECONDS
f5bc : 8ef65b                          ldx #THANKS
                                       ;swi
                                       ;fcb PDATA
f5bf : bdce79                          jsr  PSTRNG
                                       ;swi
                                       ;fcb PCRLF
f5c2 : bdceb1                          jsr  PCRLF
f5c5 : 39                              rts  
                        ******************************************************
                        * GETDAT ROUTINe to INPUT AND STORE DATE
f5c6 : bdf5d6           GETDAT         jsr DECIN    ;GET NEXT DATE ITEM
f5c9 : 2404                            bcc DATEOK  ;OK NUMBER RECEIVED
f5cb : 3262             DATENG         leas 2,s    ;ELSE REMOVE RETURN ADDRESS
f5cd : 20d6                            bra ASKDA1  ;AND ASK FOR DATE AGAIN
f5cf : c163             DATEOK         cmpb #99    ;SHOULD BE LESS THAN 99
                        *              tfr x,d     ;MOVE DATE TO D
                        *              cmpd #99    ;SHOULD BE LESS THAN 99
f5d1 : 22f8                            bhi DATENG  ;ELSE IT'S NO GOOD
f5d3 : e7a0                            stb ,y+    ;SAVE IT
f5d5 : 39                              rts
                        ******************************************************
f5d6 :                  DECIN          
f5d6 : 8e0000           GETHE1         ldx #0
f5d9 : bfd40d                          stx TEMP    ;NO NUMBER AS YET
f5dc : 5f                              clrb        ;CLEAR  B FLAG FOR ERROR
                        
                        * MAIN GET NUMBER LOOP
f5dd : bdf665           GETHD1         jsr GETNX   ;GET NEXT CHARACTER FROM IN
f5e0 : 252a                            bcs GETSKP  ;FINISHED IF NOT ALPHA
f5e2 : 8130                            cmpa #'0'    ;CHECK IF A DIGIT
f5e4 : 2520                            blo GETFIN  ;<=9 ok, skip otherwise
f5e6 : 8030                            suba #$30   ;CONVERT FROM ASCII
f5e8 : b7d40d                          sta  TEMP
                        
f5eb : bdf665           GETHD2         jsr GETNX  ;GET NEXT CHARACTER FROM INP
f5ee : 251c                            bcs GETSKP ;FINISHED IF NOT ALPHA
f5f0 : 8130                            cmpa #'0'   ;CHECK IF A DIGIT
f5f2 : 2512                            blo GETFIN ;<=9 ok, skip otherwise
f5f4 : 8030                            suba #$30  ;CONVERT FROM ASCII         
f5f6 : 3402                            pshs a
f5f8 : f6d40d                          ldb TEMP   ;GET NUMBER SO FAR
f5fb : 58                              aslb
f5fc : 58                              aslb
f5fd : 58                              aslb
f5fe : 58                              aslb
f5ff : ebe0                            addb ,s+   ;ADD CURRENT DIGIT TO TEMP
f601 : f7d40d                          stb TEMP    ;AND SAVE IT               
f604 : 20e5                            bra GETHD2 ;AND GO DO NEXT DIGIT
                                       
                        * NORMAL EXIT AT END OF NUMBER: C=0, B<>0, X=ANSWER
f606 : bed40d           GETFIN         ldx TEMP   ;GET ANSWER
f609 : 1cfe                            andcc #$FE  ;   CLC C=0
f60b : 39                              rts
                        
                        * WHEN INVALID DIGIT IS FOUND, STEP TO NEXT CR OR SPAC
AS09 Assembler for M6809 [1.42].                                     Page   91
--------------------------------- FLEX9.asm ----------------------------------

f60c : 1a01             GETSKP         orcc  #$1    ;SEC C=1
f60e : 39                              rts         ;FINALLY EXIT WITH CARRY SE
                        
                                                
f60f : 454e5445522044.. DATERQ         fcc "ENTER DATE AND TIME(MM,DD,YY-HH,MI
f637 : 04                              fcb 4
f638 : 4441544520414e.. DATEPR         fcc "DATE AND TIME(MM,DD,YY-HH,MI,SS): 
f65a : 04                              fcb 4
f65b : 5448414e4b2059.. THANKS         fcc "THANK YOU"
f664 : 04                              fcb 4
                        ******************************************************
                        * GETNX - GET NEXT CHARACTER FROM INPUT, AND
                        * CLASF - CLASSIFY IT AS NUMERIC OR NOT
                        
f665 :                  GETNX          ;swi
                                       ;fcb  INCHNP
f665 : bdcef7                          jsr   GETCHR
                        
                        * IF SPACE, STEP PAST IT TO NEXT NON-SPACE
f668 : 8120             GETNX2         cmpa #$20 ;SPACE?
f66a : 27f9                            beq GETNX ;YES, SO READ AND REPEAT
                        
                        * CLASSIFY CHARACTER, AND RETURN CARRY SET IF NOT ALPH
                        
f66c : 8139             CLASF0         cmpa #'9'
f66e : 2303                            bls CLASF1 ;DIGITS 0-9 ARE OK
f670 : 1a01             CLASF2         orcc #$01  ;SEC SET CARRY
f672 : 39                              rts        ;AND RETURN
                        
f673 : 1cfe             CLASF1         andcc #$FE ;  CLC CLEAR IF OK
f675 : 39                              rts
                                       
                        ******************************************************
                        * WRITE OUT DATE AND TIME
                        *
f676 : 8ede43           WRITEDATE   ldx  #RTCMONTH
                                    ;swi
                                    ;fcb   OUT2HS
f679 : bdcfd0                       jsr   OUTHEX
f67c : 862f                         lda   #'/'
                                    ;swi
                                    ;fcb   OUTCH
f67e : bdcf3d                       jsr   PUTCHR
f681 : 8ede44                       ldx   #RTCDATE
                                    ;swi
                                    ;fcb   OUT2HS
f684 : bdcfd0                       jsr   OUTHEX
f687 : 862f                         lda   #'/'
                                    ;swi
                                    ;fcb   OUTCH
f689 : bdcf3d                       jsr   PUTCHR
f68c : 8ede45                       ldx   #RTCYEAR
                                    ;swi
                                    ;fcb   OUT2HS
f68f : bdcfd0                       jsr   OUTHEX
f692 : 862d                         lda   #'-'
                                    ;swi
                                    ;fcb   OUTCH
f694 : bdcf3d                       jsr   PUTCHR
f697 : 8ede46                       ldx   #RTCHOURS
                                    ;swi
                                    ;fcb   OUT2HS
AS09 Assembler for M6809 [1.42].                                     Page   92
--------------------------------- FLEX9.asm ----------------------------------

f69a : bdcfd0                       jsr   OUTHEX
f69d : 863a                         lda   #':'
                                    ;swi
                                    ;fcb   OUTCH
f69f : bdcf3d                       jsr   PUTCHR
f6a2 : 8ede47                       ldx   #RTCMINUTES
                                    ;swi
                                    ;fcb   OUT2HS
f6a5 : bdcfd0                       jsr   OUTHEX
f6a8 : 863a                         lda   #':'
                                    ;swi
                                    ;fcb   OUTCH
f6aa : bdcf3d                       jsr   PUTCHR
f6ad : 8ede48                       ldx   #RTCSECONDS
                                    ;swi
                                    ;fcb   OUT2HS
f6b0 : bdcfd0                       jsr   OUTHEX
                                    ;swi
                                    ;fcb   PCRLF
f6b3 : bdceb1                       jsr   PCRLF
f6b6 : 39                           rts
                        
                        ******************************************************
                        * calculate date for flex9
                        *
f6b7 : a600             CALCDATE    lda   0,x
f6b9 : 44                           lsra
f6ba : 44                           lsra
f6bb : 44                           lsra
f6bc : 44                           lsra
f6bd : c60a                         ldb   #10
f6bf : 3d                           mul
f6c0 : 3404                         pshs  b
f6c2 : e600                         ldb   0,x
f6c4 : c40f                         andb  #$0f
f6c6 : ebe0                         addb  ,s+
f6c8 : 39                           rts
                                    
f6c9 : 8ede43           FLEXDATETIME ldx   #RTCMONTH
f6cc : bdf6b7                       jsr   CALCDATE
f6cf : f7cc0e                       stb   FLEXMONTH
f6d2 : 8ede45                       ldx   #RTCYEAR
f6d5 : bdf6b7                       jsr   CALCDATE
f6d8 : f7cc10                       stb   FLEXYEAR
f6db : 8ede44                       ldx   #RTCDATE
f6de : bdf6b7                       jsr   CALCDATE
f6e1 : f7cc0f                       stb   FLEXDATE
f6e4 : 8ede46                       ldx   #RTCHOURS
f6e7 : bdf6b7                       jsr   CALCDATE
f6ea : f7d370                       stb   FLEXHOURS
f6ed : 8ede47                       ldx   #RTCMINUTES
f6f0 : bdf6b7                       jsr   CALCDATE
f6f3 : f7d371                       stb   FLEXMINS
f6f6 : 8ede48                       ldx   #RTCSECONDS
f6f9 : bdf6b7                       jsr   CALCDATE
f6fc : f7d372                       stb   FLEXSECS
f6ff : 39                           rts            
                                    
                                    
                        
                        
No errors in pass 2.
AS09 Assembler for M6809 [1.42].                                     Page   93
--------------------------------- FLEX9.asm ----------------------------------

