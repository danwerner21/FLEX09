                      (       assist.asm):00001         ;* #  TTL ASSIST09 - MC6809 MONITOR
                      (       assist.asm):00002         ;* as9 ASSISTN8.ASM -l s19 now
                      (       assist.asm):00003         ;*
                      (       assist.asm):00004         ;* $Id: assist09.asm,v 1.5 2004/01/14 12:15:18 albert Exp $
                      (       assist.asm):00005         ;*   MODIFICATIONS BY A VD HORST , HCC FIG HOLLAND 2004
                      (       assist.asm):00006         ;*   Modification for n8VEM 6809 + i/o mezzanine board borutk 2013
                      (       assist.asm):00007         ;*  ACIA 6551 at $F004
                      (       assist.asm):00008         ;*  PIT  6840 at $F008
                      (       assist.asm):00009         ;* OPT ABS,LLE=85,S,CRE
                      (       assist.asm):00010                 SPC     2
                      (       assist.asm):00011         ;*************************************
                      (       assist.asm):00012         ;* COPYRIGHT (C) MOTOROLA, INC. 1979 *
                      (       assist.asm):00013         ;*************************************
                      (       assist.asm):00014                 SPC     2
                      (       assist.asm):00015         ;*************************************
                      (       assist.asm):00016         ;*  THIS IS THE BASE ASSIST09 ROM.
                      (       assist.asm):00017         ;*  IT MAY RUN WITH OR WITHOUT THE
                      (       assist.asm):00018         ;*  EXTENSION ROM WHICH
                      (       assist.asm):00019         ;*  WHEN PRESENT WILL BE AUTOMATICALLY
                      (       assist.asm):00020         ;*  INCORPORATED BY THE BLDVTR
                      (       assist.asm):00021         ;*  SUBROUTINE.
                      (       assist.asm):00022         ;*************************************
                      (       assist.asm):00023                 SPC     2
                      (       assist.asm):00024         ;*********************************************
                      (       assist.asm):00025         ;*         GLOBAL MODULE EQUATES
                      (       assist.asm):00026         ;********************************************
     F800             (       assist.asm):00027         ROMBEG          EQU $F800                         ; ROM START ASSEMBLY ADDRESS
     E700             (       assist.asm):00028         RAMOFS          EQU -$1900                        ; ROM OFFSET TO RAM WORK PAGE
     0800             (       assist.asm):00029         ROMSIZ          EQU 2048                          ; ROM SIZE
     F000             (       assist.asm):00030         ROM2OF          EQU ROMBEG-ROMSIZ                 ; START OF EXTENSION ROM
     EF04             (       assist.asm):00031         ACIA            EQU $ef04                         ; DEFAULT   ACIA ADDRESS
     E808             (       assist.asm):00032         PTM             EQU $e808                         ; DEFAULT PTM ADDRESS
     0000             (       assist.asm):00033         DFTCHP          EQU 0                             ; DEFAULT CHARACTER PAD COUNT
     0000             (       assist.asm):00034         DFTNLP          EQU 0                             ; DEFAULT NEW LINE PAD COUNT
     003E             (       assist.asm):00035         PROMPT          EQU '>'                           ; PROMPT CHARACTER
     0008             (       assist.asm):00036         NUMBKP          EQU 8                             ; NUMBER OF BREAKPOINTS
                      (       assist.asm):00037         ;*********************************************
                      (       assist.asm):00038                 SPC     2
                      (       assist.asm):00039         ;*********************************************
                      (       assist.asm):00040         ;*  MISCELANEOUS EQUATES
                      (       assist.asm):00041         ;*********************************************
     0004             (       assist.asm):00042         EOT             EQU $04                           ; END OF TRANSMISSION
     0007             (       assist.asm):00043         BELL            EQU $07                           ; BELL CHARACTER
     000A             (       assist.asm):00044         LF              EQU $0A                           ; LINE FEED
     000D             (       assist.asm):00045         CR              EQU $0D                           ; CARRIAGE RETURN
     0010             (       assist.asm):00046         DLE             EQU $10                           ; DATA LINK ESCAPE
     0018             (       assist.asm):00047         CAN             EQU $18                           ; CANCEL (CTL-X)
                      (       assist.asm):00048         ;* PTM ACCESS DEFINITIONS
     E809             (       assist.asm):00049         PTMSTA          EQU PTM+1                         ; READ STATUS REGISTER
     E808             (       assist.asm):00050         PTMC13          EQU PTM                           ; CONTROL REGISTERS 1 AND 3
     E809             (       assist.asm):00051         PTMC2           EQU PTM+1                         ; CONTROL REGISTER 2
     E80A             (       assist.asm):00052         PTMTM1          EQU PTM+2                         ; LATCH 1
     E80C             (       assist.asm):00053         PTMTM2          EQU PTM+4                         ; LATCH 2
     E80E             (       assist.asm):00054         PTMTM3          EQU PTM+6                         ; LATCH 3
                      (       assist.asm):00055                 SPC     1
     008C             (       assist.asm):00056         SKIP2           EQU $8C                           ; "CMPX #" OPCODE - SKIPS TWO BYTES
                      (       assist.asm):00057                 SPC     3
                      (       assist.asm):00058         ;*******************************************
                      (       assist.asm):00059         
                      (       assist.asm):00060         ;*    ASSIST09 MONITOR SWI FUNCTIONS
                      (       assist.asm):00061         ;* THE FOLLOWING EQUATES DEFINE FUNCTIONS PROVIDED
                      (       assist.asm):00062         ;* BY THE ASSIST09 MONITOR VIA THE SWI INSTRUCTION.
                      (       assist.asm):00063         ;******************************************
     0000             (       assist.asm):00064         INCHNP          EQU 0                             ; INPUT CHAR IN A REG - NO PARITY
     0001             (       assist.asm):00065         OUTCH           EQU 1                             ; OUTPUT CHAR FROM A REG
     0002             (       assist.asm):00066         PDATA1          EQU 2                             ; OUTPUT STRING
     0003             (       assist.asm):00067         PDATA           EQU 3                             ; OUTPUT CR/LF THEN STRING
     0004             (       assist.asm):00068         OUT2HS          EQU 4                             ; OUTPUT TWO HEX AND SPACE
     0005             (       assist.asm):00069         OUT4HS          EQU 5                             ; OUTPUT FOUR HEX AND SPACE
     0006             (       assist.asm):00070         PCRLF           EQU 6                             ; OUTPUT CR/LF
     0007             (       assist.asm):00071         SPACE           EQU 7                             ; OUTPUT A SPACE
     0008             (       assist.asm):00072         MONITR          EQU 8                             ; ENTER ASSIST09 MONITOR
     0009             (       assist.asm):00073         VCTRSW          EQU 9                             ; VECTOR EXAMINE/SWITCH
     000A             (       assist.asm):00074         BRKPT           EQU 10                            ; USER PROGRAM BREAKPOINT
     000B             (       assist.asm):00075         PAUSE           EQU 11                            ; TASK PAUSE FUNCTION
     000B             (       assist.asm):00076         NUMFUN          EQU 11                            ; NUMBER OF AVAILABLE FUNCTIONS
                      (       assist.asm):00077         ;* NEXT SUB-CODES FOR ACCESSING THE VECTOR TABLE.
                      (       assist.asm):00078         ;* THEY ARE EQUIVALENT TO OFFSETS IN THE TABLE.
                      (       assist.asm):00079         ;* RELATIVE POSITIONING MUST BE MAINTAINED.
     0000             (       assist.asm):00080         .AVTBL          EQU 0                             ; ADDRESS OF VECTOR TABLE
     0002             (       assist.asm):00081         .CMDL1          EQU 2                             ; FIRST COMMAND LIST
     0004             (       assist.asm):00082         .RSVD           EQU 4                             ; RESERVED HARDWARE VECTOR
     0006             (       assist.asm):00083         .SWI3           EQU 6                             ; SWI3 ROUTINE
     0008             (       assist.asm):00084         .SWI2           EQU 8                             ; SWI2 ROUTINE
     000A             (       assist.asm):00085         .FIRQ           EQU 10                            ; FIRQ ROUTINE
     000C             (       assist.asm):00086         .IRQ            EQU 12                            ; IRQ ROUTINE
     000E             (       assist.asm):00087         .SWI            EQU 14                            ; SWI ROUTINE
     0010             (       assist.asm):00088         .NMI            EQU 16                            ; NMI ROUTINE
     0012             (       assist.asm):00089         .RESET          EQU 18                            ; RESET ROUTINE
     0014             (       assist.asm):00090         .CION           EQU 20                            ; CONSOLE ON
     0016             (       assist.asm):00091         .CIDTA          EQU 22                            ; CONSOLE INPUT DATA
     0018             (       assist.asm):00092         .CIOFF          EQU 24                            ; CONSOLE INPUT OFF
     001A             (       assist.asm):00093         .COON           EQU 26                            ; CONSOLE OUTPUT ON
     001C             (       assist.asm):00094         .CODTA          EQU 28                            ; CONSOLE OUTPUT DATA
     001E             (       assist.asm):00095         .COOFF          EQU 30                            ; CONSOLE OUTPUT OFF
     0020             (       assist.asm):00096         .HSDTA          EQU 32                            ; HIGH SPEED PRINTDATA
     0022             (       assist.asm):00097         .BSON           EQU 34                            ; PUNCH/LOAD ON
     0024             (       assist.asm):00098         .BSDTA          EQU 36                            ; PUNCH/LOAD DATA
     0026             (       assist.asm):00099         .BSOFF          EQU 38                            ; PUNCH/LOAD OFF
     0028             (       assist.asm):00100         .PAUSE          EQU 40                            ; TASK PAUSE ROUTINE
     002A             (       assist.asm):00101         .EXPAN          EQU 42                            ; EXPRESSION ANALYZER
     002C             (       assist.asm):00102         .CMDL2          EQU 44                            ; SECOND COMMAND LIST
     002E             (       assist.asm):00103         .ACIA           EQU 46                            ; ACIA ADDRESS
     0030             (       assist.asm):00104         .PAD            EQU 48                            ; CHARACTER PAD AND NEW LINE PAD
     0032             (       assist.asm):00105         .ECHO           EQU 50                            ; ECHO/LOAD AND NULL BKPT FLAG
     0034             (       assist.asm):00106         .PTM            EQU 52                            ; PTM ADDRESS
     001B             (       assist.asm):00107         NUMVTR          EQU 27                            ; NUMBER OF VECTORS
     0034             (       assist.asm):00108         HIVTR           EQU 52                            ; HIGHEST VECTOR OFFSET
                      (       assist.asm):00109                 PAGE
                      (       assist.asm):00110         ;******************************************
                      (       assist.asm):00111         ;*              WORK AREA
                      (       assist.asm):00112         ;* THIS WORK AREA IS ASSIGNED TO THE PAGE ADDRESSED BY
                      (       assist.asm):00113         ;* -$1800,PCR FROM THE BASE ADDRESS OF THE ASSIST09
                      (       assist.asm):00114         ;* ROM.  THE DIRECT PAGE REGISTER DURING MOST ROUTINE
                      (       assist.asm):00115         ;* OPERATIONS WILL POINT TO THIS WORK AREA.  THE STACK
                      (       assist.asm):00116         ;* INITIALLY STARTS UNDER THE RESERVED WORK AREAS AS
                      (       assist.asm):00117         ;* DEFINED HEREIN.
                      (       assist.asm):00118         ;******************************************
     DF00             (       assist.asm):00119         WORKPG          EQU ROMBEG+RAMOFS                 ; SETUP DIRECT PAGE ADDRESS
                      (       assist.asm):00120         ;* SETDP WORKPG!>8 NOTIFY ASSEMBLER
                      (       assist.asm):00121                 ORG     WORKPG+256                        ; READY PAGE DEFINITIONS
                      (       assist.asm):00122         ;* THE FOLLOWING THRU BKPTOP MUST RESIDE IN THIS ORDER
                      (       assist.asm):00123         ;* FOR PROPER INITIALIZATION
                      (       assist.asm):00124         
     E000             (       assist.asm):00125         HERE            EQU *
                      (       assist.asm):00126                 ORG     HERE-4
     DFFC             (       assist.asm):00127         PAUSER          EQU *                             ; PAUSE ROUTINE
                      (       assist.asm):00128                 ORG     PAUSER-1
     DFFB             (       assist.asm):00129         SWIBFL          EQU *                             ; BYPASS SWI AS BREAKPOINT FLAG
                      (       assist.asm):00130                 ORG     SWIBFL-1
     DFFA             (       assist.asm):00131         BKPTCT          EQU *                             ; BREAKPOINT COUNT
                      (       assist.asm):00132                 ORG     BKPTCT-2
     DFF8             (       assist.asm):00133         SLEVEL          EQU *                             ; STACK TRACE LEVEL
                      (       assist.asm):00134                 ORG     SLEVEL-NUMVTR*2
     DFC2             (       assist.asm):00135         VECTAB          EQU *                             ; VECTOR TABLE
                      (       assist.asm):00136                 ORG     VECTAB-2*NUMBKP
     DFB2             (       assist.asm):00137         BKPTBL          EQU *                             ; BREAKPOINT TABLE
                      (       assist.asm):00138                 ORG     BKPTBL-2*NUMBKP
     DFA2             (       assist.asm):00139         BKPTOP          EQU *                             ; BREAKPOINT OPCODE TABLE
                      (       assist.asm):00140                 ORG     BKPTOP-2
     DFA0             (       assist.asm):00141         WINDOW          EQU *                             ; WINDOW
                      (       assist.asm):00142                 ORG     WINDOW-2
     DF9E             (       assist.asm):00143         ADDR            EQU *                             ; ADDRESS POINTER VALUE
                      (       assist.asm):00144                 ORG     ADDR-1
     DF9D             (       assist.asm):00145         BASEPG          EQU *                             ; BASE PAGE VALUE
                      (       assist.asm):00146                 ORG     BASEPG-2
     DF9B             (       assist.asm):00147         NUMBER          EQU *                             ; BINARY BUILD AREA
                      (       assist.asm):00148                 ORG     NUMBER-2
     DF99             (       assist.asm):00149         LASTOP          EQU *                             ; LAST OPCODE TRACED
                      (       assist.asm):00150                 ORG     LASTOP-2
     DF97             (       assist.asm):00151         RSTACK          EQU *                             ; RESET STACK POINTER
                      (       assist.asm):00152                 ORG     RSTACK-2
     DF95             (       assist.asm):00153         PSTACK          EQU *                             ; COMMAND RECOVERY STACK
                      (       assist.asm):00154                 ORG     PSTACK-2
     DF93             (       assist.asm):00155         PCNTER          EQU *                             ; LAST PROGRAM COUNTER
                      (       assist.asm):00156                 ORG     PCNTER-2
     DF91             (       assist.asm):00157         TRACEC          EQU *                             ; TRACE COUNT
                      (       assist.asm):00158                 ORG     TRACEC-1
     DF90             (       assist.asm):00159         SWICNT          EQU *                             ; TRACE “SWI” NEST LEVEL COUNT
                      (       assist.asm):00160                 ORG     SWICNT-1                          ; (MISFLG MUST FOLLOW SWICNT)
     DF8F             (       assist.asm):00161         MISFLG          EQU *                             ; LOAD CMD/THRU BREAKPOINT FLAG
                      (       assist.asm):00162                 ORG     MISFLG-1
     DF8E             (       assist.asm):00163         DELIM           EQU *                             ; EXPRESSION DELIMITER/WORK BYTE
                      (       assist.asm):00164                 ORG     DELIM-40
     DF66             (       assist.asm):00165         ROM2WK          EQU *                             ; EXTENSION ROM RESERVED AREA
                      (       assist.asm):00166                 ORG     ROM2WK-21                         ; <<<<<<<<<<<<<<<<<<<<<<<<<<<<< for 6309 add two more byte: -23
     DF51             (       assist.asm):00167         TSTACK          EQU *                             ; TEMPORARY STACK HOLD
     DF51             (       assist.asm):00168         STACK           EQU *                             ; START OF INITIAL STACK
                      (       assist.asm):00169         
                      (       assist.asm):00170         
                      (       assist.asm):00171         
                      (       assist.asm):00172         
                      (       assist.asm):00173         
                      (       assist.asm):00174         
                      (       assist.asm):00175         
                      (       assist.asm):00176         
                      (       assist.asm):00177         
                      (       assist.asm):00178         
                      (       assist.asm):00179         
                      (       assist.asm):00180         ;        ORG     *-4
                      (       assist.asm):00181         ;PAUSER          EQU *                             ; PAUSE ROUTINE
                      (       assist.asm):00182         ;        ORG     *-1
                      (       assist.asm):00183         ;SWIBFL          EQU *                             ; BYPASS SWI AS BREAKPOINT FLAG
                      (       assist.asm):00184         ;        ORG     *-1
                      (       assist.asm):00185         ;BKPTCT          EQU *                             ; BREAKPOINT COUNT
                      (       assist.asm):00186         ;        ORG     *-2
                      (       assist.asm):00187         ;SLEVEL          EQU *                             ; STACK TRACE LEVEL
                      (       assist.asm):00188         ;        ORG     -NUMVTR*2+*
                      (       assist.asm):00189         ;VECTAB          EQU *                             ; VECTOR TABLE
                      (       assist.asm):00190         ;        ORG     -2*NUMBKP+*
                      (       assist.asm):00191         ;BKPTBL          EQU *                             ; BREAKPOINT TABLE
                      (       assist.asm):00192         ;        ORG     -2*NUMBKP+*
                      (       assist.asm):00193         ;BKPTOP          EQU *                             ; BREAKPOINT OPCODE TABLE
                      (       assist.asm):00194         ;        ORG     *-2
                      (       assist.asm):00195         ;WINDOW          EQU *                             ; WINDOW
                      (       assist.asm):00196         ;        ORG     *-2
                      (       assist.asm):00197         ;ADDR            EQU *                             ; ADDRESS POINTER VALUE
                      (       assist.asm):00198         ;        ORG     *-1
                      (       assist.asm):00199         ;BASEPG          EQU *                             ; BASE PAGE VALUE
                      (       assist.asm):00200         ;        ORG     *-2
                      (       assist.asm):00201         ;NUMBER          EQU *                             ; BINARY BUILD AREA
                      (       assist.asm):00202         ;        ORG     *-2
                      (       assist.asm):00203         ;LASTOP          EQU *                             ; LAST OPCODE TRACED
                      (       assist.asm):00204         ;        ORG     *-2
                      (       assist.asm):00205         ;RSTACK          EQU *                             ; RESET STACK POINTER
                      (       assist.asm):00206         ;        ORG     *-2
                      (       assist.asm):00207         ;PSTACK          EQU *                             ; COMMAND RECOVERY STACK
                      (       assist.asm):00208         ;        ORG     *-2
                      (       assist.asm):00209         ;PCNTER          EQU *                             ; LAST PROGRAM COUNTER
                      (       assist.asm):00210         ;        ORG     *-2
                      (       assist.asm):00211         ;TRACEC          EQU *                             ; TRACE COUNT
                      (       assist.asm):00212         ;        ORG     *-1
                      (       assist.asm):00213         ;SWICNT          EQU *                             ; TRACE "SWI" NEST LEVEL COUNT
                      (       assist.asm):00214         ;        ORG     *-1                               ; (MISFLG MUST FOLLOW SWICNT)
                      (       assist.asm):00215         ;MISFLG          EQU *                             ; LOAD CMD/THRU BREAKPOINT FLAG
                      (       assist.asm):00216         ;        ORG     *-1
                      (       assist.asm):00217         ;DELIM           EQU *                             ; EXPRESSION DELIMITER/WORK BYTE
                      (       assist.asm):00218         ;        ORG     *-40
                      (       assist.asm):00219         ;ROM2WK          EQU *                             ; EXTENSION ROM RESERVED AREA
                      (       assist.asm):00220         ;        ORG     *-21
                      (       assist.asm):00221         ;TSTACK          EQU *                             ; TEMPORARY STACK HOLD
                      (       assist.asm):00222         ;STACK           EQU *                             ; START OF INITIAL STACK
                      (       assist.asm):00223                 SPC     3
                      (       assist.asm):00224         ;******************************************
                      (       assist.asm):00225         ;* DEFAULT THE ROM BEGINNING ADDRESS TO 'ROMBEG'
                      (       assist.asm):00226         ;* ASSIST09 IS POSITION ADDRESS INDEPENDENT, HOWEVER
                      (       assist.asm):00227         ;* WE ASSEMBLE ASSUMING CONTROL OF THE HARDWARE VECTORS.
                      (       assist.asm):00228         ;* NOTE THAT THE WORK RAM PAGE MUST BE 'RAMOFS'
                      (       assist.asm):00229         ;* FROM THE ROM BEGINNING ADDRESS.
                      (       assist.asm):00230         ;********************************************
                      (       assist.asm):00231                 ORG     ROMBEG                            ; ROM ASSEMBLY/DEFAULT ADDRESS
                      (       assist.asm):00232                 SPC     3
                      (       assist.asm):00233         ;*****************************************************
                      (       assist.asm):00234         ;*            BLDVTR - BUILD ASSIST09 VECTOR TABLE
                      (       assist.asm):00235         ;*  HARDWARE RESET CALLS THIS SUBROUTINE TO BUILD THE
                      (       assist.asm):00236         ;*  ASSIST09 VECTOR TABLE.  THIS SUBROUTINE RESIDES AT
                      (       assist.asm):00237         ;*  THE FIRST BYTE OF THE ASSIST09 ROM, AND CAN BE
                      (       assist.asm):00238         ;*  CALLED VIA EXTERNAL CONTROL CODE FOR REMOTE
                      (       assist.asm):00239         ;*  ASSIST09 EXECUTION.
                      (       assist.asm):00240         ;* INPUT: S->VALID STACK RAM
                      (       assist.asm):00241         ;* OUTPUT: U->VECTOR TABLE ADDRESS
                      (       assist.asm):00242         ;*         DPR->ASSIST09 WORK AREA PAGE
                      (       assist.asm):00243         ;*         THE VECTOR TABLE AND DEFAULTS ARE INITIALIZED
                      (       assist.asm):00244         ;*  ALL REGISTERS VOLATILE
                      (       assist.asm):00245         ;*************************************************
                      (       assist.asm):00246                 SPC     1
F800                  (       assist.asm):00247         BLDVTR
F800 308DE7BE         (       assist.asm):00248                 LEAX    VECTAB,PCR                        ; ADDRESS VECTOR TABLE
F804 1F10             (       assist.asm):00249                 TFR     X,D                               ; OBTAIN BASE PAGE ADDRESS
F806 1F8B             (       assist.asm):00250                 TFR     A,DP                              ; SETUP DPR
F808 979D             (       assist.asm):00251                 STA     <BASEPG                           ; STORE FOR QUICK REFERENCE
F80A 3384             (       assist.asm):00252                 LEAU    ,X                                ; RETURN TABLE TO CALLER
F80C 318C32           (       assist.asm):00253                 LEAY    <INITVT,PCR                       ; LOAD FROM ADDR
F80F EF81             (       assist.asm):00254                 STU     ,X++                              ; INIT VECTOR TABLE ADDRESS
F811 C616             (       assist.asm):00255                 LDB     #NUMVTR-5                         ; NUMBER RELOCATABLE VECTORS
F813 3404             (       assist.asm):00256                 PSHS    B                                 ; STORE INDEX ON STACK
F815                  (       assist.asm):00257         BLD2
F815 1F20             (       assist.asm):00258                 TFR     Y,D                               ; PREPARE ADDRESS RESOLVE
F817 E3A1             (       assist.asm):00259                 ADDD    ,Y++                              ; TO ABSOLUTE ADDRESS
F819 ED81             (       assist.asm):00260                 STD     ,X++                              ; INTO VECTOR TABLE
F81B 6AE4             (       assist.asm):00261                 DEC     ,S                                ; COUNT DOWN
F81D 26F6             (       assist.asm):00262                 BNE     BLD2                              ; BRANCH IF MORE TO INSERT
F81F C60D             (       assist.asm):00263                 LDB     #INTVE-INTVS                      ; STATIC VALUE INIT LENGTH
F821                  (       assist.asm):00264         BLD3
F821 A6A0             (       assist.asm):00265                 LDA     ,Y+                               ; LOAD NEXT BYTE
F823 A780             (       assist.asm):00266                 STA     ,X+                               ; STORE INTO POSITION
F825 5A               (       assist.asm):00267                 DECB                                      ; COUNT DOWN
F826 26F9             (       assist.asm):00268                 BNE     BLD3                              ; LOOP UNTIL DONE
                      (       assist.asm):00269         ;* commented out, N8VEM has no extension rom
                      (       assist.asm):00270         ;* LEAY ROM2OF,PCR TEST POSSIBLE EXTENSION ROM
                      (       assist.asm):00271         ;* LDX #$20FE LOAD "BRA ;*" FLAG PATTERN
                      (       assist.asm):00272         ;* CMPX ,Y++ ? EXTENDED ROM HERE
                      (       assist.asm):00273         ;* BNE BLDRTN BRANCH NOT OUR ROM TO RETURN
                      (       assist.asm):00274         ;* JSR ,Y CALL EXTENDED ROM INITIALIZE
F828                  (       assist.asm):00275         BLDRTN
F828 3584             (       assist.asm):00276                 PULS    PC,B                              ; RETURN TO INITIALIZER
                      (       assist.asm):00277                 SPC     3
                      (       assist.asm):00278         ;*****************************************************
                      (       assist.asm):00279         ;*                 RESET ENTRY POINT
                      (       assist.asm):00280         ;*  HARDWARE RESET ENTERS HERE IF ASSIST09 IS ENABLED
                      (       assist.asm):00281         ;*  TO RECEIVE THE MC6809 HARDWARE VECTORS.  WE CALL
                      (       assist.asm):00282         ;*  THE BLDVTR SUBROUTINE TO INITIALIZE THE VECTOR
                      (       assist.asm):00283         ;*  TABLE, STACK, AND THEN FIREUP THE MONITOR VIA SWI
                      (       assist.asm):00284         ;*  CALL.
                      (       assist.asm):00285         ;*******************************************************
F82A                  (       assist.asm):00286         RESET
F82A 328DE723         (       assist.asm):00287                 LEAS    STACK,PCR                         ;  SETUP INITIAL STACK
F82E 8DD0             (       assist.asm):00288                 BSR     BLDVTR                            ; BUILD VECTOR TABLE
F830                  (       assist.asm):00289         RESET2
F830 4F               (       assist.asm):00290                 CLRA                                      ; ISSUE STARTUP MESSAGE
F831 1F8B             (       assist.asm):00291                 TFR     A,DP                              ; DEFAULT TO PAGE ZERO
F833 F6ED00           (       assist.asm):00292                 LDB     $ED00
F836 C502             (       assist.asm):00293                 BITB    #%00000010                        ;pd1
F838 2603             (       assist.asm):00294                 BNE     ci1
F83A 7EFC3D           (       assist.asm):00295                 JMP     CFLEX
                      (       assist.asm):00296         
F83D                  (       assist.asm):00297         ci1
F83D 3F               (       assist.asm):00298                 SWI                                       ; PERFORM MONITOR FIREUP
F83E 08               (       assist.asm):00299                 FCB     MONITR                            ; TO ENTER COMMAND PROCESSING
F83F 20EF             (       assist.asm):00300                 BRA     RESET2                            ; REENTER MONITOR IF 'CONTINUE'
                      (       assist.asm):00301                 SPC     3
                      (       assist.asm):00302         ;******************************************************
                      (       assist.asm):00303         ;*         INITVT - INITIAL VECTOR TABLE
                      (       assist.asm):00304         ;*  THIS TABLE IS RELOCATED TO RAM AND REPRESENTS THE
                      (       assist.asm):00305         ;*  INITIAL STATE OF THE VECTOR TABLE. ALL ADDRESSES
                      (       assist.asm):00306         ;*  ARE CONVERTED TO ABSOLUTE FORM.  THIS TABLE STARTS
                      (       assist.asm):00307         ;*  WITH THE SECOND ENTRY, ENDS WITH STATIC CONSTANT
                      (       assist.asm):00308         ;*  INITIALIZATION DATA WHICH CARRIES BEYOND THE TABLE.
                      (       assist.asm):00309         ;************************************************
F841                  (       assist.asm):00310         INITVT
F841 0158             (       assist.asm):00311                 FDB     CMDTBL-*                          ; DEFAULT FIRST COMMAND TABLE
F843 0296             (       assist.asm):00312                 FDB     RSRVDR-*                          ; DEFAULT UNDEFINED HARDWARE VECTOR
F845 0294             (       assist.asm):00313                 FDB     SWI3R-*                           ; DEFAULT SWI3
F847 0292             (       assist.asm):00314                 FDB     SWI2R-*                           ; DEFAULT SWI2
F849 0274             (       assist.asm):00315                 FDB     FIRQR-*                           ; DEFAULT FIRQ
F84B 028E             (       assist.asm):00316                 FDB     IRQR-*                            ; DEFAULT IRQ ROUTINE
F84D 0045             (       assist.asm):00317                 FDB     SWIR-*                            ; DEFAULT SWI ROUTINE
F84F 022F             (       assist.asm):00318                 FDB     NMIR-*                            ; DEFAULT NMI ROUTINE
F851 FFD9             (       assist.asm):00319                 FDB     RESET-*                           ; RESTART VECTOR
F853 0298             (       assist.asm):00320                 FDB     CION-*                            ; DEFAULT CION
F855 0288             (       assist.asm):00321                 FDB     CIDTA-*                           ; DEFAULT CIDTA
F857 02A1             (       assist.asm):00322                 FDB     CIOFF-*                           ; DEFAULT CIOFF
F859 0292             (       assist.asm):00323                 FDB     COON-*                            ; DEFAULT COON
F85B 029E             (       assist.asm):00324                 FDB     CODTA-*                           ; DEFAULT CODTA
F85D 029B             (       assist.asm):00325                 FDB     COOFF-*                           ; DEFAULT COOFF
F85F 0390             (       assist.asm):00326                 FDB     HSDTA-*                           ; DEFAULT HSDTA
F861 02AD             (       assist.asm):00327                 FDB     BSON-*                            ; DEFAULT BSON
F863 02C8             (       assist.asm):00328                 FDB     BSDTA-*                           ; DEFAULT BSDTA
F865 02B5             (       assist.asm):00329                 FDB     BSOFF-*                           ; DEFAULT BSOFF
F867 E795             (       assist.asm):00330                 FDB     PAUSER-*                          ; DEFAULT PAUSE ROUTINE
F869 0476             (       assist.asm):00331                 FDB     EXP1-*                            ; DEFAULT EXPRESSION ANALYZER
F86B 012D             (       assist.asm):00332                 FDB     CMDTB2-*                          ; DEFAULT SECOND COMMAND TABLE
                      (       assist.asm):00333         ;* CONSTANTS
F86D                  (       assist.asm):00334         INTVS
F86D EF04             (       assist.asm):00335                 FDB     ACIA                              ; DEFAULT ACIA
F86F 0000             (       assist.asm):00336                 FCB     DFTCHP,DFTNLP                     ; DEFAULT NULL PADDS
F871 0000             (       assist.asm):00337                 FDB     0                                 ; DEFAULT ECHO
F873 E808             (       assist.asm):00338                 FDB     PTM                               ; DEFAULT PTM
F875 0000             (       assist.asm):00339                 FDB     0                                 ; INITIAL STACK TRACE LEVEL
F877 00               (       assist.asm):00340                 FCB     0                                 ; INITIAL BREAKPOINT COUNT
F878 00               (       assist.asm):00341                 FCB     0                                 ; SWI BREAKPOINT LEVEL
F879 39               (       assist.asm):00342                 FCB     $39                               ; DEFAULT PAUSE ROUTINE (RTS)
     F87A             (       assist.asm):00343         INTVE           EQU *
                      (       assist.asm):00344         ;*B
                      (       assist.asm):00345                 SPC     3
                      (       assist.asm):00346         ;***********************************************
                      (       assist.asm):00347         ;*             ASSIST09 SWI HANDLER
                      (       assist.asm):00348         ;*  THE SWI HANDLER PROVIDES ALL INTERFACING NECESSARY
                      (       assist.asm):00349         ;*  FOR A USER PROGRAM.  A FUNCTION BYTE IS ASSUMED TO
                      (       assist.asm):00350         ;*  FOLLOW THE SWI INSTRUCTION.  IT IS BOUND CHECKED
                      (       assist.asm):00351         ;*  AND THE PROPER ROUTINE IS GIVEN CONTROL.  THIS
                      (       assist.asm):00352         ;*  INVOCATION MAY ALSO BE A BREAKPOINT INTERRUPT.
                      (       assist.asm):00353         ;*  IF SO, THE BREAKPOINT HANDLER IS ENTERED.
                      (       assist.asm):00354         ;* INPUT: MACHINE STATE DEFINED FOR SWI
                      (       assist.asm):00355         ;* OUTPUT: VARIES ACCORDING TO FUNCTION CALLED. PC ON
                      (       assist.asm):00356         ;*     CALLERS STACK INCREMENTED BY ONE IF VALID CALL.
                      (       assist.asm):00357         ;* VOLATILE REGISTERS: SEE FUNCTIONS CALLED
                      (       assist.asm):00358         ;* STATE: RUNS DISABLED UNLESS FUNCTION CLEARS I FLAG.
                      (       assist.asm):00359         ;************************************************
                      (       assist.asm):00360                 SPC     1
                      (       assist.asm):00361         ;* SWI FUNCTION VECTOR TABLE
F87A                  (       assist.asm):00362         SWIVTB
F87A 0198             (       assist.asm):00363                 FDB     ZINCH-SWIVTB                      ; INCHNP
F87C 01B5             (       assist.asm):00364                 FDB     ZOTCH1-SWIVTB                     ; OUTCH
F87E 01CF             (       assist.asm):00365                 FDB     ZPDTA1-SWIVTB                     ; PDATA1
F880 01C7             (       assist.asm):00366                 FDB     ZPDATA-SWIVTB                     ; PDATA
F882 0179             (       assist.asm):00367                 FDB     ZOT2HS-SWIVTB                     ; OUT2HS
F884 0177             (       assist.asm):00368                 FDB     ZOT4HS-SWIVTB                     ; OUT4HS
F886 01C4             (       assist.asm):00369                 FDB     ZPCRLF-SWIVTB                     ; PCRLF
F888 017D             (       assist.asm):00370                 FDB     ZSPACE-SWIVTB                     ; SPACE
F88A 0055             (       assist.asm):00371                 FDB     ZMONTR-SWIVTB                     ; MONITR
F88C 0181             (       assist.asm):00372                 FDB     ZVSWTH-SWIVTB                     ; VCTRSW
F88E 025A             (       assist.asm):00373                 FDB     ZBKPNT-SWIVTB                     ; BREAKPOINT
F890 01D5             (       assist.asm):00374                 FDB     ZPAUSE-SWIVTB                     ; TASK PAUSE
                      (       assist.asm):00375                 SPC     2
F892                  (       assist.asm):00376         SWIR
F892 6A8DE6FA         (       assist.asm):00377                 DEC     SWICNT,PCR                        ; UP "SWI" LEVEL FOR TRACE
F896 170229           (       assist.asm):00378                 LBSR    LDDP                              ; SETUP PAGE AND VERIFY STACK
                      (       assist.asm):00379         ;* CHECK FOR BREAKPOINT TRAP
F899 EE6A             (       assist.asm):00380                 LDU     10,S                              ; LOAD PROGRAM COUNTER
F89B 335F             (       assist.asm):00381                 LEAU    -1,U                              ; BACK TO SWI ADDRESS
F89D 0DFB             (       assist.asm):00382                 TST     <SWIBFL                           ; ? THIS "SWI" BREAKPOINT
F89F 2611             (       assist.asm):00383                 BNE     SWIDNE                            ; BRANCH IF SO TO LET THROUGH
F8A1 170693           (       assist.asm):00384                 LBSR    CBKLDR                            ; OBTAIN BREAKPOINT POINTERS
F8A4 50               (       assist.asm):00385                 NEGB                                      ; OBTAIN POSITIVE COUNT
F8A5                  (       assist.asm):00386         SWILP
F8A5 5A               (       assist.asm):00387                 DECB                                      ; DOWN
F8A6 2B0A             (       assist.asm):00388                 BMI     SWIDNE                            ; BRANCH WHEN DONE
F8A8 11A3A1           (       assist.asm):00389                 CMPU    ,Y++                              ; ? WAS THIS A BREAKPOINT
F8AB 26F8             (       assist.asm):00390                 BNE     SWILP                             ; BRANCH IF NOT
F8AD EF6A             (       assist.asm):00391                 STU     10,S                              ; SET PROGRAM COUNTER BACK
F8AF 160222           (       assist.asm):00392                 LBRA    ZBKPNT                            ; GO DO BREAKPOINT
F8B2                  (       assist.asm):00393         SWIDNE
F8B2 0FFB             (       assist.asm):00394                 CLR     <SWIBFL                           ; CLEAR IN CASE SET
F8B4 3706             (       assist.asm):00395                 PULU    D                                 ; OBTAIN FUNCTION BYTE, UP PC
F8B6 C10B             (       assist.asm):00396                 CMPB    #NUMFUN                           ; ? TOO HIGH
F8B8 10220213         (       assist.asm):00397                 LBHI    ERROR                             ; YES, DO BREAKPOINT
F8BC EF6A             (       assist.asm):00398                 STU     10,S                              ; BUMP PROGRAM COUNTER PAST SWI
F8BE 58               (       assist.asm):00399                 ASLB                                      ; FUNCTION CODE TIMES TWO
F8BF 338CB8           (       assist.asm):00400                 LEAU    SWIVTB,PCR                        ; OBTAIN VECTOR BRANCH ADDRESS
F8C2 ECC5             (       assist.asm):00401                 LDD     B,U                               ; LOAD OFFSET
F8C4 6ECB             (       assist.asm):00402                 JMP     D,U                               ; JUMP TO ROUTINE
                      (       assist.asm):00403                 SPC     1
                      (       assist.asm):00404         ;**********************************************
                      (       assist.asm):00405         ;* REGISTERS TO FUNCTION ROUTINES:
                      (       assist.asm):00406         ;*  DP-> WORK AREA PAGE
                      (       assist.asm):00407         ;*  D,Y,U=UNRELIABLE           X=AS CALLED FROM USER
                      (       assist.asm):00408         ;*  S=AS FROM SWI INTERRUPT
                      (       assist.asm):00409         ;*********************************************
                      (       assist.asm):00410                 SPC     3
                      (       assist.asm):00411         ;**************************************************
                      (       assist.asm):00412         ;*            [SWI FUNCTION 8]
                      (       assist.asm):00413         ;*              MONITOR ENTRY
                      (       assist.asm):00414         ;*  FIREUP THE ASSIST09 MONITOR.
                      (       assist.asm):00415         ;*  THE STACK WITH ITS VALUES FOR THE DIRECT PAGE
                      (       assist.asm):00416         ;*  REGISTER AND CONDITION CODE FLAGS ARE USED AS IS.
                      (       assist.asm):00417         ;*   1) INITIALIZE CONSOLE I/O
                      (       assist.asm):00418         ;*   2) OPTIONALLY PRINT SIGNON
                      (       assist.asm):00419         ;*   3) INITIALIZE PTM FOR SINGLE STEPPING
                      (       assist.asm):00420         ;*   4) ENTER COMMAND PROCESSOR
                      (       assist.asm):00421         ;* INPUT: A=0 INIT CONSOLE AND PRINT STARTUP MESSAGE
                      (       assist.asm):00422         ;*        A#0 OMIT CONSOLE INIT AND STARTUP MESSAGE
                      (       assist.asm):00423         ;*************************************************
                      (       assist.asm):00424                 SPC     1
F8C6                  (       assist.asm):00425         SIGNON
F8C6 4153534953543039 (       assist.asm):00426                 FCC     /ASSIST09/                        ; SIGNON EYE-CATCHER
F8CE 04               (       assist.asm):00427                 FCB     EOT
                      (       assist.asm):00428                 SPC     1
F8CF                  (       assist.asm):00429         ZMONTR
F8CF 10DF97           (       assist.asm):00430                 STS     <RSTACK                           ; SAVE FOR BAD STACK RECOVERY
F8D2 6D61             (       assist.asm):00431                 TST     1,S                               ; ? INIT CONSOLE AND SEND MSG
F8D4 260D             (       assist.asm):00432                 BNE     ZMONT2                            ; BRANCH IF NOT
F8D6 AD9DE6FC         (       assist.asm):00433                 JSR     [VECTAB+.CION,PCR]                ; READY CONSOLE INPUT
F8DA AD9DE6FE         (       assist.asm):00434                 JSR     [VECTAB+.COON,PCR]                ; READY CONSOLE OUTPUT
F8DE 308CE5           (       assist.asm):00435                 LEAX    SIGNON,PCR                        ; READY SIGNON EYE-CATCHER
F8E1 3F               (       assist.asm):00436                 SWI     PERFORM
F8E2 03               (       assist.asm):00437                 FCB     PDATA                             ; PRINT STRING
F8E3                  (       assist.asm):00438         ZMONT2
F8E3 9EF6             (       assist.asm):00439                 LDX     <VECTAB+.PTM                      ; LOAD PTM ADDRESS
F8E5 270D             (       assist.asm):00440                 BEQ     CMD                               ; BRANCH IF NOT TO USE A PTM
F8E7 6F02             (       assist.asm):00441                 CLR     PTMTM1-PTM,X                      ; SET LATCH TO CLEAR RESET
F8E9 6F03             (       assist.asm):00442                 CLR     PTMTM1+1-PTM,X                    ; AND SET GATE HIGH
F8EB CC01A6           (       assist.asm):00443                 LDD     #$01A6                            ; SETUP TIMER 1 MODE
F8EE A701             (       assist.asm):00444                 STA     PTMC2-PTM,X                       ; SETUP FOR CONTROL REGISTER1
F8F0 E784             (       assist.asm):00445                 STB     PTMC13-PTM,X                      ; SET OUTPUT ENABLED/
                      (       assist.asm):00446         ;*    SINGLE SHOT/ DUAL 8 BIT/INTERNAL MODE/OPERATE
F8F2 6F01             (       assist.asm):00447                 CLR     PTMC2-PTM,X                       ; SET CR2 BACK TO RESET FORM
                      (       assist.asm):00448         ;* FALL INTO COMMAND PROCESSOR
                      (       assist.asm):00449                 SPC     3
                      (       assist.asm):00450         ;***************************************************
                      (       assist.asm):00451         ;*          COMMAND HANDLER
                      (       assist.asm):00452         ;*  BREAKPOINTS ARE REMOVED AT THIS TIME.
                      (       assist.asm):00453         ;*  PROMPT FOR A COMMAND, AND STORE ALL CHARACTERS
                      (       assist.asm):00454         ;*  UNTIL A SEPARATOR ON THE STACK.
                      (       assist.asm):00455         ;*  SEARCH FOR FIRST MATCHING COMMAND SUBSET,
                      (       assist.asm):00456         ;*  CALL IT OR GIVE '?' RESPONSE.
                      (       assist.asm):00457         ;*  DURING COMMAND SEARCH:
                      (       assist.asm):00458         ;*      B=OFFSET TO NEXT ENTRY ON X
                      (       assist.asm):00459         ;*      U=SAVED S
                      (       assist.asm):00460         ;*      U-1=ENTRY SIZE+2
                      (       assist.asm):00461         ;*      U-2=VALID NUMBER FLAG (>=0 VALID)/COMPARE CNT
                      (       assist.asm):00462         ;*      U-3=CARRIAGE RETURN FLAG (0=CR HAS BEEN DONE)
                      (       assist.asm):00463         ;*      U-4=START OF COMMAND STORE
                      (       assist.asm):00464         ;*      S+0=END OF COMMAND STORE
                      (       assist.asm):00465         ;***********************************************
F8F4                  (       assist.asm):00466         CMD
F8F4 3F               (       assist.asm):00467                 SWI                                       ; TO NEW LINE
F8F5 06               (       assist.asm):00468                 FCB     PCRLF                             ; FUNCTION
                      (       assist.asm):00469         ;* DISARM THE BREAKPOINTS
F8F6                  (       assist.asm):00470         CMDNEP
F8F6 17063E           (       assist.asm):00471                 LBSR    CBKLDR                            ; OBTAIN BREAKPOINT POINTERS
F8F9 2A0C             (       assist.asm):00472                 BPL     CMDNOL                            ; BRANCH IF NOT ARMED OR NONE
F8FB 50               (       assist.asm):00473                 NEGB                                      ; MAKE POSITIVE
F8FC D7FA             (       assist.asm):00474                 STB     <BKPTCT                           ; FLAG AS DISARMED
F8FE                  (       assist.asm):00475         CMDDDL
F8FE 5A               (       assist.asm):00476                 DECB                                      ; ? FINISHED
F8FF 2B06             (       assist.asm):00477                 BMI     CMDNOL                            ; BRANCH IF SO
F901 A630             (       assist.asm):00478                 LDA     -NUMBKP*2,Y                       ; LOAD OPCODE STORED
F903 A7B1             (       assist.asm):00479                 STA     [,Y++]                            ; STORE BACK OVER "SWI"
F905 20F7             (       assist.asm):00480                 BRA     CMDDDL                            ; LOOP UNTIL DONE
F907                  (       assist.asm):00481         CMDNOL
F907 AE6A             (       assist.asm):00482                 LDX     10,S                              ; LOAD USERS PROGRAM COUNTER
F909 9F93             (       assist.asm):00483                 STX     <PCNTER                           ; SAVE FOR EXPRESSION ANALYZER
F90B 863E             (       assist.asm):00484                 LDA     #PROMPT                           ; LOAD PROMPT CHARACTER
F90D 3F               (       assist.asm):00485                 SWI                                       ; SEND TO OUTPUT HANDLER
F90E 01               (       assist.asm):00486                 FCB     OUTCH                             ; FUNCTION
F90F 33E4             (       assist.asm):00487                 LEAU    ,S                                ; REMEMBER STACK RESTORE ADDRESS
F911 DF95             (       assist.asm):00488                 STU     <PSTACK                           ; REMEMBER STACK FOR ERROR USE
F913 4F               (       assist.asm):00489                 CLRA                                      ; PREPARE ZERO
F914 5F               (       assist.asm):00490                 CLRB                                      ; PREPARE ZERO
F915 DD9B             (       assist.asm):00491                 STD     <NUMBER                           ; CLEAR NUMBER BUILD AREA
F917 DD8F             (       assist.asm):00492                 STD     <MISFLG                           ; CLEAR MISCEL. AND SWICNT FLAGS
F919 DD91             (       assist.asm):00493                 STD     <TRACEC                           ; CLEAR TRACE COUNT
F91B C602             (       assist.asm):00494                 LDB     #2                                ; SET D TO TWO
F91D 3407             (       assist.asm):00495                 PSHS    D,CC                              ; PLACE DEFAULTS ONTO STACK
                      (       assist.asm):00496         ;* CHECK FOR "QUICK" COMMANDS.
F91F 17044D           (       assist.asm):00497                 LBSR    READ                              ; OBTAIN FIRST CHARACTER
F922 308D057A         (       assist.asm):00498                 LEAX    CDOT+2,PCR                        ; PRESET FOR SINGLE TRACE
F926 812E             (       assist.asm):00499                 CMPA    #'.'                              ; ? QUICK TRACE
F928 275A             (       assist.asm):00500                 BEQ     CMDXQT                            ; BRANCH EQUAL FOR TRACE ONE
F92A 308D04E2         (       assist.asm):00501                 LEAX    CMPADP+2,PCR                      ; READY MEMORY ENTRY POINT
F92E 812F             (       assist.asm):00502                 CMPA    #'/'                              ;  ? OPEN LAST USED MEMORY
F930 2752             (       assist.asm):00503                 BEQ     CMDXQT                            ; BRANCH TO DO IT IF SO
                      (       assist.asm):00504         ;* PROCESS NEXT CHARACTER
F932                  (       assist.asm):00505         CMD2
F932 8120             (       assist.asm):00506                 CMPA    #' '                              ; ? BLANK OR DELIMITER
F934 2314             (       assist.asm):00507                 BLS     CMDGOT                            ; BRANCH YES, WE HAVE IT
F936 3402             (       assist.asm):00508                 PSHS    A                                 ; BUILD ONTO STACK
F938 6C5F             (       assist.asm):00509                 INC     -1,U                              ; COUNT THIS CHARACTER
F93A 812F             (       assist.asm):00510                 CMPA    #'/'                              ;  ? MEMORY COMMAND
F93C 274F             (       assist.asm):00511                 BEQ     CMDMEM                            ; BRANCH IF SO
F93E 170404           (       assist.asm):00512                 LBSR    BLDHXC                            ; TREAT AS HEX VALUE
F941 2702             (       assist.asm):00513                 BEQ     CMD3                              ; BRANCH IF STILL VALID NUMBER
F943 6A5E             (       assist.asm):00514                 DEC     -2,U                              ; FLAG AS INVALID NUMBER
F945                  (       assist.asm):00515         CMD3
F945 170427           (       assist.asm):00516                 LBSR    READ                              ; OBTAIN NEXT CHARACTER
F948 20E8             (       assist.asm):00517                 BRA     CMD2                              ; TEST NEXT CHARACTER
                      (       assist.asm):00518         ;* GOT COMMAND, NOW SEARCH TABLES
F94A                  (       assist.asm):00519         CMDGOT
F94A 800D             (       assist.asm):00520                 SUBA    #CR                               ; SET ZERO IF CARRIAGE RETURN
F94C A75D             (       assist.asm):00521                 STA     -3,U                              ; SETUP FLAG
F94E 9EC4             (       assist.asm):00522                 LDX     <VECTAB+.CMDL1                    ; START WITH FIRST CMD LIST
F950                  (       assist.asm):00523         CMDSCH
F950 E680             (       assist.asm):00524                 LDB     ,X+                               ; LOAD ENTRY LENGTH
F952 2A10             (       assist.asm):00525                 BPL     CMDSME                            ; BRANCH IF NOT LIST END
F954 9EEE             (       assist.asm):00526                 LDX     <VECTAB+.CMDL2                    ; NOW TO SECOND CMD LIST
F956 5C               (       assist.asm):00527                 INCB                                      ; ? TO CONTINUE TO DEFAULT LIST
F957 27F7             (       assist.asm):00528                 BEQ     CMDSCH                            ; BRANCH IF SO
F959                  (       assist.asm):00529         CMDBAD
F959 10DE95           (       assist.asm):00530                 LDS     <PSTACK                           ; RESTORE STACK
F95C 308D015E         (       assist.asm):00531                 LEAX    ERRMSG,PCR                        ; POINT TO ERROR STRING
F960 3F               (       assist.asm):00532                 SWI                                       ; SEND OUT
F961 02               (       assist.asm):00533                 FCB     PDATA1                            ; TO CONSOLE
F962 2090             (       assist.asm):00534                 BRA     CMD                               ; AND TRY AGAIN
                      (       assist.asm):00535         ;* SEARCH NEXT ENTRY
F964                  (       assist.asm):00536         CMDSME
F964 5A               (       assist.asm):00537                 DECB                                      ; TAKE ACCOUNT OF LENGTH BYTE
F965 E15F             (       assist.asm):00538                 CMPB    -1,U                              ; ? ENTERED LONGER THAN ENTRY
F967 2403             (       assist.asm):00539                 BHS     CMDSIZ                            ; BRANCH IF NOT TOO LONG
F969                  (       assist.asm):00540         CMDFLS
F969 3A               (       assist.asm):00541                 ABX                                       ; SKIP TO NEXT ENTRY
F96A 20E4             (       assist.asm):00542                 BRA     CMDSCH                            ; AND TRY NEXT
F96C                  (       assist.asm):00543         CMDSIZ
F96C 315D             (       assist.asm):00544                 LEAY    -3,U                              ; PREPARE TO COMPARE
F96E A65F             (       assist.asm):00545                 LDA     -1,U                              ; LOAD SIZE+2
F970 8002             (       assist.asm):00546                 SUBA    #2                                ; TO ACTUAL SIZE ENTERED
F972 A75E             (       assist.asm):00547                 STA     -2,U                              ; SAVE SIZE FOR COUNTDOWN
F974                  (       assist.asm):00548         CMDCMP
F974 5A               (       assist.asm):00549                 DECB                                      ; DOWN ONE BYTE
F975 A680             (       assist.asm):00550                 LDA     ,X+                               ; NEXT COMMAND CHARACTER
F977 A1A2             (       assist.asm):00551                 CMPA    ,-Y                               ; ? SAME AS THAT ENTERED
F979 26EE             (       assist.asm):00552                 BNE     CMDFLS                            ; BRANCH TO FLUSH  IF NOT
F97B 6A5E             (       assist.asm):00553                 DEC     -2,U                              ; COUNT DOWN LENGTH OF ENTRY
F97D 26F5             (       assist.asm):00554                 BNE     CMDCMP                            ; BRANCH IF MORE TO TEST
F97F 3A               (       assist.asm):00555                 ABX                                       ; TO NEXT ENTRY
F980 EC1E             (       assist.asm):00556                 LDD     -2,X                              ; LOAD OFFSET
F982 308B             (       assist.asm):00557                 LEAX    D,X                               ; COMPUTE ROUTINE ADDRESS+2
F984                  (       assist.asm):00558         CMDXQT
F984 6D5D             (       assist.asm):00559                 TST     -3,U                              ; SET CC FOR CARRIAGE RETURN TEST
F986 32C4             (       assist.asm):00560                 LEAS    ,U                                ; DELETE STACK WORK AREA
F988 AD1E             (       assist.asm):00561                 JSR     -2,X CALL COMMAND
F98A 16FF7A           (       assist.asm):00562                 LBRA    CMDNOL                            ;  GO GET NEXT COMMAND
F98D                  (       assist.asm):00563         CMDMEM
F98D 6D5E             (       assist.asm):00564                 TST     -2,U                              ; ? VALID HEX NUMBER ENTERED
F98F 2BC8             (       assist.asm):00565                 BMI     CMDBAD                            ; BRANCH ERROR IF NOT
F991 3088AE           (       assist.asm):00566                 LEAX    <CMEMN-CMPADP,X                   ; TO DIFFERENT ENTRY
F994 DC9B             (       assist.asm):00567                 LDD     <NUMBER                           ; LOAD NUMBER ENTERED
F996 20EC             (       assist.asm):00568                 BRA     CMDXQT                            ; AND ENTER MEMORY COMMAND
                      (       assist.asm):00569                 SPC     1
                      (       assist.asm):00570         ;** COMMANDS ARE ENTERED AS A SUBROUTINE WITH:
                      (       assist.asm):00571         ;**    DPR->ASSIST09 DIRECT PAGE WORK AREA
                      (       assist.asm):00572         ;**    Z=1 CARRIAGE RETURN ENTERED
                      (       assist.asm):00573         ;**    Z=0 NON CARRIAGE RETURN DELIMITER
                      (       assist.asm):00574         ;**    S=NORMAL RETURN ADDRESS
                      (       assist.asm):00575         ;** THE LABEL "CMDBAD" MAY BE ENTERED TO ISSUE AN
                      (       assist.asm):00576         ;** AN ERROR FLAG (;*).
                      (       assist.asm):00577                 SPC     3
                      (       assist.asm):00578         ;**************************************************
                      (       assist.asm):00579         ;*        ASSIST09 COMMAND TABLES
                      (       assist.asm):00580         ;*  THESE ARE THE DEFAULT COMMAND TABLES.  EXTERNAL
                      (       assist.asm):00581         ;*  TABLES OF THE SAME FORMAT MAY EXTEND/REPLACE
                      (       assist.asm):00582         ;*  THESE BY USING THE VECTOR SWAP FUNCTION.
                      (       assist.asm):00583         ;*
                      (       assist.asm):00584         ;* ENTRY FORMAT:
                      (       assist.asm):00585         ;*     +0...TOTAL SIZE OF ENTRY (INCLUDING THIS BYTE)
                      (       assist.asm):00586         ;*     +1...COMMAND STRING
                      (       assist.asm):00587         ;*     +N...TWO BYTE OFFSET TO COMMAND (ENTRYADDR-;*)
                      (       assist.asm):00588         ;*
                      (       assist.asm):00589         ;*  THE TABLES TERMINATE WITH A ONE BYTE -1 OR -2.
                      (       assist.asm):00590         ;*  THE -1 CONTINUES THE COMMAND SEARCH WITH THE
                      (       assist.asm):00591         ;*         SECOND COMMAND TABLE.
                      (       assist.asm):00592         ;*  THE -2 TERMINATES COMMAND SEARCHES.
                      (       assist.asm):00593         ;*****************************************************
                      (       assist.asm):00594                 SPC     1
                      (       assist.asm):00595         ;* THIS IS THE DEFAULT LIST FOR THE SECOND COMMAND
                      (       assist.asm):00596         ;* LIST ENTRY.
F998                  (       assist.asm):00597         CMDTB2
F998 FE               (       assist.asm):00598                 FCB     -2                                ; STOP COMMAND SEARCHES
                      (       assist.asm):00599                 SPC     1
                      (       assist.asm):00600         ;* THIS IS THE DEFAULT LIST FOR THE FIRST COMMAND
                      (       assist.asm):00601         ;* LIST ENTRY.
     F999             (       assist.asm):00602         CMDTBL          EQU *                             ; MONITOR COMMAND TABLE
F999 04               (       assist.asm):00603                 FCB     4
F99A 42               (       assist.asm):00604                 FCC     /B/                               ; 'BREAKPOINT' COMMAND
F99B 0546             (       assist.asm):00605                 FDB     CBKPT-*
F99D 04               (       assist.asm):00606                 FCB     4
F99E 43               (       assist.asm):00607                 FCC     /C/                               ; 'CALL' COMMAND
F99F 0410             (       assist.asm):00608                 FDB     CCALL-*
F9A1 04               (       assist.asm):00609                 FCB     4
F9A2 44               (       assist.asm):00610                 FCC     /D/                               ; 'DISPLAY' COMMAND
F9A3 0496             (       assist.asm):00611                 FDB     CDISP-*
F9A5 04               (       assist.asm):00612                 FCB     4
F9A6 45               (       assist.asm):00613                 FCC     /E/                               ; 'ENCODE' COMMAND
F9A7 0597             (       assist.asm):00614                 FDB     CENCDE-*
F9A9 04               (       assist.asm):00615                 FCB     4
F9AA 46               (       assist.asm):00616                 FCC     /F/                               ; 'FLEX' COMMAND
F9AB 0292             (       assist.asm):00617                 FDB     CFLEX-*
F9AD 04               (       assist.asm):00618                 FCB     4
F9AE 47               (       assist.asm):00619                 FCC     /G/                               ; 'GO' COMMAND
F9AF 03C7             (       assist.asm):00620                 FDB     CGO-*
F9B1 04               (       assist.asm):00621                 FCB     4
F9B2 4C               (       assist.asm):00622                 FCC     /L/                               ; 'LOAD' COMMAND
F9B3 04D2             (       assist.asm):00623                 FDB     CLOAD-*
F9B5 04               (       assist.asm):00624                 FCB     4
F9B6 4D               (       assist.asm):00625                 FCC     /M/                               ; 'MEMORY' COMMAND
F9B7 0402             (       assist.asm):00626                 FDB     CMEM-*
F9B9 04               (       assist.asm):00627                 FCB     4
F9BA 4E               (       assist.asm):00628                 FCC     /N/                               ; 'NULLS' COMMAND
F9BB 04F2             (       assist.asm):00629                 FDB     CNULLS-*
F9BD 04               (       assist.asm):00630                 FCB     4
F9BE 4F               (       assist.asm):00631                 FCC     /O/                               ; 'OFFSET' COMMAND
F9BF 04FF             (       assist.asm):00632                 FDB     COFFS-*
F9C1 04               (       assist.asm):00633                 FCB     4
F9C2 50               (       assist.asm):00634                 FCC     /P/                               ; 'PUNCH' COMMAND
F9C3 04A4             (       assist.asm):00635                 FDB     CPUNCH-*
F9C5 04               (       assist.asm):00636                 FCB     4
F9C6 52               (       assist.asm):00637                 FCC     /R/                               ; 'REGISTERS' COMMAND
F9C7 0279             (       assist.asm):00638                 FDB     CREG-*
F9C9 04               (       assist.asm):00639                 FCB     4
F9CA 53               (       assist.asm):00640                 FCC     /S/                               ; 'STLEVEL' COMMAND
F9CB 04E7             (       assist.asm):00641                 FDB     CSTLEV-*
F9CD 04               (       assist.asm):00642                 FCB     4
F9CE 54               (       assist.asm):00643                 FCC     /T/                               ; 'TRACE' COMMAND
F9CF 04CB             (       assist.asm):00644                 FDB     CTRACE-*
F9D1 04               (       assist.asm):00645                 FCB     4
F9D2 56               (       assist.asm):00646                 FCC     /V/                               ; 'VERIFY' COMMAND
F9D3 04C4             (       assist.asm):00647                 FDB     CVER-*
F9D5 04               (       assist.asm):00648                 FCB     4
F9D6 57               (       assist.asm):00649                 FCC     /W/                               ; 'WINDOW' COMMAND
F9D7 045D             (       assist.asm):00650                 FDB     CWINDO-*
F9D9 FF               (       assist.asm):00651                 FCB     -1                                ; END, CONTINUE WITH THE SECOND
                      (       assist.asm):00652                 SPC     3
                      (       assist.asm):00653         ;*************************************************
                      (       assist.asm):00654         ;*             [SWI FUNCTIONS 4 AND 5]
                      (       assist.asm):00655         ;*      4 - OUT2HS - DECODE BYTE TO HEX AND ADD SPACE
                      (       assist.asm):00656         ;*      5 - OUT4HS - DECODE WORD TO HEX AND ADD SPACE
                      (       assist.asm):00657         ;* INPUT: X->BYTE OR WORD TO DECODE
                      (       assist.asm):00658         ;* OUTPUT: CHARACTERS SENT TO OUTPUT HANDLER
                      (       assist.asm):00659         ;*         X->NEXT BYTE OR WORD
                      (       assist.asm):00660         ;**************************************************
                      (       assist.asm):00661                 SPC     1
F9DA                  (       assist.asm):00662         ZOUT2H
F9DA A680             (       assist.asm):00663                 LDA     ,X+                               ; LOAD NEXT BYTE
F9DC 3406             (       assist.asm):00664                 PSHS    D                                 ; SAVE - DO NOT REREAD
F9DE C610             (       assist.asm):00665                 LDB     #16                               ; SHIFT BY 4 BITS
F9E0 3D               (       assist.asm):00666                 MUL                                       ; WITH MULTIPLY
F9E1 8D04             (       assist.asm):00667                 BSR     ZOUTHX                            ; SEND OUT AS HEX
F9E3 3506             (       assist.asm):00668                 PULS    D                                 ; RESTORE BYTES
F9E5 840F             (       assist.asm):00669                 ANDA    #$0F                              ; ISOLATE RIGHT HEX
F9E7                  (       assist.asm):00670         ZOUTHX
F9E7 8B90             (       assist.asm):00671                 ADDA    #$90                              ; PREPARE A-F ADJUST
F9E9 19               (       assist.asm):00672                 DAA                                       ; ADJUST
F9EA 8940             (       assist.asm):00673                 ADCA    #$40                              ; PREPARE CHARACTER BITS
F9EC 19               (       assist.asm):00674                 DAA                                       ; ADJUST
F9ED                  (       assist.asm):00675         SEND
F9ED 6E9DE5ED         (       assist.asm):00676                 JMP     [VECTAB+.CODTA,PCR]               ; SEND TO OUT HANDLER
                      (       assist.asm):00677                 SPC     1
F9F1                  (       assist.asm):00678         ZOT4HS
F9F1 8DE7             (       assist.asm):00679                 BSR     ZOUT2H                            ; CONVERT FIRST BYTE
F9F3                  (       assist.asm):00680         ZOT2HS
F9F3 8DE5             (       assist.asm):00681                 BSR     ZOUT2H                            ; CONVERT BYTE TO HEX
F9F5 AF64             (       assist.asm):00682                 STX     4,S                               ; UPDATE USERS X REGISTER
                      (       assist.asm):00683         ;* FALL INTO SPACE ROUTINE
                      (       assist.asm):00684                 SPC     3
                      (       assist.asm):00685         ;*************************************************
                      (       assist.asm):00686         ;*            [SWI FUNCTION 7]
                      (       assist.asm):00687         ;*         SPACE - SEND BLANK TO OUTPUT HANDLER
                      (       assist.asm):00688         ;* INPUT: NONE
                      (       assist.asm):00689         ;* OUTPUT: BLANK SEND TO CONSOLE HANDLER
                      (       assist.asm):00690         ;*************************************************
F9F7                  (       assist.asm):00691         ZSPACE
F9F7 8620             (       assist.asm):00692                 LDA     #' '                              ; LOAD BLANK
F9F9 203D             (       assist.asm):00693                 BRA     ZOTCH2                            ; SEND AND RETURN
                      (       assist.asm):00694                 SPC     3
                      (       assist.asm):00695         ;***********************************************
                      (       assist.asm):00696         ;*             [SWI FUNCTION 9]
                      (       assist.asm):00697         ;*          SWAP VECTOR TABLE ENTRY
                      (       assist.asm):00698         ;* INPUT: A=VECTOR TABLE CODE (OFFSET)
                      (       assist.asm):00699         ;*        X=0 OR REPLACEMENT VALUE
                      (       assist.asm):00700         ;* OUTPUT: X=PREVIOUS VALUE
                      (       assist.asm):00701         ;***********************************************
F9FB                  (       assist.asm):00702         ZVSWTH
F9FB A661             (       assist.asm):00703                 LDA     1,S                               ; LOAD REQUESTERS A
F9FD 8134             (       assist.asm):00704                 CMPA    #HIVTR                            ; ? SUB-CODE TOO HIGH
F9FF 2239             (       assist.asm):00705                 BHI     ZOTCH3                            ; IGNORE CALL IF SO
FA01 109EC2           (       assist.asm):00706                 LDY     <VECTAB+.AVTBL                    ; LOAD VECTOR TABLE ADDRESS
FA04 EEA6             (       assist.asm):00707                 LDU     A,Y                               ; U=OLD ENTRY
FA06 EF64             (       assist.asm):00708                 STU     4,S                               ; RETURN OLD VALUE TO CALLERS X
FA08 AF7E             (       assist.asm):00709                 STX     -2,S                              ; ? X=0
FA0A 272E             (       assist.asm):00710                 BEQ     ZOTCH3                            ; YES, DO NOT CHANGE ENTRY
FA0C AFA6             (       assist.asm):00711                 STX     A,Y                               ; REPLACE ENTRY
FA0E 202A             (       assist.asm):00712                 BRA     ZOTCH3                            ; RETURN FROM SWI
                      (       assist.asm):00713         ;*D
                      (       assist.asm):00714                 SPC     3
                      (       assist.asm):00715         ;************************************************
                      (       assist.asm):00716         ;*                    [SWI FUNCTION 0]
                      (       assist.asm):00717         ;*   INCHNP - OBTAIN INPUT CHAR IN A (NO PARITY)
                      (       assist.asm):00718         ;*  NULLS AND RUBOUTS ARE IGNORED.
                      (       assist.asm):00719         ;*  AUTOMATIC LINE FEED IS SENT UPON RECIEVING A
                      (       assist.asm):00720         ;*      CARRIAGE RETURN.
                      (       assist.asm):00721         ;*  UNLESS WE ARE LOADING FROM TAPE.
                      (       assist.asm):00722         ;************************************************
FA10                  (       assist.asm):00723         ZINCHP
FA10 8D5D             (       assist.asm):00724                 BSR     XQPAUS                            ; RELEASE PROCESSOR
FA12                  (       assist.asm):00725         ZINCH
FA12 8D5F             (       assist.asm):00726                 BSR     XQCIDT                            ; CALL INPUT DATA APPENDAGE
FA14 24FA             (       assist.asm):00727                 BCC     ZINCHP                            ; LOOP IF NONE AVAILABLE
FA16 4D               (       assist.asm):00728                 TSTA                                      ; ? TEST FOR NULL
FA17 27F9             (       assist.asm):00729                 BEQ     ZINCH                             ; IGNORE NULL
FA19 817F             (       assist.asm):00730                 CMPA    #$7F                              ; ? RUBOUT
FA1B 27F5             (       assist.asm):00731                 BEQ     ZINCH                             ; BRANCH YES TO IGNORE
FA1D A761             (       assist.asm):00732                 STA     1,S                               ; STORE INTO CALLERS A
FA1F 0D8F             (       assist.asm):00733                 TST     <MISFLG                           ; ? LOAD IN PROGRESS
FA21 2617             (       assist.asm):00734                 BNE     ZOTCH3                            ; BRANCH IF SO TO NOT ECHO
FA23 810D             (       assist.asm):00735                 CMPA    #CR                               ; ? CARRIAGE RETURN
FA25 2604             (       assist.asm):00736                 BNE     ZIN2                              ; NO, TEST ECHO BYTE
FA27 860A             (       assist.asm):00737                 LDA     #LF                               ; LOAD LINE FEED
FA29 8DC2             (       assist.asm):00738                 BSR     SEND                              ; ALWAYS ECHO LINE FEED
FA2B                  (       assist.asm):00739         ZIN2
FA2B 0DF4             (       assist.asm):00740                 TST     <VECTAB+.ECHO                     ; ? ECHO DESIRED
FA2D 260B             (       assist.asm):00741                 BNE     ZOTCH3                            ; NO, RETURN
                      (       assist.asm):00742         ;* FALL THROUGH TO OUTCH
                      (       assist.asm):00743                 SPC     3
                      (       assist.asm):00744         ;************************************************
                      (       assist.asm):00745         ;*              [SWI FUNCTION 1]
                      (       assist.asm):00746         ;*          OUTCH - OUTPUT CHARACTER FROM A
                      (       assist.asm):00747         ;*  INPUT:  NONE
                      (       assist.asm):00748         ;*  OUTPUT: IF LINEFEED IS THE OUTPUT CHARACTER THEN
                      (       assist.asm):00749         ;*           C=0 NO CTL-X RECIEVED, C=1 CTL-X RECIEVED
                      (       assist.asm):00750         ;************************************************
FA2F                  (       assist.asm):00751         ZOTCH1
FA2F A661             (       assist.asm):00752                 LDA     1,S                               ; LOAD CHARACTER TO SEND
FA31 308C09           (       assist.asm):00753                 LEAX    <ZPCRLS,PCR                       ; DEFAULT FOR LINE FEED
FA34 810A             (       assist.asm):00754                 CMPA    #LF                               ; ? LINE FEED
FA36 270F             (       assist.asm):00755                 BEQ     ZPDTLP                            ; BRANCH TO CHECK PAUSE IF SO
FA38                  (       assist.asm):00756         ZOTCH2
FA38 8DB3             (       assist.asm):00757                 BSR     SEND                              ; SEND TO OUTPUT ROUTINE
FA3A                  (       assist.asm):00758         ZOTCH3
FA3A 0C90             (       assist.asm):00759                 INC     <SWICNT                           ; BUMP UP "SWI" TRACE NEST LEVEL
FA3C 3B               (       assist.asm):00760                 RTI                                       ; RETURN FROM "SWI" FUNCTION
                      (       assist.asm):00761                 SPC     3
                      (       assist.asm):00762         ;**************************************************
                      (       assist.asm):00763         ;*              [SWI FUNCTION 6]
                      (       assist.asm):00764         ;*        PCRLF - SEND CR/LF TO CONSOLE HANDLER
                      (       assist.asm):00765         ;*  INPUT: NONE
                      (       assist.asm):00766         ;*  OUTPUT: CR AND LF SENT TO HANDLER
                      (       assist.asm):00767         ;*          C=0 NO CTL-X, C=1 CTL-X RECIEVED
                      (       assist.asm):00768         ;**************************************************
                      (       assist.asm):00769                 SPC     1
FA3D                  (       assist.asm):00770         ZPCRLS
FA3D 04               (       assist.asm):00771                 FCB     EOT                               ; NULL STRING
                      (       assist.asm):00772                 SPC     1
FA3E                  (       assist.asm):00773         ZPCRLF
FA3E 308CFC           (       assist.asm):00774                 LEAX    ZPCRLS,PCR                        ; READY CR,LF STRING
                      (       assist.asm):00775         ;* FALL INTO CR/LF CODE
                      (       assist.asm):00776                 SPC     3
                      (       assist.asm):00777         ;**************************************************
                      (       assist.asm):00778         ;*             [SWI FUNCTION 3]
                      (       assist.asm):00779         ;*        PDATA - OUTPUT CR/LF AND STRING
                      (       assist.asm):00780         ;* INPUT: X->STRING
                      (       assist.asm):00781         ;* OUTPUT: CR/LF AND STRING SENT TO OUTPUT CONSOLE
                      (       assist.asm):00782         ;*         HANDLER.
                      (       assist.asm):00783         ;*     C=0 NO CTL-X, C=1 CTL-X RECIEVED
                      (       assist.asm):00784         ;* NOTE: LINE FEED MUST FOLLOW CARRIAGE RETURN FOR
                      (       assist.asm):00785         ;*       PROPER PUNCH DATA.
                      (       assist.asm):00786         ;**************************************************
FA41                  (       assist.asm):00787         ZPDATA
FA41 860D             (       assist.asm):00788                 LDA     #CR                               ; LOAD CARRIAGE RETURN
FA43 8DA8             (       assist.asm):00789                 BSR     SEND                              ; SEND IT
FA45 860A             (       assist.asm):00790                 LDA     #LF                               ; LOAD LINE FEED
                      (       assist.asm):00791         ;* FALL INTO PDATA1
                      (       assist.asm):00792                 SPC     3
                      (       assist.asm):00793         ;*************************************************
                      (       assist.asm):00794         ;*             [SWI FUNCTION 2]
                      (       assist.asm):00795         ;*         PDATA1 - OUTPUT STRING TILL EOT ($04)
                      (       assist.asm):00796         ;*  THIS ROUTINE PAUSES IF AN INPUT BYTE BECOMES
                      (       assist.asm):00797         ;*  AVAILABLE DURING OUTPUT TRANSMISSION UNTIL A
                      (       assist.asm):00798         ;*  SECOND IS RECIEVED.
                      (       assist.asm):00799         ;* INPUT: X->STRING
                      (       assist.asm):00800         ;* OUTPUT: STRING SENT TO OUTPUT CONSOLE DRIVER
                      (       assist.asm):00801         ;*         C=0 NO CTL-X, C=1 CTL-X RECIEVED
                      (       assist.asm):00802         ;*************************************************
FA47                  (       assist.asm):00803         ZPDTLP
FA47 8DA4             (       assist.asm):00804                 BSR     SEND                              ; SEND CHARACTER TO DRIVER
FA49                  (       assist.asm):00805         ZPDTA1
FA49 A680             (       assist.asm):00806                 LDA     ,X+                               ; LOAD NEXT CHARACTER
FA4B 8104             (       assist.asm):00807                 CMPA    #EOT                              ; ? EOT
FA4D 26F8             (       assist.asm):00808                 BNE     ZPDTLP                            ; LOOP IF NOT
                      (       assist.asm):00809         ;* FALL INTO PAUSE CHECK FUNCTION
                      (       assist.asm):00810                 SPC     3
                      (       assist.asm):00811         ;********************************************
                      (       assist.asm):00812         ;*            [SWI FUNCTION 12]
                      (       assist.asm):00813         ;*     PAUSE - RETURN TO TASK DISPATCHING AND CHECK
                      (       assist.asm):00814         ;*             FOR FREEZE CONDITION OR CTL-X BREAK
                      (       assist.asm):00815         ;*  THIS FUNCTION ENTERS THE TASK PAUSE HANDLER SO
                      (       assist.asm):00816         ;*  OPTIONALLY OTHER 6809 PROCESSES MAY GAIN CONTROL.
                      (       assist.asm):00817         ;*  UPON RETURN, CHECK FOR A 'FREEZE' CONDITION
                      (       assist.asm):00818         ;*  WITH A RESULTING WAIT LOOP, OR CONDITION CODE
                      (       assist.asm):00819         ;*  RETURN IF A CONTROL-X IS ENTERED FROM THE INPUT
                      (       assist.asm):00820         ;*  HANDLER.
                      (       assist.asm):00821         ;* OUTPUT: C=1 IF CTL-X HAS ENTERED, C=0 OTHERWISE
                      (       assist.asm):00822         ;******************************************
FA4F                  (       assist.asm):00823         ZPAUSE
FA4F 8D1E             (       assist.asm):00824                 BSR     XQPAUS                            ; RELEASE CONTROL AT EVERY LINE
FA51 8D06             (       assist.asm):00825                 BSR     CHKABT                            ; CHECK FOR FREEZE OR ABORT
FA53 1FA9             (       assist.asm):00826                 TFR     CC,B                              ; PREPARE TO REPLACE CC
FA55 E7E4             (       assist.asm):00827                 STB     ,S                                ; OVERLAY OLD ONE ON STACK
FA57 20E1             (       assist.asm):00828                 BRA     ZOTCH3                            ; RETURN FROM "SWI"
                      (       assist.asm):00829                 SPC     1
                      (       assist.asm):00830         ;* CHKABT - SCAN FOR INPUT PAUSE/ABORT DURING OUTPUT
                      (       assist.asm):00831         ;* OUTPUT: C=0 OK, C=1 ABORT (CTL-X ISSUED)
                      (       assist.asm):00832         ;* VOLATILE: U,X,D
FA59                  (       assist.asm):00833         CHKABT
FA59 8D18             (       assist.asm):00834                 BSR     XQCIDT                            ; ATTEMPT INPUT
FA5B 2405             (       assist.asm):00835                 BCC     CHKRTN                            ; BRANCH NO TO RETURN
FA5D 8118             (       assist.asm):00836                 CMPA    #CAN                              ; ? CTL-X FOR ABORT
FA5F 2602             (       assist.asm):00837                 BNE     CHKWT                             ; BRANCH NO TO PAUSE
FA61                  (       assist.asm):00838         CHKSEC
FA61 53               (       assist.asm):00839                 COMB                                      ; SET CARRY
FA62                  (       assist.asm):00840         CHKRTN
FA62 39               (       assist.asm):00841                 RTS                                       ; RETURN TO CALLER WITH CC SET
FA63                  (       assist.asm):00842         CHKWT
FA63 8D0A             (       assist.asm):00843                 BSR     XQPAUS                            ; PAUSE FOR A MOMENT
FA65 8D0C             (       assist.asm):00844                 BSR     XQCIDT                            ; ? KEY FOR START
FA67 24FA             (       assist.asm):00845                 BCC     CHKWT                             ; LOOP UNTIL RECIEVED
FA69 8118             (       assist.asm):00846                 CMPA    #CAN                              ; ? ABORT SIGNALED FROM WAIT
FA6B 27F4             (       assist.asm):00847                 BEQ     CHKSEC                            ; BRANCH YES
FA6D 4F               (       assist.asm):00848                 CLRA                                      ; SET C=0 FOR NO ABORT
FA6E 39               (       assist.asm):00849                 RTS                                       ; AND RETURN
                      (       assist.asm):00850                 SPC     2
                      (       assist.asm):00851         ;* SAVE MEMORY WITH JUMPS
FA6F                  (       assist.asm):00852         XQPAUS
FA6F 6E9DE577         (       assist.asm):00853                 JMP     [VECTAB+.PAUSE,PCR]               ; TO PAUSE ROUTINE
FA73                  (       assist.asm):00854         XQCIDT
FA73 AD9DE561         (       assist.asm):00855                 JSR     [VECTAB+.CIDTA,PCR]               ; TO INPUT ROUTINE
FA77 847F             (       assist.asm):00856                 ANDA    #$7F                              ; STRIP PARITY
FA79 39               (       assist.asm):00857                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):00858                 SPC     3
                      (       assist.asm):00859         ;********************************************
                      (       assist.asm):00860         ;*          NMI DEFAULT INTERRUPT HANDLER
                      (       assist.asm):00861         ;*  THE NMI HANDLER IS USED FOR TRACING INSTRUCTIONS.
                      (       assist.asm):00862         ;*  TRACE PRINTOUTS OCCUR ONLY AS LONG AS THE STACK
                      (       assist.asm):00863         ;*  TRACE LEVEL IS NOT BREACHED BY FALLING BELOW IT.
                      (       assist.asm):00864         ;*  TRACING CONTINUES UNTIL THE COUNT TURNS ZERO OR
                      (       assist.asm):00865         ;*  A CTL-X IS ENTERED FROM THE INPUT CONSOLE DEVICE.
                      (       assist.asm):00866         ;*********************************************
                      (       assist.asm):00867                 SPC     1
FA7A                  (       assist.asm):00868         MSHOWP
FA7A 4F502D04         (       assist.asm):00869                 FCB     'O,'P,'-',EOT                     ; OPCODE PREP
                      (       assist.asm):00870                 SPC     1
FA7E                  (       assist.asm):00871         NMIR
FA7E 8D42             (       assist.asm):00872                 BSR     LDDP                              ; LOAD PAGE AND VERIFY STACK
FA80 0D8F             (       assist.asm):00873                 TST     <MISFLG                           ; ? THRU A BREAKPOINT
FA82 2634             (       assist.asm):00874                 BNE     NMICON                            ; BRANCH IF SO TO CONTINUE
FA84 0D90             (       assist.asm):00875                 TST     <SWICNT                           ; ? INHIBIT "SWI" DURING TRACE
FA86 2B29             (       assist.asm):00876                 BMI     NMITRC                            ; BRANCH YES
FA88 306C             (       assist.asm):00877                 LEAX    12,S                              ; OBTAIN USERS STACK POINTER
FA8A 9CF8             (       assist.asm):00878                 CMPX    <SLEVEL                           ; ? TO TRACE HERE
FA8C 2523             (       assist.asm):00879                 BLO     NMITRC                            ;  BRANCH IF TOO LOW TO DISPLAY
FA8E 308CE9           (       assist.asm):00880                 LEAX    MSHOWP,PCR                        ; LOAD OP PREP
FA91 3F               (       assist.asm):00881                 SWI                                       ; SEND TO CONSOLE
FA92 02               (       assist.asm):00882                 FCB     PDATA1                            ; FUNCTION
FA93 098E             (       assist.asm):00883                 ROL     <DELIM                            ; SAVE CARRY BIT
FA95 308DE500         (       assist.asm):00884                 LEAX    LASTOP,PCR                        ; POINT TO LAST OP
FA99 3F               (       assist.asm):00885                 SWI                                       ; SEND OUT AS HEX
FA9A 05               (       assist.asm):00886                 FCB     OUT4HS                            ; FUNCTION
FA9B 8D17             (       assist.asm):00887                 BSR     REGPRS                            ;  FOLLOW MEMORY WITH REGISTERS
FA9D 2537             (       assist.asm):00888                 BCS     ZBKCMD                            ; BRANCH IF "CANCEL"
FA9F 068E             (       assist.asm):00889                 ROR     <DELIM                            ; RESTORE CARRY BIT
FAA1 2533             (       assist.asm):00890                 BCS     ZBKCMD                            ; BRANCH IF "CANCEL"
FAA3 9E91             (       assist.asm):00891                 LDX     <TRACEC                           ; LOAD TRACE COUNT
FAA5 272F             (       assist.asm):00892                 BEQ     ZBKCMD                            ; IF ZERO TO COMMAND HANDLER
FAA7 301F             (       assist.asm):00893                 LEAX    -1,X                              ; MINUS ONE
FAA9 9F91             (       assist.asm):00894                 STX     <TRACEC                           ; REFRESH
FAAB 2729             (       assist.asm):00895                 BEQ     ZBKCMD                            ; STOP TRACE WHEN ZERO
FAAD 8DAA             (       assist.asm):00896                 BSR     CHKABT                            ; ? ABORT THE TRACE
FAAF 2525             (       assist.asm):00897                 BCS     ZBKCMD                            ; BRANCH YES TO COMMAND HANDLER
FAB1                  (       assist.asm):00898         NMITRC
FAB1 1603EC           (       assist.asm):00899                 LBRA    CTRCE3                            ; NO, TRACE ANOTHER INSTRUCTION
                      (       assist.asm):00900                 SPC     1
FAB4                  (       assist.asm):00901         REGPRS
FAB4 1701AE           (       assist.asm):00902                 LBSR    REGPRT                            ; PRINT REGISTERS AS FROM COMMAND
FAB7 39               (       assist.asm):00903                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):00904                 SPC     1
                      (       assist.asm):00905         ;* JUST EXECUTED THRU A BRKPNT.  NOW CONTINUE NORMALLY
FAB8                  (       assist.asm):00906         NMICON
FAB8 0F8F             (       assist.asm):00907                 CLR     <MISFLG                           ; CLEAR THRU FLAG
FABA 1702E0           (       assist.asm):00908                 LBSR    ARMBK2                            ; ARM BREAKPOINTS
FABD                  (       assist.asm):00909         RTI
FABD 3B               (       assist.asm):00910                 RTI                                       ; AND CONTINUE USERS PROGRAM
                      (       assist.asm):00911                 SPC     1
                      (       assist.asm):00912         ;* LDDP - SETUP DIRECT PAGE REGISTER, VERIFY STACK.
                      (       assist.asm):00913         ;* AN INVALID STACK CAUSES A RETURN TO THE COMMAND
                      (       assist.asm):00914         ;* HANDLER.
                      (       assist.asm):00915         ;* INPUT: FULLY STACKED REGISTERS FROM AN INTERRUPT
                      (       assist.asm):00916         ;* OUTPUT: DPR LOADED TO WORK PAGE
                      (       assist.asm):00917                 SPC     1
FABE                  (       assist.asm):00918         ERRMSG
FABE 3F072004         (       assist.asm):00919                 FCB     '?',BELL,$20,EOT                  ; ERROR RESPONSE
                      (       assist.asm):00920                 SPC     1
FAC2                  (       assist.asm):00921         LDDP
FAC2 E68DE4D7         (       assist.asm):00922                 LDB     BASEPG,PCR                        ; LOAD DIRECT PAGE HIGH BYTE
FAC6 1F9B             (       assist.asm):00923                 TFR     B,DP                              ; SETUP DIRECT PAGE REGISTER
FAC8 A163             (       assist.asm):00924                 CMPA    3,S                               ; ? IS STACK VALID
FACA 272C             (       assist.asm):00925                 BEQ     RTS                               ; YES, RETURN
FACC 10DE97           (       assist.asm):00926                 LDS     <RSTACK                           ; RESET TO INITIAL STACK POINTER
FACF                  (       assist.asm):00927         ERROR
FACF 308CEC           (       assist.asm):00928                 LEAX    ERRMSG,PCR                        ; LOAD ERROR REPORT
FAD2 3F               (       assist.asm):00929                 SWI                                       ; SEND OUT BEFORE REGISTERS
FAD3 03               (       assist.asm):00930                 FCB     PDATA                             ; ON NEXT LINE
                      (       assist.asm):00931         ;* FALL INTO BREAKPOINT HANDLER
                      (       assist.asm):00932                 SPC     3
                      (       assist.asm):00933         ;**********************************************
                      (       assist.asm):00934         ;*             [SWI FUNCTION 10]
                      (       assist.asm):00935         ;*         BREAKPOINT PROGRAM FUNCTION
                      (       assist.asm):00936         ;*  PRINT REGISTERS AND GO TO COMMAND HANLER
                      (       assist.asm):00937         ;***********************************************
FAD4                  (       assist.asm):00938         ZBKPNT
FAD4 8DDE             (       assist.asm):00939                 BSR     REGPRS                            ; PRINT OUT REGISTERS
FAD6                  (       assist.asm):00940         ZBKCMD
FAD6 16FE1D           (       assist.asm):00941                 LBRA    CMDNEP                            ; NOW ENTER COMMAND HANDLER
                      (       assist.asm):00942                 SPC     3
                      (       assist.asm):00943         ;********************************************
                      (       assist.asm):00944         ;*    IRQ, RESERVED, SWI2 AND SWI3 INTERRUPT HANDLERS
                      (       assist.asm):00945         ;*  THE DEFAULT HANDLING IS TO CAUSE A BREAKPOINT.
                      (       assist.asm):00946         ;********************************************
     FAD9             (       assist.asm):00947         SWI2R           EQU *                             ; SWI2 ENTRY
     FAD9             (       assist.asm):00948         SWI3R           EQU *                             ; SWI3 ENTRY
     FAD9             (       assist.asm):00949         IRQR            EQU *                             ; IRQ ENTRY
FAD9                  (       assist.asm):00950         RSRVDR
FAD9 8DE7             (       assist.asm):00951                 BSR     LDDP                              ; SET BASE PAGE, VALIDATE STACK
FADB 20F7             (       assist.asm):00952                 BRA     ZBKPNT                            ; FORCE A BREAKPOINT
                      (       assist.asm):00953                 SPC     3
                      (       assist.asm):00954         ;******************************************
                      (       assist.asm):00955         ;*        FIRQ HANDLER
                      (       assist.asm):00956         ;*  JUST RETURN FOR THE FIRQ INTERRUPT
                      (       assist.asm):00957         ;******************************************
     FABD             (       assist.asm):00958         FIRQR           EQU RTI                           ; IMMEDIATE RETURN
                      (       assist.asm):00959                 SPC     3
                      (       assist.asm):00960         ;**************************************************
                      (       assist.asm):00961         ;*      DEFAULT I/O DRIVERS
                      (       assist.asm):00962         ;**************************************************
                      (       assist.asm):00963                 SPC     2
                      (       assist.asm):00964         ;* CIDTA - RETURN CONSOLE INPUT CHARACTER
                      (       assist.asm):00965         ;* OUTPUT: C=0 IF NO DATA READY, C=1 A=CHARACTER
                      (       assist.asm):00966         ;* U VOLATILE
FADD                  (       assist.asm):00967         CIDTA
FADD CEEF04           (       assist.asm):00968                 LDU     #ACIA                             ; LOAD ACIA ADDRESS
FAE0 A641             (       assist.asm):00969                 LDA     1,U                               ; LOAD STATUS REGISTER
FAE2 44               (       assist.asm):00970                 LSRA
FAE3 44               (       assist.asm):00971                 LSRA
FAE4 44               (       assist.asm):00972                 LSRA
FAE5 44               (       assist.asm):00973                 LSRA                                      ; TEST RECIEVER REGISTER FLAG
FAE6 2402             (       assist.asm):00974                 BCC     CIRTN                             ; RETURN IF NOTHING
                      (       assist.asm):00975         
FAE8 A640             (       assist.asm):00976                 LDA     0,U                               ; LOAD DATA BYTE
FAEA                  (       assist.asm):00977         CIRTN
FAEA 39               (       assist.asm):00978                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):00979                 SPC     2
                      (       assist.asm):00980         
                      (       assist.asm):00981         ;* CION - INPUT CONSOLE INITIALIZATION
                      (       assist.asm):00982         ;* COON - OUTPUT CONSOLE INITIALIZATION
                      (       assist.asm):00983         ;* A,X  VOLATILE
     FAEB             (       assist.asm):00984         CION            EQU *
FAEB                  (       assist.asm):00985         COON
                      (       assist.asm):00986         ;* LDA #3 RESET ACIA CODE
FAEB 8EEF04           (       assist.asm):00987                 LDX     #ACIA                             ; LOAD ACIA ADDRESS
FAEE 6F01             (       assist.asm):00988                 CLR     1,X                               ; RESET ACIA
FAF0 860B             (       assist.asm):00989                 LDA     #$0B                              ; SET COMMAND
FAF2 A702             (       assist.asm):00990                 STA     2,X                               ; REGISTER UP
FAF4 861E             (       assist.asm):00991                 LDA     #$1E                              ; SET CONTROL
FAF6 A703             (       assist.asm):00992                 STA     3,X                               ; REGISTER UP
FAF8                  (       assist.asm):00993         RTS
FAF8 39               (       assist.asm):00994                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):00995         
                      (       assist.asm):00996                 SPC     1
                      (       assist.asm):00997         ;* THE FOLLOWING HAVE NO DUTIES TO PERFORM
     FAF8             (       assist.asm):00998         CIOFF           EQU RTS                           ; CONSOLE INPUT OFF
     FAF8             (       assist.asm):00999         COOFF           EQU RTS                           ; CONSOLE OUTPUT OFF
                      (       assist.asm):01000                 SPC     3
                      (       assist.asm):01001         
                      (       assist.asm):01002         ;* CODTA - OUTPUT CHARACTER TO CONSOLE DEVICE
                      (       assist.asm):01003         ;* INPUT: A=CHARACTER TO SEND
                      (       assist.asm):01004         ;* OUTPUT: CHAR SENT TO TERMINAL WITH PROPER PADDING
                      (       assist.asm):01005         ;* ALL REGISTERS TRANSPARENT
                      (       assist.asm):01006                 SPC     1
FAF9                  (       assist.asm):01007         CODTA
FAF9 3447             (       assist.asm):01008                 PSHS    U,D,CC                            ; SAVE REGISTERS,WORK BYTE
FAFB CEEF04           (       assist.asm):01009                 LDU     #ACIA                             ; ADDRESS ACIA
FAFE 8D05             (       assist.asm):01010                 BSR     CODTAO                            ; CALL OUTPUT CHAR SUBROTINE
FB00                  (       assist.asm):01011         CODTRT
FB00 35C7             (       assist.asm):01012                 PULS    PC,U,D,CC                         ; RESTORE REGISTERS AND RETURN
                      (       assist.asm):01013         
FB02                  (       assist.asm):01014         CODTAD
FB02 17FF6A           (       assist.asm):01015                 LBSR    XQPAUS                            ; TEMPORARY GIVE UP CONTROL
FB05                  (       assist.asm):01016         CODTAO
FB05 E641             (       assist.asm):01017                 LDB     1,U                               ; LOAD ACIA CONTROL REGISTER
FB07 C510             (       assist.asm):01018                 BITB    #%00010000                        ; ? TX REGISTER CLEAR >LSAB FIXME
FB09 27FA             (       assist.asm):01019                 BEQ     CODTAO                            ; RELEASE CONTROL IF NOT
FB0B A740             (       assist.asm):01020                 STA     0,U                               ; STORE INTO DATA REGISTER
FB0D 39               (       assist.asm):01021                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01022         
                      (       assist.asm):01023         ;*E
                      (       assist.asm):01024                 SPC     3
                      (       assist.asm):01025         ;* BSON - TURN ON READ/VERIFY/PUNCH MECHANISM
                      (       assist.asm):01026         ;* A IS VOLATILE
                      (       assist.asm):01027                 SPC     1
FB0E                  (       assist.asm):01028         BSON
FB0E 8611             (       assist.asm):01029                 LDA     #$11                              ; SET READ CODE
FB10 6D66             (       assist.asm):01030                 TST     6,S ?                             ; READ OR VERIFY
FB12 2601             (       assist.asm):01031                 BNE     BSON2                             ; BRANCH YES
FB14 4C               (       assist.asm):01032                 INCA                                      ; SET TO WRITE
FB15                  (       assist.asm):01033         BSON2
FB15 3F               (       assist.asm):01034                 SWI                                       ; PERFORM OUTPUT
FB16 01               (       assist.asm):01035                 FCB     OUTCH                             ; FUNCTION
FB17 0C8F             (       assist.asm):01036                 INC     <MISFLG                           ; SET LOAD IN PROGRESS FLAG
FB19 39               (       assist.asm):01037                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01038                 SPC     3
                      (       assist.asm):01039         ;* BSOFF - TURN OFF READ/VERIFY/PUNCH MECHANISM
                      (       assist.asm):01040         ;* A,X VOLATILE
FB1A                  (       assist.asm):01041         BSOFF
FB1A 8614             (       assist.asm):01042                 LDA     #$14                              ; TO DC4 - STOP
FB1C 3F               (       assist.asm):01043                 SWI                                       ; SEND OUT
FB1D 01               (       assist.asm):01044                 FCB     OUTCH                             ; FUNCTION
FB1E 4A               (       assist.asm):01045                 DECA                                      ; CHANGE TO DC3 (X-OFF)
FB1F 3F               (       assist.asm):01046                 SWI                                       ; SEND OUT
FB20 01               (       assist.asm):01047                 FCB     OUTCH                             ; FUNCTION
FB21 0A8F             (       assist.asm):01048                 DEC     <MISFLG                           ; CLEAR LOAD IN PROGRESS FLAG
FB23 8E61A8           (       assist.asm):01049                 LDX     #25000                            ; DELAY 1 SECOND (2MHZ CLOCK)
FB26                  (       assist.asm):01050         BSOFLP
FB26 301F             (       assist.asm):01051                 LEAX    -1,X                              ; COUNT DOWN
FB28 26FC             (       assist.asm):01052                 BNE     BSOFLP                            ; LOOP TILL DONE
FB2A 39               (       assist.asm):01053                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01054                 SPC     3
                      (       assist.asm):01055         ;* BSDTA - READ/VERIFY/PUNCH HANDLER
                      (       assist.asm):01056         ;* INPUT: S+6=CODE BYTE, VERIFY(-1),PUNCH(0),LOAD(1)
                      (       assist.asm):01057         ;*        S+4=START ADDRESS
                      (       assist.asm):01058         ;*        S+2=STOP ADDRESS
                      (       assist.asm):01059         ;*        S+0=RETURN ADDRESS
                      (       assist.asm):01060         ;* OUTPUT: Z=1 NORMAL COMPLETION, Z=0 INVALID LOAD/VER
                      (       assist.asm):01061         ;* REGISTERS ARE VOLATILE
                      (       assist.asm):01062                 SPC     1
FB2B                  (       assist.asm):01063         BSDTA
FB2B EE62             (       assist.asm):01064                 LDU     2,S                               ; U=TO ADDRESS OR OFFSET
FB2D 6D66             (       assist.asm):01065                 TST     6,S                               ; ? PUNCH
FB2F 2754             (       assist.asm):01066                 BEQ     BSDPUN                            ; BRANCH YES
                      (       assist.asm):01067         ;* DURING READ/VERIFY: S+2=MSB ADDRESS SAVE BYTE
                      (       assist.asm):01068         ;*                     S+1=BYTE COUNTER
                      (       assist.asm):01069         ;*                     S+0=CHECKSUM
                      (       assist.asm):01070         ;*                     U HOLDS OFFSET
FB31 327D             (       assist.asm):01071                 LEAS    -3,S                              ; ROOM FOR WORK/COUNTER/CHECKSUM
FB33                  (       assist.asm):01072         BSDLD1
FB33 3F               (       assist.asm):01073                 SWI                                       ; GET NEXT CHARACTER
FB34 00               (       assist.asm):01074                 FCB     INCHNP                            ; FUNCTION
FB35                  (       assist.asm):01075         BSDLD2
FB35 8153             (       assist.asm):01076                 CMPA    #'S'                              ; ? START OF S1/S9
FB37 26FA             (       assist.asm):01077                 BNE     BSDLD1                            ; BRANCH NOT
FB39 3F               (       assist.asm):01078                 SWI                                       ; GET NEXT CHARACTER
FB3A 00               (       assist.asm):01079                 FCB     INCHNP                            ; FUNCTION
FB3B 8139             (       assist.asm):01080                 CMPA    #'9'                              ; ? HAVE S9
FB3D 2722             (       assist.asm):01081                 BEQ     BSDSRT                            ; YES, RETURN GOOD CODE
FB3F 8131             (       assist.asm):01082                 CMPA    #'1'                              ; ? HAVE NEW RECORD
FB41 26F2             (       assist.asm):01083                 BNE     BSDLD2                            ; BRANCH IF NOT
FB43 6FE4             (       assist.asm):01084                 CLR     ,S                                ; CLEAR CHECKSUM
FB45 8D21             (       assist.asm):01085                 BSR     BYTE                              ; OBTAIN BYTE COUNT
FB47 E761             (       assist.asm):01086                 STB     1,S                               ; SAVE FOR DECREMENT
                      (       assist.asm):01087         ;* READ ADDRESS
FB49 8D1D             (       assist.asm):01088                 BSR     BYTE                              ; OBTAIN HIGH VALUE
FB4B E762             (       assist.asm):01089                 STB     2,S                               ; SAVE IT
FB4D 8D19             (       assist.asm):01090                 BSR     BYTE                              ; OBTAIN LOW VALUE
FB4F A662             (       assist.asm):01091                 LDA     2,S                               ; MAKE D=VALUE
FB51 31CB             (       assist.asm):01092                 LEAY    D,U                               ; Y=ADDRESS+OFFSET
                      (       assist.asm):01093         ;* STORE TEXT
FB53                  (       assist.asm):01094         BSDNXT
FB53 8D13             (       assist.asm):01095                 BSR     BYTE                              ; NEXT BYTE
FB55 270C             (       assist.asm):01096                 BEQ     BSDEOL                            ; BRANCH IF CHECKSUM
FB57 6D69             (       assist.asm):01097                 TST     9,S                               ; ? VERIFY ONLY
FB59 2B02             (       assist.asm):01098                 BMI     BSDCMP                            ; YES, ONLY COMPARE
FB5B E7A4             (       assist.asm):01099                 STB     ,Y                                ; STORE INTO MEMORY
FB5D                  (       assist.asm):01100         BSDCMP
FB5D E1A0             (       assist.asm):01101                 CMPB    ,Y+                               ; ? VALID RAM
FB5F 27F2             (       assist.asm):01102                 BEQ     BSDNXT                            ; YES, CONTINUE READING
FB61                  (       assist.asm):01103         BSDSRT
FB61 3592             (       assist.asm):01104                 PULS    PC,X,A                            ; RETURN WITH Z SET PROPER
                      (       assist.asm):01105                 SPC     1
FB63                  (       assist.asm):01106         BSDEOL
FB63 4C               (       assist.asm):01107                 INCA                                      ; ? VALID CHECKSUM
FB64 27CD             (       assist.asm):01108                 BEQ     BSDLD1                            ; BRANCH YES
FB66 20F9             (       assist.asm):01109                 BRA     BSDSRT                            ; RETURN Z=0 INVALID
                      (       assist.asm):01110                 SPC     1
                      (       assist.asm):01111         ;* BYTE BUILDS 8 BIT VALUE FROM TWO HEX DIGITS IN
FB68                  (       assist.asm):01112         BYTE
FB68 8D12             (       assist.asm):01113                 BSR     BYTHEX                            ; OBTAIN FIRST HEX
FB6A C610             (       assist.asm):01114                 LDB     #16                               ; PREPARE SHIFT
FB6C 3D               (       assist.asm):01115                 MUL                                       ; OVER TO A
FB6D 8D0D             (       assist.asm):01116                 BSR     BYTHEX                            ; OBTAIN SECOND HEX
FB6F 3404             (       assist.asm):01117                 PSHS    B                                 ; SAVE HIGH HEX
FB71 ABE0             (       assist.asm):01118                 ADDA    ,S+                               ; COMBINE BOTH SIDES
FB73 1F89             (       assist.asm):01119                 TFR     A,B                               ; SEND BACK IN B
FB75 AB62             (       assist.asm):01120                 ADDA    2,S                               ; COMPUTE NEW CHECKSUM
FB77 A762             (       assist.asm):01121                 STA     2,S                               ; STORE BACK
FB79 6A63             (       assist.asm):01122                 DEC     3,S                               ; DECREMENT BYTE COUNT
FB7B                  (       assist.asm):01123         BYTRTS
FB7B 39               (       assist.asm):01124                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01125                 SPC     1
FB7C                  (       assist.asm):01126         BYTHEX
FB7C 3F               (       assist.asm):01127                 SWI                                       ; GET NEXT HEX
FB7D 00               (       assist.asm):01128                 FCB     INCHNP                            ; CHARACTER
FB7E 1701D7           (       assist.asm):01129                 LBSR    CNVHEX                            ; CONVERT TO HEX
FB81 27F8             (       assist.asm):01130                 BEQ     BYTRTS                            ; RETURN IF VALID HEX
FB83 35F2             (       assist.asm):01131                 PULS    PC,U,Y,X,A                        ; RETURN TO CALLER WITH Z=0
                      (       assist.asm):01132                 SPC     2
                      (       assist.asm):01133         ;* PUNCH STACK USE: S+8=TO ADDRESS
                      (       assist.asm):01134         ;*                  S+6=RETURN ADDRESS
                      (       assist.asm):01135         ;*                  S+4=SAVED PADDING VALUES
                      (       assist.asm):01136         ;*                  S+2 FROM ADDRESS
                      (       assist.asm):01137         ;*                  S+1=FRAME COUNT/CHECKSUM
                      (       assist.asm):01138         ;*                  S+0=BYTE COUNT
FB85                  (       assist.asm):01139         BSDPUN
FB85 DEF2             (       assist.asm):01140                 LDU     <VECTAB+.PAD                      ; LOAD PADDING VALUES
FB87 AE64             (       assist.asm):01141                 LDX     4,S                               ; X=FROM ADDRESS
FB89 3456             (       assist.asm):01142                 PSHS    U,X,D                             ; CREATE STACK WORK AREA
FB8B CC0018           (       assist.asm):01143                 LDD     #24                               ; SET A=0, B=24
FB8E D7F2             (       assist.asm):01144                 STB     <VECTAB+.PAD                      ; SETUP 24 CHARACTER PADS
FB90 3F               (       assist.asm):01145                 SWI                                       ; SEND NULLS OUT
FB91 01               (       assist.asm):01146                 FCB     OUTCH                             ; FUNCTION
FB92 C604             (       assist.asm):01147                 LDB     #4                                ; SETUP NEW LINE PAD TO 4
FB94 DDF2             (       assist.asm):01148                 STD     <VECTAB+.PAD                      ; SETUP PUNCH PADDING
                      (       assist.asm):01149         ;* CALCULATE SIZE
FB96                  (       assist.asm):01150         BSPGO
FB96 EC68             (       assist.asm):01151                 LDD     8,S                               ; LOAD TO
FB98 A362             (       assist.asm):01152                 SUBD    2,S                               ; MINUS FROM=LENGTH
FB9A 10830018         (       assist.asm):01153                 CMPD    #24                               ; ? MORE THAN 23
FB9E 2502             (       assist.asm):01154                 BLO     BSPOK                             ; NO, OK
FBA0 C617             (       assist.asm):01155                 LDB     #23                               ; FORCE TO 23 MAX
FBA2                  (       assist.asm):01156         BSPOK
FBA2 5C               (       assist.asm):01157                 INCB                                      ; PREPARE COUNTER
FBA3 E7E4             (       assist.asm):01158                 STB     ,S                                ; STORE BYTE COUNT
FBA5 CB03             (       assist.asm):01159                 ADDB    #3                                ; ADJUST TO FRAME COUNT
FBA7 E761             (       assist.asm):01160                 STB     1,S                               ; SAVE
                      (       assist.asm):01161         ;*PUNCH CR,LF,NULS,S,1
FBA9 308C33           (       assist.asm):01162                 LEAX    <BSPSTR,PCR                       ; LOAD START RECORD HEADER
FBAC 3F               (       assist.asm):01163                 SWI                                       ; SEND OUT
FBAD 03               (       assist.asm):01164                 FCB     PDATA                             ; FUNCTION
                      (       assist.asm):01165         ;* SEND FRAME COUNT
FBAE 5F               (       assist.asm):01166                 CLRB                                      ; INITIALIZE CHECKSUM
FBAF 3061             (       assist.asm):01167                 LEAX    1,S                               ; POINT TO FRAME COUNT AND ADDR
FBB1 8D27             (       assist.asm):01168                 BSR     BSPUN2                            ; SEND FRAME COUNT
                      (       assist.asm):01169         ;*DATA ADDRESS
FBB3 8D25             (       assist.asm):01170                 BSR     BSPUN2                            ; SEND ADDRESS HI
FBB5 8D23             (       assist.asm):01171                 BSR     BSPUN2                            ; SEND ADDRESS LOW
                      (       assist.asm):01172         ;*PUNCH DATA
FBB7 AE62             (       assist.asm):01173                 LDX     2,S                               ; LOAD START DATA ADDRESS
FBB9                  (       assist.asm):01174         BSPMRE
FBB9 8D1F             (       assist.asm):01175                 BSR     BSPUN2                            ; SEND OUT NEXT BYTE
FBBB 6AE4             (       assist.asm):01176                 DEC     ,S                                ; ? FINAL BYTE
FBBD 26FA             (       assist.asm):01177                 BNE     BSPMRE                            ; LOOP IF NOT DONE
FBBF AF62             (       assist.asm):01178                 STX     2,S                               ; UPDATE FROM ADDRESS VALUE
                      (       assist.asm):01179         ;*PUNCH CHECKSUM
FBC1 53               (       assist.asm):01180                 COMB                                      ; COMPLEMENT
FBC2 E761             (       assist.asm):01181                 STB     1,S                               ; STORE FOR SENDOUT
FBC4 3061             (       assist.asm):01182                 LEAX    1,S                               ; POINT TO IT
FBC6 8D14             (       assist.asm):01183                 BSR     BSPUNC                            ; SEND OUT AS HEX
FBC8 AE68             (       assist.asm):01184                 LDX     8,S                               ; LOAD TOP ADDRESS
FBCA AC62             (       assist.asm):01185                 CMPX    2,S                               ; ? DONE
FBCC 24C8             (       assist.asm):01186                 BHS     BSPGO                             ; BRANCH NOT
FBCE 308C11           (       assist.asm):01187                 LEAX    <BSPEOF,PCR                       ; PREPARE END OF FILE
FBD1 3F               (       assist.asm):01188                 SWI                                       ; SEND OUT STRING
FBD2 03               (       assist.asm):01189                 FCB     PDATA                             ; FUNCTION
FBD3 EC64             (       assist.asm):01190                 LDD     4,S                               ; RECOVER PAD COUNTS
FBD5 DDF2             (       assist.asm):01191                 STD     <VECTAB+.PAD                      ; RESTORE
FBD7 4F               (       assist.asm):01192                 CLRA                                      ; SET Z=1 FOR OK RETURN
FBD8 35D6             (       assist.asm):01193                 PULS    PC,U,X,D                          ; RETURN WITH OK CODE
                      (       assist.asm):01194                 SPC     1
FBDA                  (       assist.asm):01195         BSPUN2
FBDA EB84             (       assist.asm):01196                 ADDB    ,X                                ; ADD TO CHECKSUM
FBDC                  (       assist.asm):01197         BSPUNC
FBDC 16FDFB           (       assist.asm):01198                 LBRA    ZOUT2H                            ; SEND OUT AS HEX AND RETURN
                      (       assist.asm):01199                 SPC     1
FBDF                  (       assist.asm):01200         BSPSTR
FBDF 533104           (       assist.asm):01201                 FCB     'S','1',EOT CR,LF,NULLS,S,1
FBE2                  (       assist.asm):01202         BSPEOF
FBE2 5339303330303030 (       assist.asm):01203                 FCC     /S9030000FC/                      ; EOF STRING
     4643
FBEC 0D0A04           (       assist.asm):01204                 FCB     CR,LF,EOT
                      (       assist.asm):01205                 SPC     3
                      (       assist.asm):01206         ;* HSDTA - HIGH SPEED PRINT MEMORY
                      (       assist.asm):01207         ;* INPUT: S+4=START ADDRESS
                      (       assist.asm):01208         ;*        S+2=STOP ADDRESS
                      (       assist.asm):01209         ;*        S+0=RETURN ADDRESS
                      (       assist.asm):01210         ;* X,D VOLATILE
                      (       assist.asm):01211                 SPC     1
                      (       assist.asm):01212         ;*  SEND TITLE
FBEF                  (       assist.asm):01213         HSDTA
FBEF 3F               (       assist.asm):01214                 SWI                                       ; SEND NEW LINE
FBF0 06               (       assist.asm):01215                 FCB     PCRLF                             ; FUNCTION
FBF1 C606             (       assist.asm):01216                 LDB     #6                                ; PREPARE 6 SPACES
FBF3                  (       assist.asm):01217         HSBLNK
FBF3 3F               (       assist.asm):01218                 SWI                                       ; SEND BLANK
FBF4 07               (       assist.asm):01219                 FCB     SPACE                             ; FUNCTION
FBF5 5A               (       assist.asm):01220                 DECB                                      ; COUNT DOWN
FBF6 26FB             (       assist.asm):01221                 BNE     HSBLNK                            ; LOOP IF MORE
FBF8 5F               (       assist.asm):01222                 CLRB                                      ; SETUP BYTE COUNT
FBF9                  (       assist.asm):01223         HSHTTL
FBF9 1F98             (       assist.asm):01224                 TFR     B,A                               ; PREPARE FOR CONVERT
FBFB 17FDE9           (       assist.asm):01225                 LBSR    ZOUTHX                            ; CONVERT TO A HEX DIGIT
FBFE 3F               (       assist.asm):01226                 SWI                                       ; SEND BLANK
FBFF 07               (       assist.asm):01227                 FCB     SPACE                             ; FUNCTION
FC00 3F               (       assist.asm):01228                 SWI                                       ; SEND ANOTHER
FC01 07               (       assist.asm):01229                 FCB     SPACE                             ; BLANK
FC02 5C               (       assist.asm):01230                 INCB                                      ; UP ANOTHER
FC03 C110             (       assist.asm):01231                 CMPB    #$10                              ; ? PAST 'F'
FC05 25F2             (       assist.asm):01232                 BLO     HSHTTL                            ; LOOP UNTIL SO
FC07                  (       assist.asm):01233         HSHLNE
FC07 3F               (       assist.asm):01234                 SWI                                       ; TO NEXT LINE
FC08 06               (       assist.asm):01235                 FCB     PCRLF                             ; FUNCTION
FC09 252F             (       assist.asm):01236                 BCS     HSDRTN                            ; RETURN IF USER ENTERED CTL-X
FC0B 3064             (       assist.asm):01237                 LEAX    4,S                               ; POINT AT ADDRESS TO CONVERT
FC0D 3F               (       assist.asm):01238                 SWI                                       ; PRINT OUT ADDRESS
FC0E 05               (       assist.asm):01239                 FCB     OUT4HS                            ; FUNCTION
FC0F AE64             (       assist.asm):01240                 LDX     4,S                               ; LOAD ADDRESS PROPER
FC11 C610             (       assist.asm):01241                 LDB     #16                               ; NEXT SIXTEEN
FC13                  (       assist.asm):01242         HSHNXT
FC13 3F               (       assist.asm):01243                 SWI                                       ; CONVERT BYTE TO HEX AND SEND
FC14 04               (       assist.asm):01244                 FCB     OUT2HS                            ; FUNCTION
FC15 5A               (       assist.asm):01245                 DECB                                      ; COUNT DOWN
FC16 26FB             (       assist.asm):01246                 BNE     HSHNXT                            ; LOOP IF NOT SIXTEENTH
FC18 3F               (       assist.asm):01247                 SWI                                       ; SEND BLANK
FC19 07               (       assist.asm):01248                 FCB     SPACE                             ; FUNCTION
FC1A AE64             (       assist.asm):01249                 LDX     4,S                               ; RELOAD FROM ADDRESS
FC1C C610             (       assist.asm):01250                 LDB     #16                               ; COUNT
FC1E                  (       assist.asm):01251         HSHCHR
FC1E A680             (       assist.asm):01252                 LDA     ,X+                               ; NEXT BYTE
FC20 2B04             (       assist.asm):01253                 BMI     HSHDOT                            ; TOO LARGE, TO A DOT
FC22 8120             (       assist.asm):01254                 CMPA    #' '                              ; ? LOWER THAN A BLANK
FC24 2402             (       assist.asm):01255                 BHS     HSHCOK                            ; NO, BRANCH OK
FC26                  (       assist.asm):01256         HSHDOT
FC26 862E             (       assist.asm):01257                 LDA     #'.'                              ; CONVERT INVALID TO A BLANK
FC28                  (       assist.asm):01258         HSHCOK
FC28 3F               (       assist.asm):01259                 SWI                                       ; SEND CHARACTER
FC29 01               (       assist.asm):01260                 FCB     OUTCH                             ; FUNCTION
FC2A 5A               (       assist.asm):01261                 DECB                                      ; ? DONE
FC2B 26F1             (       assist.asm):01262                 BNE     HSHCHR                            ; BRANCH NO
                      (       assist.asm):01263         ;        CPX     2,S                               ; ? PAST LAST ADDRESS
FC2D AC62             (       assist.asm):01264                 FCB     $ac,$62                           ; BECAUSE LWASM IS BROKEN?
                      (       assist.asm):01265         
FC2F 2409             (       assist.asm):01266                 BHS     HSDRTN                            ; QUIT IF SO
FC31 AF64             (       assist.asm):01267                 STX     4,S                               ; UPDATE FROM ADDRESS
FC33 A665             (       assist.asm):01268                 LDA     5,S                               ; LOAD LOW BYTE ADDRESS
FC35 48               (       assist.asm):01269                 ASLA                                      ; ? TO SECTION BOUNDRY
FC36 26CF             (       assist.asm):01270                 BNE     HSHLNE                            ; BRANCH IF NOT
FC38 20B5             (       assist.asm):01271                 BRA     HSDTA                             ; BRANCH IF SO
FC3A                  (       assist.asm):01272         HSDRTN
FC3A 3F               (       assist.asm):01273                 SWI                                       ; SEND NEW LINE
FC3B 06               (       assist.asm):01274                 FCB     PCRLF                             ; FUNCTION
FC3C 39               (       assist.asm):01275                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01276         ;*F
                      (       assist.asm):01277                 SPC     3
                      (       assist.asm):01278         ;***********************************************
                      (       assist.asm):01279         ;*     A S S I S T 0 9    C O M M A N D S
                      (       assist.asm):01280         ;***********************************************
                      (       assist.asm):01281                 SPC     2
                      (       assist.asm):01282         ;*************BOOT FLEX9
FC3D                  (       assist.asm):01283         CFLEX
FC3D BDF000           (       assist.asm):01284                 JSR     $f000
                      (       assist.asm):01285                 SPC     2
                      (       assist.asm):01286         ;*************REGISTERS - DISPLAY AND CHANGE REGISTERS
FC40                  (       assist.asm):01287         CREG
FC40 8D23             (       assist.asm):01288                 BSR     REGPRT                            ; PRINT REGISTERS
FC42 4C               (       assist.asm):01289                 INCA                                      ; SET FOR CHANGE FUNCTION
FC43 8D21             (       assist.asm):01290                 BSR     REGCHG                            ; GO CHANGE, DISPLAY REGISTERS
FC45 39               (       assist.asm):01291                 RTS                                       ; RETURN TO COMMAND PROCESSOR
                      (       assist.asm):01292                 SPC     2
                      (       assist.asm):01293         ;********************************************
                      (       assist.asm):01294         ;*      REGPRT - PRINT/CHANGE REGISTERS SUBROUTINE
                      (       assist.asm):01295         ;*  WILL ABORT TO 'CMDBAD' IF OVERFLOW DETECTED DURING
                      (       assist.asm):01296         ;*  A CHANGE OPERATION.  CHANGE DISPLAYS REGISTERS WHEN
                      (       assist.asm):01297         ;*  DONE.
                      (       assist.asm):01298         ;* REGISTER MASK LIST CONSISTS OF:
                      (       assist.asm):01299         ;*  A) CHARACTERS DENOTING REGISTER
                      (       assist.asm):01300         ;*  B) ZERO FOR ONE BYTE, -1 FOR TWO
                      (       assist.asm):01301         ;*  C) OFFSET ON STACK TO REGISTER POSITION
                      (       assist.asm):01302         ;* INPUT: SP+4=STACKED REGISTERS
                      (       assist.asm):01303         ;*        A=0 PRINT, A#0 PRINT AND CHANGE
                      (       assist.asm):01304         ;* OUTPUT: (ONLY FOR REGISTER DISPLAY)
                      (       assist.asm):01305         ;*         C=1 CONTROL-X ENTERED, C=0 OTHERWISE
                      (       assist.asm):01306         ;* VOLATILE: D,X (CHANGE)
                      (       assist.asm):01307         ;*           B,X (DISPLAY)
                      (       assist.asm):01308         ;*******************************************
FC46                  (       assist.asm):01309         REGMSK
FC46 5043FF13         (       assist.asm):01310                 FCB     'P','C',-1,19                     ; PC REG
FC4A 41000A           (       assist.asm):01311                 FCB     'A',0,10                          ; A REG
FC4D 42000B           (       assist.asm):01312                 FCB     'B',0,11                          ; B REG
FC50 58FF0D           (       assist.asm):01313                 FCB     'X',-1,13                         ; X REG
FC53 59FF0F           (       assist.asm):01314                 FCB     'Y',-1,15                         ; Y REG
FC56 55FF11           (       assist.asm):01315                 FCB     'U',-1,17                         ; U REG
FC59 53FF01           (       assist.asm):01316                 FCB     'S',-1,1                          ; S REG
FC5C 43430009         (       assist.asm):01317                 FCB     'C','C',0,9                       ; CC REG
FC60 4450000C         (       assist.asm):01318                 FCB     'D','P',0,12                      ; DP REG
FC64 00               (       assist.asm):01319                 FCB     0                                 ; END OF LIST
                      (       assist.asm):01320                 SPC     1
FC65                  (       assist.asm):01321         REGPRT
FC65 4F               (       assist.asm):01322                 CLRA                                      ; SETUP PRINT ONLY FLAG
FC66                  (       assist.asm):01323         REGCHG
FC66 30E810           (       assist.asm):01324                 LEAX    4+12,S                            ; READY STACK VALUE
FC69 3432             (       assist.asm):01325                 PSHS    Y,X,A                             ; SAVE ON STACK WITH OPTION
FC6B 318CD8           (       assist.asm):01326                 LEAY    REGMSK,PCR                        ; LOAD REGISTER MASK
FC6E                  (       assist.asm):01327         REGP1
FC6E ECA0             (       assist.asm):01328                 LDD     ,Y+                               ; LOAD NEXT CHAR OR <=0
FC70 4D               (       assist.asm):01329                 TSTA                                      ; ? END OF CHARACTERS
FC71 2F04             (       assist.asm):01330                 BLE     REGP2                             ; BRANCH NOT CHARACTER
FC73 3F               (       assist.asm):01331                 SWI                                       ; SEND TO CONSOLE
FC74 01               (       assist.asm):01332                 FCB     OUTCH                             ; FUNCTION BYTE
FC75 20F7             (       assist.asm):01333                 BRA     REGP1                             ; CHECK NEXT
FC77                  (       assist.asm):01334         REGP2
FC77 862D             (       assist.asm):01335                 LDA     #'-'                              ; READY '-'
FC79 3F               (       assist.asm):01336                 SWI                                       ; SEND OUT
                      (       assist.asm):01337         
FC7A 01               (       assist.asm):01338                 FCB     OUTCH                             ; WITH OUTCH
FC7B 30E5             (       assist.asm):01339                 LEAX    B,S                               ; X->REGISTER TO PRINT
FC7D 6DE4             (       assist.asm):01340                 TST     ,S                                ; ? CHANGE OPTION
FC7F 2612             (       assist.asm):01341                 BNE     REGCNG                            ; BRANCH YES
FC81 6D3F             (       assist.asm):01342                 TST     -1,Y                              ; ? ONE OR TWO BYTES
FC83 2703             (       assist.asm):01343                 BEQ     REGP3                             ; BRANCH ZERO MEANS ONE
FC85 3F               (       assist.asm):01344                 SWI                                       ; PERFORM WORD HEX
FC86 05               (       assist.asm):01345                 FCB     OUT4HS                            ; FUNCTION
FC87 8C               (       assist.asm):01346                 FCB     SKIP2                             ; SKIP BYTE PRINT
FC88                  (       assist.asm):01347         REGP3
FC88 3F               (       assist.asm):01348                 SWI                                       ; PERFORM BYTE HEX
FC89 04               (       assist.asm):01349                 FCB     OUT2HS                            ; FUNCTION
FC8A                  (       assist.asm):01350         REG4
FC8A ECA0             (       assist.asm):01351                 LDD     ,Y+                               ; TO FRONT OF NEXT ENTRY
FC8C 5D               (       assist.asm):01352                 TSTB                                      ; ? END OF ENTRIES
FC8D 26DF             (       assist.asm):01353                 BNE     REGP1                             ; LOOP IF MORE
FC8F 3F               (       assist.asm):01354                 SWI                                       ; FORCE NEW LINE
FC90 06               (       assist.asm):01355                 FCB     PCRLF                             ;  FUNCTION
FC91                  (       assist.asm):01356         REGRTN
FC91 35B2             (       assist.asm):01357                 PULS    PC,Y,X,A                          ; RESTORE STACK AND RETURN
                      (       assist.asm):01358                 SPC     1
FC93                  (       assist.asm):01359         REGCNG
FC93 8D40             (       assist.asm):01360                 BSR     BLDNNB                            ; INPUT BINARY NUMBER
FC95 2710             (       assist.asm):01361                 BEQ     REGNXC                            ; IF CHANGE THEN JUMP
FC97 810D             (       assist.asm):01362                 CMPA    #CR                               ; ? NO MORE DESIRED
FC99 271E             (       assist.asm):01363                 BEQ     REGAGN                            ; BRANCH NOPE
FC9B E63F             (       assist.asm):01364                 LDB     -1,Y                              ; LOAD SIZE FLAG
FC9D 5A               (       assist.asm):01365                 DECB                                      ; MINUS ONE
FC9E 50               (       assist.asm):01366                 NEGB                                      ; MAKE POSITIVE
FC9F 58               (       assist.asm):01367                 ASLB                                      ; TIMES TWO (=2 OR =4)
FCA0                  (       assist.asm):01368         REGSKP
FCA0 3F               (       assist.asm):01369                 SWI                                       ;  PERFORM SPACES
FCA1 07               (       assist.asm):01370                 FCB     SPACE                             ; FUNCTION
FCA2 5A               (       assist.asm):01371                 DECB
FCA3 26FB             (       assist.asm):01372                 BNE     REGSKP                            ; LOOP IF MORE
FCA5 20E3             (       assist.asm):01373                 BRA     REG4                              ; CONTINUE WITH NEXT REGISTER
FCA7                  (       assist.asm):01374         REGNXC
FCA7 A7E4             (       assist.asm):01375                 STA     ,S                                ; SAVE DELIMITER IN OPTION
                      (       assist.asm):01376         ;*                     (ALWAYS > 0)
FCA9 DC9B             (       assist.asm):01377                 LDD     <NUMBER                           ; OBTAIN BINARY RESULT
FCAB 6D3F             (       assist.asm):01378                 TST     -1,Y                              ; ? TWO BYTES WORTH
FCAD 2602             (       assist.asm):01379                 BNE     REGTWO                            ; BRANCH YES
FCAF A682             (       assist.asm):01380                 LDA     ,-X                               ; SETUP FOR TWO
FCB1                  (       assist.asm):01381         REGTWO
FCB1 ED84             (       assist.asm):01382                 STD     ,X                                ; STORE IN NEW VALUE
FCB3 A6E4             (       assist.asm):01383                 LDA     ,S                                ; RECOVER DELIMITER
FCB5 810D             (       assist.asm):01384                 CMPA    #CR                               ;  ? END OF CHANGES
FCB7 26D1             (       assist.asm):01385                 BNE     REG4                              ; NO, KEEP ON TRUCKN
                      (       assist.asm):01386         ;* MOVE STACKED DATA TO NEW STACK IN CASE STACK
                      (       assist.asm):01387         ;* POINTER HAS CHANGED
FCB9                  (       assist.asm):01388         REGAGN
FCB9 308DE294         (       assist.asm):01389                 LEAX    TSTACK,PCR                        ;  LOAD TEMP AREA
FCBD C615             (       assist.asm):01390                 LDB     #21                               ; LOAD COUNT
FCBF                  (       assist.asm):01391         REGTF1
FCBF 3502             (       assist.asm):01392                 PULS    A                                 ; NEXT BYTE
FCC1 A780             (       assist.asm):01393                 STA     ,X+                               ; STORE INTO TEMP
FCC3 5A               (       assist.asm):01394                 DECB                                      ; COUNT DOWN
FCC4 26F9             (       assist.asm):01395                 BNE     REGTF1                            ; LOOP IF MORE
FCC6 10EE88EC         (       assist.asm):01396                 LDS     -20,X                             ; LOAD NEW STACK POINTER
FCCA C615             (       assist.asm):01397                 LDB     #21                               ; LOAD COUNT AGAIN
FCCC                  (       assist.asm):01398         REGTF2
FCCC A682             (       assist.asm):01399                 LDA     ,-X                               ; NEXT TO STORE
FCCE 3402             (       assist.asm):01400                 PSHS    A                                 ; BACK ONTO NEW STACK
FCD0 5A               (       assist.asm):01401                 DECB                                      ; COUNT DOWN
FCD1 26F9             (       assist.asm):01402                 BNE     REGTF2                            ; LOOP IF MORE
FCD3 20BC             (       assist.asm):01403                 BRA     REGRTN                            ; GO RESTART COMMAND
                      (       assist.asm):01404                 SPC     2
                      (       assist.asm):01405         ;*********************************************
                      (       assist.asm):01406         ;*  BLDNUM - BUILDS BINARY VALUE FROM INPUT HEX
                      (       assist.asm):01407         ;*  THE ACTIVE EXPRESSION HANDLER IS USED.
                      (       assist.asm):01408         ;* INPUT: S=RETURN ADDRESS
                      (       assist.asm):01409         ;* OUTPUT: A=DELIMITER WHICH TERMINATED VALUE
                      (       assist.asm):01410         ;*                            (IF DELM NOT ZERO)
                      (       assist.asm):01411         ;*         "NUMBER"=WORD BINARY RESULT
                      (       assist.asm):01412         ;*         Z=1 IF INPUT RECIEVED, Z=0 IF NO HEX RECIEVED
                      (       assist.asm):01413         ;*  REGISTERS ARE TRANSPARENT
                      (       assist.asm):01414         ;**********************************************
                      (       assist.asm):01415                 SPC     1
                      (       assist.asm):01416         ;* EXECUTE SINGLE OR EXTENDED ROM EXPRESSION HANDLER
                      (       assist.asm):01417         ;*
                      (       assist.asm):01418         ;* THE FLAG "DELIM" IS USED AS FOLLOWS:
                      (       assist.asm):01419         ;*   DELIM=0  NO LEADING BLANKS, NO FORCED TERMINATOR
                      (       assist.asm):01420         ;*   DELIM=CHR  ACCEPT LEADING 'CHR'S, FORCED TERMINATOR
FCD5                  (       assist.asm):01421         BLDNNB
FCD5 4F               (       assist.asm):01422                 CLRA                                      ; NO DYNAMIC DELIMITER
FCD6 8C               (       assist.asm):01423                 FCB     SKIP2                             ; SKIP NEXT INSTRUCTION
                      (       assist.asm):01424         ;* BUILD WITH LEADING BLANKS
FCD7                  (       assist.asm):01425         BLDNUM
FCD7 8620             (       assist.asm):01426                 LDA     #' '                              ; ALLOW LEADING BLANKS
FCD9 978E             (       assist.asm):01427                 STA     <DELIM                            ; STORE AS DELIMITER
FCDB 6E9DE30D         (       assist.asm):01428                 JMP     [VECTAB+.EXPAN,PCR]               ; TO EXP ANALYZER
                      (       assist.asm):01429                 SPC     1
                      (       assist.asm):01430         ;* THIS IS THE DEFAULT SINGLE ROM ANALYZER. WE ACCEPT:
                      (       assist.asm):01431         ;*    1) HEX INPUT
                      (       assist.asm):01432         ;*    2) 'M' FOR LAST MEMORY EXAMINE ADDRESS
                      (       assist.asm):01433         ;*    3) 'P' FOR PROGRAM COUNTER ADDRESS
                      (       assist.asm):01434         ;*    4) 'W' FOR WINDOW VALUE
                      (       assist.asm):01435         ;*    5) '@' FOR INDIRECT VALUE
FCDF                  (       assist.asm):01436         EXP1
FCDF 3414             (       assist.asm):01437                 PSHS    X,B                               ; SAVE REGISTERS
FCE1                  (       assist.asm):01438         EXPDLM
FCE1 8D5C             (       assist.asm):01439                 BSR     BLDHXI                            ; CLEAR NUMBER, CHECK FIRST CHAR
FCE3 2718             (       assist.asm):01440                 BEQ     EXP2                              ; IF HEX DIGIT CONTINUE BUILDING
                      (       assist.asm):01441         ;* SKIP BLANKS IF DESIRED
FCE5 918E             (       assist.asm):01442                 CMPA    <DELIM                            ; ? CORRECT DELIMITER
FCE7 27F8             (       assist.asm):01443                 BEQ     EXPDLM                            ; YES, IGNORE IT
                      (       assist.asm):01444         ;* TEST FOR M OR P
FCE9 9E9E             (       assist.asm):01445                 LDX     <ADDR DEFAULT FOR 'M'
FCEB 814D             (       assist.asm):01446                 CMPA    #'M'                              ; ? MEMORY EXAMINE ADDR WANTED
FCED 2716             (       assist.asm):01447                 BEQ     EXPTDL                            ; BRANCH IF SO
                      (       assist.asm):01448         
FCEF 9E93             (       assist.asm):01449                 LDX     <PCNTER                           ; DEFAULT FOR 'P'
FCF1 8150             (       assist.asm):01450                 CMPA    #'P'                              ; ? LAST PROGRAM COUNTER WANTED
FCF3 2710             (       assist.asm):01451                 BEQ     EXPTDL                            ; BRANCH IF SO
FCF5 9EA0             (       assist.asm):01452                 LDX     <WINDOW                           ; DEFAULT TO WINDOW
FCF7 8157             (       assist.asm):01453                 CMPA    #'W'                              ; ? WINDOW WANTED
FCF9 270A             (       assist.asm):01454                 BEQ     EXPTDL
                      (       assist.asm):01455         
FCFB                  (       assist.asm):01456         EXPRTN
FCFB 3594             (       assist.asm):01457                 PULS    PC,X,B                            ; RETURN AND RESTORE REGISTERS
                      (       assist.asm):01458         ;* GOT HEX, NOW CONTINUE BUILDING
FCFD                  (       assist.asm):01459         EXP2
FCFD 8D44             (       assist.asm):01460                 BSR     BLDHEX                            ; COMPUTE NEXT DIGIT
FCFF 27FC             (       assist.asm):01461                 BEQ     EXP2                              ; CONTINUE IF MORE
FD01 200A             (       assist.asm):01462                 BRA     EXPCDL                            ; SEARCH FOR +/-
                      (       assist.asm):01463         ;* STORE VALUE AND CHECK IF NEED DELIMITER
FD03                  (       assist.asm):01464         EXPTDI
FD03 AE84             (       assist.asm):01465                 LDX     ,X                                ; INDIRECTION DESIRED
FD05                  (       assist.asm):01466         EXPTDL
FD05 9F9B             (       assist.asm):01467                 STX     <NUMBER                           ; STORE RESULT
FD07 0D8E             (       assist.asm):01468                 TST     <DELIM                            ; ? TO FORCE A DELIMITER
FD09 27F0             (       assist.asm):01469                 BEQ     EXPRTN                            ; RETURN IF NOT WITH VALUE
FD0B 8D62             (       assist.asm):01470                 BSR     READ                              ; OBTAIN NEXT CHARACTER
                      (       assist.asm):01471         ;* TEST FOR + OR -
FD0D                  (       assist.asm):01472         EXPCDL
FD0D 9E9B             (       assist.asm):01473                 LDX     <NUMBER LOAD LAST VALUE
FD0F 812B             (       assist.asm):01474                 CMPA    #'+'                              ; ? ADD OPERATOR
FD11 260E             (       assist.asm):01475                 BNE     EXPCHM                            ; BRANCH NOT
FD13 8D23             (       assist.asm):01476                 BSR     EXPTRM                            ; COMPUTE NEXT TERM
FD15 3402             (       assist.asm):01477                 PSHS    A                                 ; SAVE DELIMITER
FD17 DC9B             (       assist.asm):01478                 LDD     <NUMBER                           ; LOAD NEW TERM
FD19                  (       assist.asm):01479         EXPADD
FD19 308B             (       assist.asm):01480                 LEAX    D,X                               ; ADD TO X
FD1B 9F9B             (       assist.asm):01481                 STX     <NUMBER                           ; STORE AS NEW RESULT
FD1D 3502             (       assist.asm):01482                 PULS    A                                 ; RESTORE DELIMITER
FD1F 20EC             (       assist.asm):01483                 BRA     EXPCDL                            ; NOW TEST IT
FD21                  (       assist.asm):01484         EXPCHM
FD21 812D             (       assist.asm):01485                 CMPA    #'-'                              ; ? SUBTRACT OPERATOR
FD23 2707             (       assist.asm):01486                 BEQ     EXPSUB                            ; BRANCH IF SO
FD25 8140             (       assist.asm):01487                 CMPA    #'@'                              ; ? INDIRECTION DESIRED
FD27 27DA             (       assist.asm):01488                 BEQ     EXPTDI                            ; BRANCH IF SO
FD29 5F               (       assist.asm):01489                 CLRB                                      ; SET DELIMITER RETURN
FD2A 20CF             (       assist.asm):01490                 BRA     EXPRTN                            ; AND RETURN TO CALLER
FD2C                  (       assist.asm):01491         EXPSUB
FD2C 8D0A             (       assist.asm):01492                 BSR     EXPTRM                            ; OBTAIN NEXT TERM
FD2E 3402             (       assist.asm):01493                 PSHS    A                                 ; SAVE DELIMITER
FD30 DC9B             (       assist.asm):01494                 LDD     <NUMBER                           ; LOAD UP NEXT TERM
FD32 40               (       assist.asm):01495                 NEGA                                      ; NEGATE A
FD33 50               (       assist.asm):01496                 NEGB                                      ; NEGATE B
FD34 8200             (       assist.asm):01497                 SBCA    #0                                ; CORRECT FOR A
FD36 20E1             (       assist.asm):01498                 BRA     EXPADD                            ; GO ADD TO EXPRESION
                      (       assist.asm):01499         ;* COMPUTE NEXT EXPRESSION TERM
                      (       assist.asm):01500         ;* OUTPUT: X=OLD VALUE
                      (       assist.asm):01501         ;*         'NUMBER'=NEXT TERM
FD38                  (       assist.asm):01502         EXPTRM
FD38 8D9D             (       assist.asm):01503                 BSR     BLDNUM                            ; OBTAIN NEXT VALUE
FD3A 2732             (       assist.asm):01504                 BEQ     CNVRTS                            ; RETURN IF VALID NUMBER
FD3C                  (       assist.asm):01505         BLDBAD
FD3C 16FC1A           (       assist.asm):01506                 LBRA    CMDBAD                            ; ABORT COMMAND IF INVALID
                      (       assist.asm):01507                 SPC     2
                      (       assist.asm):01508         ;*********************************************
                      (       assist.asm):01509         ;*  BUILD BINARY VALUE USING INPUT CHARACTERS.
                      (       assist.asm):01510         ;* INPUT: A=ASCII HEX VALUE OR DELIMITER
                      (       assist.asm):01511         ;*        SP+0=RETURN ADDRESS
                      (       assist.asm):01512         ;*        SP+2=16 BIT RESULT AREA
                      (       assist.asm):01513         ;* OUTPUT: Z=1 A=BINARY VALUE
                      (       assist.asm):01514         ;*         Z=0 IF INVALID HEX CHARACTER (A UNCHANGED)
                      (       assist.asm):01515         ;* VOLATILE: D
                      (       assist.asm):01516         ;****************************************
FD3F                  (       assist.asm):01517         BLDHXI
FD3F 0F9B             (       assist.asm):01518                 CLR     <NUMBER                           ; CLEAR NUMBER
FD41 0F9C             (       assist.asm):01519                 CLR     <NUMBER+1                         ; CLEAR NUMBER
FD43                  (       assist.asm):01520         BLDHEX
FD43 8D2A             (       assist.asm):01521                 BSR     READ                              ; GET INPUT CHARACTER
FD45                  (       assist.asm):01522         BLDHXC
FD45 8D11             (       assist.asm):01523                 BSR     CNVHEX                            ; CONVERT AND TEST CHARACTER
FD47 2625             (       assist.asm):01524                 BNE     CNVRTS                            ; RETURN IF NOT A NUMBER
FD49 C610             (       assist.asm):01525                 LDB     #16                               ; PREPARE SHIFT
FD4B 3D               (       assist.asm):01526                 MUL                                       ; BY  FOUR PLACES
FD4C 8604             (       assist.asm):01527                 LDA     #4                                ; ROTATE BINARY INTO VALUE
FD4E                  (       assist.asm):01528         BLDSHF
FD4E 58               (       assist.asm):01529                 ASLB                                      ; OBTAIN NEXT BIT
FD4F 099C             (       assist.asm):01530                 ROL     <NUMBER+1                         ; INTO LOW BYTE
FD51 099B             (       assist.asm):01531                 ROL     <NUMBER                           ; INTO HI BYTE
FD53 4A               (       assist.asm):01532                 DECA                                      ; COUNT DOWN
FD54 26F8             (       assist.asm):01533                 BNE     BLDSHF                            ; BRANCH IF MORE TO DO
FD56 2014             (       assist.asm):01534                 BRA     CNVOK                             ; SET GOOD RETURN CODE
                      (       assist.asm):01535                 SPC     2
                      (       assist.asm):01536         ;****************************************
                      (       assist.asm):01537         ;* CONVERT ASCII CHARACTER TO BINARY BYTE
                      (       assist.asm):01538         ;* INPUT: A=ASCII
                      (       assist.asm):01539         ;* OUTPUT: Z=1 A=BINARY VALUE
                      (       assist.asm):01540         ;*         Z=0 IF INVALID
                      (       assist.asm):01541         ;* ALL REGISTERS TRANSPARENT
                      (       assist.asm):01542         ;* (A UNALTERED IF INVALID HEX)
                      (       assist.asm):01543         ;**************************************
FD58                  (       assist.asm):01544         CNVHEX
FD58 8130             (       assist.asm):01545                 CMPA    #'0'                              ;  ? LOWER THAN A ZERO
FD5A 2512             (       assist.asm):01546                 BLO     CNVRTS                            ; BRANCH NOT VALUE
FD5C 8139             (       assist.asm):01547                 CMPA    #'9'                              ;  ? POSSIBLE A-F
FD5E 2F0A             (       assist.asm):01548                 BLE     CNVGOT                            ; BRANCH NO TO ACCEPT
FD60 8141             (       assist.asm):01549                 CMPA    #'A'                              ; ? LESS THEN TEN
FD62 250A             (       assist.asm):01550                 BLO     CNVRTS                            ; RETURN IF MINUS (INVALID)
FD64 8146             (       assist.asm):01551                 CMPA    #'F'                              ; ? NOT TOO LARGE
FD66 2206             (       assist.asm):01552                 BHI     CNVRTS                            ; NO, RETURN TOO LARGE
FD68 8007             (       assist.asm):01553                 SUBA    #7                                ; DOWN TO BINARY
FD6A                  (       assist.asm):01554         CNVGOT
FD6A 840F             (       assist.asm):01555                 ANDA    #$0F                              ; CLEAR HIGH HEX
FD6C                  (       assist.asm):01556         CNVOK
FD6C 1A04             (       assist.asm):01557                 ORCC    #4                                ; FORCE ZERO ON FOR VALID HEX
FD6E                  (       assist.asm):01558         CNVRTS
FD6E 39               (       assist.asm):01559                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01560                 SPC     2
                      (       assist.asm):01561         ;* GET INPUT CHAR, ABORT COMMAND IF CONTROL-X (CANCEL)
FD6F                  (       assist.asm):01562         READ
FD6F 3F               (       assist.asm):01563                 SWI                                       ; GET NEXT CHARACTER
FD70 00               (       assist.asm):01564                 FCB     INCHNP                            ; FUNCTION
FD71 8118             (       assist.asm):01565                 CMPA    #CAN                              ; ? ABORT COMMAND
FD73 27C7             (       assist.asm):01566                 BEQ     BLDBAD                            ; BRANCH TO ABORT IF SO
FD75 39               (       assist.asm):01567                 RTS                                       ; RETURN TO CALLER
                      (       assist.asm):01568         ;*G
                      (       assist.asm):01569                 SPC     3
                      (       assist.asm):01570         ;***************GO - START PROGRAM EXECUTION
FD76                  (       assist.asm):01571         CGO
FD76 8D01             (       assist.asm):01572                 BSR     GOADDR                            ; BUILD ADDRESS IF NEEDED
FD78 3B               (       assist.asm):01573                 RTI                                       ; START EXECUTING
                      (       assist.asm):01574                 SPC     1
                      (       assist.asm):01575         ;* FIND OPTIONAL NEW PROGRAM COUNTER. ALSO ARM THE
                      (       assist.asm):01576         ;* BREAKPOINTS.
FD79                  (       assist.asm):01577         GOADDR
FD79 3530             (       assist.asm):01578                 PULS    Y,X                               ; RECOVER RETURN ADDRESS
FD7B 3410             (       assist.asm):01579                 PSHS    X                                 ; STORE RETURN BACK
FD7D 2619             (       assist.asm):01580                 BNE     GONDFT                            ; IF NO CARRIAGE RETURN THEN NEW PC
                      (       assist.asm):01581         ;* DEFAULT PROGRAM COUNTER, SO FALL THROUGH IF
                      (       assist.asm):01582         ;* IMMEDIATE BREAKPOINT.
FD7F 1701B5           (       assist.asm):01583                 LBSR    CBKLDR                            ; SEARCH BREAKPOINTS
FD82 AE6C             (       assist.asm):01584                 LDX     12,S                              ; LOAD PROGRAM COUNTER
FD84                  (       assist.asm):01585         ARMBLP
FD84 5A               (       assist.asm):01586                 DECB                                      ; COUNT DOWN
FD85 2B16             (       assist.asm):01587                 BMI     ARMBK2                            ; DONE, NONE TO SINGLE TRACE
FD87 A630             (       assist.asm):01588                 LDA     -NUMBKP*2,Y                       ; PRE-FETCH OPCODE
FD89 ACA1             (       assist.asm):01589                 CMPX    ,Y++                              ; ? IS THIS A BREAKPOINT
FD8B 26F7             (       assist.asm):01590                 BNE     ARMBLP                            ; LOOP IF NOT
FD8D 813F             (       assist.asm):01591                 CMPA    #$3F                              ; ? SWI BREAKPOINTED
FD8F 2602             (       assist.asm):01592                 BNE     ARMNSW                            ; NO, SKIP SETTING OF PASS FLAG
FD91 97FB             (       assist.asm):01593                 STA     <SWIBFL                           ; SHOW UPCOMMING SWI NOT BRKPNT
FD93                  (       assist.asm):01594         ARMNSW
FD93 0C8F             (       assist.asm):01595                 INC     <MISFLG                           ; FLAG THRU A BREAKPOINT
FD95 160106           (       assist.asm):01596                 LBRA    CDOT                              ; DO SINGLE TRACE W/O BREAKPOINTS
                      (       assist.asm):01597         ;* OBTAIN NEW PROGRAM COUNTER
FD98                  (       assist.asm):01598         GONDFT
FD98 1700BB           (       assist.asm):01599                 LBSR    CDNUM                             ; OBTAIN NEW PROGRAM COUNTER
FD9B ED6C             (       assist.asm):01600                 STD     12,S                              ; STORE INTO STACK
FD9D                  (       assist.asm):01601         ARMBK2
FD9D 170197           (       assist.asm):01602                 LBSR    CBKLDR                            ; OBTAIN TABLE
FDA0 00FA             (       assist.asm):01603                 NEG     <BKPTCT                           ; COMPLEMENT TO SHOW ARMED
FDA2                  (       assist.asm):01604         ARMLOP
FDA2 5A               (       assist.asm):01605                 DECB                                      ; ? DONE
FDA3 2BC9             (       assist.asm):01606                 BMI     CNVRTS                            ; RETURN WHEN DONE
FDA5 A6B4             (       assist.asm):01607                 LDA     [,Y]                              ; LOAD OPCODE
FDA7 A730             (       assist.asm):01608                 STA     -NUMBKP*2,Y                       ; STORE INTO OPCODE TABLE
FDA9 863F             (       assist.asm):01609                 LDA     #$3F                              ; READY "SWI" OPCODE
FDAB A7B1             (       assist.asm):01610                 STA     [,Y++]                            ; STORE AND MOVE UP TABLE
FDAD 20F3             (       assist.asm):01611                 BRA     ARMLOP                            ; AND CONTINUE
                      (       assist.asm):01612                 SPC     3
                      (       assist.asm):01613         ;*******************CALL - CALL ADDRESS AS SUBROUTINE
FDAF                  (       assist.asm):01614         CCALL
FDAF 8DC8             (       assist.asm):01615                 BSR     GOADDR                            ; FETCH ADDRESS IF NEEDED
FDB1 357F             (       assist.asm):01616                 PULS    U,Y,X,DP,D,CC                     ; RESTORE USERS REGISTERS
FDB3 ADF1             (       assist.asm):01617                 JSR     [,S++]                            ; CALL USER SUBROUTINE
FDB5                  (       assist.asm):01618         CGOBRK
FDB5 3F               (       assist.asm):01619                 SWI                                       ; PERFORM BREAKPOINT
FDB6 0A               (       assist.asm):01620                 FCB     BRKPT                             ; FUNCTION
FDB7 20FC             (       assist.asm):01621                 BRA     CGOBRK                            ; LOOP UNTIL USER CHANGES PC
                      (       assist.asm):01622                 SPC     3
                      (       assist.asm):01623         ;****************MEMORY - DISPLAY/CHANGE MEMORY
                      (       assist.asm):01624         ;* CMEMN AND CMPADP ARE DIRECT ENTRY POINTS FROM
                      (       assist.asm):01625         ;* THE COMMAND HANDLER FOR QUICK COMMANDS
FDB9                  (       assist.asm):01626         CMEM
FDB9 17009A           (       assist.asm):01627                 LBSR    CDNUM                             ; OBTAIN ADDRESS
FDBC                  (       assist.asm):01628         CMEMN
FDBC DD9E             (       assist.asm):01629                 STD     <ADDR                             ; STORE DEFAULT
FDBE                  (       assist.asm):01630         CMEM2
FDBE 9E9E             (       assist.asm):01631                 LDX     <ADDR                             ; LOAD POINTER
FDC0 17FC17           (       assist.asm):01632                 LBSR    ZOUT2H                            ; SEND OUT HEX VALUE OF BYTE
FDC3 862D             (       assist.asm):01633                 LDA     #'-'                              ;  LOAD DELIMITER
FDC5 3F               (       assist.asm):01634                 SWI                                       ; SEND OUT
FDC6 01               (       assist.asm):01635                 FCB     OUTCH                             ; FUNCTION
FDC7                  (       assist.asm):01636         CMEM4
FDC7 17FF0B           (       assist.asm):01637                 LBSR    BLDNNB                            ; OBTAIN NEW BYTE VALUE
FDCA 270A             (       assist.asm):01638                 BEQ     CMENUM                            ; BRANCH IF NUMBER
                      (       assist.asm):01639         ;* COMA - SKIP BYTE
FDCC 812C             (       assist.asm):01640                 CMPA    #','                              ; ? COMMA
FDCE 260E             (       assist.asm):01641                 BNE     CMNOTC                            ; BRANCH NOT
FDD0 9F9E             (       assist.asm):01642                 STX     <ADDR                             ; UPDATE POINTER
FDD2 3001             (       assist.asm):01643                 LEAX    1,X                               ; TO NEXT BYTE
FDD4 20F1             (       assist.asm):01644                 BRA     CMEM4                             ; AND INPUT IT
FDD6                  (       assist.asm):01645         CMENUM
FDD6 D69C             (       assist.asm):01646                 LDB     <NUMBER+1                         ; LOAD LOW BYTE VALUE
FDD8 8D47             (       assist.asm):01647                 BSR     MUPDAT                            ; GO OVERLAY MEMORY BYTE
FDDA 812C             (       assist.asm):01648                 CMPA    #','                              ; ? CONTINUE WITH NO DISPLAY
FDDC 27E9             (       assist.asm):01649                 BEQ     CMEM4                             ; BRANCH YES
                      (       assist.asm):01650         ;* QUOTED STRING
FDDE                  (       assist.asm):01651         CMNOTC
FDDE 8127             (       assist.asm):01652                 CMPA    #''                               ; ? QUOTED STRING
FDE0 260C             (       assist.asm):01653                 BNE     CMNOTQ                            ; BRANCH NO
FDE2                  (       assist.asm):01654         CMESTR
FDE2 8D8B             (       assist.asm):01655                 BSR     READ                              ; OBTAIN NEXT CHARACTER
FDE4 8127             (       assist.asm):01656                 CMPA    #$27                              ; ? END OF QUOTED STRING
FDE6 270C             (       assist.asm):01657                 BEQ     CMSPCE                            ; YES, QUIT STRING MODE
FDE8 1F89             (       assist.asm):01658                 TFR     A,B                               ; TO B FOR SUBROUTINE
FDEA 8D35             (       assist.asm):01659                 BSR     MUPDAT                            ; GO UPDATE BYTE
FDEC 20F4             (       assist.asm):01660                 BRA     CMESTR                            ; GET NEXT CHARACTER
                      (       assist.asm):01661         ;* BLANK - NEXT BYTE
FDEE                  (       assist.asm):01662         CMNOTQ
FDEE 8120             (       assist.asm):01663                 CMPA    #$20                              ; ? BLANK FOR NEXT BYTE
FDF0 2606             (       assist.asm):01664                 BNE     CMNOTB                            ; BRANCH NOT
FDF2 9F9E             (       assist.asm):01665                 STX     <ADDR                             ; UPDATE POINTER
FDF4                  (       assist.asm):01666         CMSPCE
FDF4 3F               (       assist.asm):01667                 SWI                                       ; GIVE SPACE
FDF5 07               (       assist.asm):01668                 FCB     SPACE                             ; FUNCTION
FDF6 20C6             (       assist.asm):01669                 BRA     CMEM2                             ; NOW PROMPT FOR NEXT
                      (       assist.asm):01670         ;* LINE FEED - NEXT BYTE WITH ADDRESS
FDF8                  (       assist.asm):01671         CMNOTB
FDF8 810A             (       assist.asm):01672                 CMPA    #LF                               ; ? LINE FEED FOR NEXT BYTE
FDFA 2608             (       assist.asm):01673                 BNE     CMNOTL                            ; BRANCH NO
FDFC 860D             (       assist.asm):01674                 LDA     #CR                               ; GIVE CARRIAGE RETURN
FDFE 3F               (       assist.asm):01675                 SWI                                       ; TO CONSOLE
FDFF 01               (       assist.asm):01676                 FCB     OUTCH                             ; HANDLER
FE00 9F9E             (       assist.asm):01677                 STX     <ADDR                             ; STORE NEXT ADDRESS
FE02 200A             (       assist.asm):01678                 BRA     CMPADP                            ; BRANCH TO SHOW
                      (       assist.asm):01679         ;* UP ARROW - PREVIOUS BYTE AND ADDRESS
FE04                  (       assist.asm):01680         CMNOTL
FE04 815E             (       assist.asm):01681                 CMPA    #'^'                              ; ? UP ARROW FOR PREVIOUS BYTE
FE06 260A             (       assist.asm):01682                 BNE     CMNOTU                            ; BRANCH NOT
FE08 301E             (       assist.asm):01683                 LEAX    -2,X                              ; DOWN TO PREVIOUS BYTE
FE0A 9F9E             (       assist.asm):01684                 STX     <ADDR                             ; STORE NEW POINTER
FE0C                  (       assist.asm):01685         CMPADS
FE0C 3F               (       assist.asm):01686                 SWI                                       ; FORCE NEW LINE
FE0D 06               (       assist.asm):01687                 FCB     PCRLF                             ; FUNCTION
FE0E                  (       assist.asm):01688         CMPADP
FE0E 8D07             (       assist.asm):01689                 BSR     PRTADR                            ; GO PRINT ITS VALUE
FE10 20AC             (       assist.asm):01690                 BRA     CMEM2                             ; THEN PROMPT FOR INPUT
                      (       assist.asm):01691         ;* SLASH - NEXT BYTE WITH ADDRESS
FE12                  (       assist.asm):01692         CMNOTU
FE12 812F             (       assist.asm):01693                 CMPA    #'/'                              ; ? SLASH FOR CURRENT DISPLAY
FE14 27F6             (       assist.asm):01694                 BEQ     CMPADS                            ; YES, SEND ADDRESS
FE16 39               (       assist.asm):01695                 RTS                                       ; RETURN FROM COMMAND
                      (       assist.asm):01696                 SPC     1
                      (       assist.asm):01697         ;* PRINT CURRENT ADDRESS
FE17                  (       assist.asm):01698         PRTADR
FE17 9E9E             (       assist.asm):01699                 LDX     <ADDR                             ; LOAD POINTER VALUE
FE19 3410             (       assist.asm):01700                 PSHS    X                                 ; SAVE X ON STACK
FE1B 30E4             (       assist.asm):01701                 LEAX    ,S                                ; POINT TO IT FOR DISPLAY
FE1D 3F               (       assist.asm):01702                 SWI                                       ; DISPLAY POINTER IN HEX
FE1E 05               (       assist.asm):01703                 FCB     OUT4HS                            ; FUNCTION
FE1F 3590             (       assist.asm):01704                 PULS    PC,X                              ; RECOVER POINTER AND RETURN
                      (       assist.asm):01705                 SPC     1
                      (       assist.asm):01706         ;* UPDATE BYTE
FE21                  (       assist.asm):01707         MUPDAT
FE21 9E9E             (       assist.asm):01708                 LDX     <ADDR                             ; LOAD NEXT BYTE POINTER
FE23 E780             (       assist.asm):01709                 STB     ,X+                               ; STORE AND INCREMENT X
FE25 E11F             (       assist.asm):01710                 CMPB    -1,X                              ; ? SUCCESFULL STORE
FE27 2603             (       assist.asm):01711                 BNE     MUPBAD                            ; BRANCH FOR '?' IF NOT
FE29 9F9E             (       assist.asm):01712                 STX     <ADDR                             ; STORE NEW POINTER VALUE
FE2B 39               (       assist.asm):01713                 RTS                                       ; BACK TO CALLER
FE2C                  (       assist.asm):01714         MUPBAD
FE2C 3402             (       assist.asm):01715                 PSHS    A                                 ; SAVE A REGISTER
FE2E 863F             (       assist.asm):01716                 LDA     #'?'                              ; SHOW INVALID
FE30 3F               (       assist.asm):01717                 SWI                                       ; SEND OUT
FE31 01               (       assist.asm):01718                 FCB     OUTCH                             ; FUNCTION
FE32 3582             (       assist.asm):01719                 PULS    PC,A                              ; RETURN TO CALLER
                      (       assist.asm):01720                 SPC     3
                      (       assist.asm):01721         ;********************WINDOW  -  SET WINDOW VALUE
FE34                  (       assist.asm):01722         CWINDO
FE34 8D20             (       assist.asm):01723                 BSR     CDNUM                             ; OBTAIN WINDOW VALUE
FE36 DDA0             (       assist.asm):01724                 STD     <WINDOW                           ; STORE IT IN
FE38 39               (       assist.asm):01725                 RTS                                       ; END COMMAND
                      (       assist.asm):01726                 SPC     3
                      (       assist.asm):01727         ;******************DISPLAY - HIGH SPEED DISPLAY MEMORY
FE39                  (       assist.asm):01728         CDISP
FE39 8D1B             (       assist.asm):01729                 BSR     CDNUM                             ; FETCH ADDRESS
FE3B C4F0             (       assist.asm):01730                 ANDB    #$F0                              ; FORCE TO 16 BOUNDRY
FE3D 1F02             (       assist.asm):01731                 TFR     D,Y                               ; SAVE IN Y
FE3F 302F             (       assist.asm):01732                 LEAX    15,Y                              ; DEFAULT LENGTH
FE41 2504             (       assist.asm):01733                 BCS     CDISPS                            ; BRANCH IF END OF INPUT
FE43 8D11             (       assist.asm):01734                 BSR     CDNUM                             ; OBTAIN COUNT
FE45 30AB             (       assist.asm):01735                 LEAX    D,Y                               ; ASSUME COUNT, COMPUTE END ADDR
FE47                  (       assist.asm):01736         CDISPS
FE47 3430             (       assist.asm):01737                 PSHS    Y,X                               ; SETUP PARAMETERS FOR HSDATA
FE49 10A362           (       assist.asm):01738                 CMPD    2,S                               ; ? WAS IT COUNT
FE4C 2302             (       assist.asm):01739                 BLS     CDCNT                             ; BRANCH YES
FE4E EDE4             (       assist.asm):01740                 STD     ,S                                ; STORE HIGH ADDRESS
FE50                  (       assist.asm):01741         CDCNT
FE50 AD9DE18E         (       assist.asm):01742                 JSR     [VECTAB+.HSDTA,PCR]               ; CALL PRINT ROUTINE
FE54 35E0             (       assist.asm):01743                 PULS    PC,U,Y                            ; CLEAN STACK AND END COMMAND
                      (       assist.asm):01744                 SPC     1
                      (       assist.asm):01745         ;* OBTAIN NUMBER - ABORT IF NONE
                      (       assist.asm):01746         ;* ONLY DELIMITERS OF CR, BLANK, OR '/' ARE ACCEPTED
                      (       assist.asm):01747         ;* OUTPUT: D=VALUE, C=1 IF CARRIAGE RETURN DELMITER,
                      (       assist.asm):01748         ;*                                  ELSE C=0
FE56                  (       assist.asm):01749         CDNUM
FE56 17FE7E           (       assist.asm):01750                 LBSR    BLDNUM                            ; OBTAIN NUMBER
FE59 2609             (       assist.asm):01751                 BNE     CDBADN                            ; BRANCH IF INVALID
FE5B 812F             (       assist.asm):01752                 CMPA    #'/'                              ; ? VALID DELIMITER
FE5D 2205             (       assist.asm):01753                 BHI     CDBADN                            ; BRANCH IF NOT FOR ERROR
FE5F 810E             (       assist.asm):01754                 CMPA    #CR+1                             ; LEAVE COMPARE FOR CARRIAGE RET
FE61 DC9B             (       assist.asm):01755                 LDD     <NUMBER                           ; LOAD NUMBER
FE63 39               (       assist.asm):01756                 RTS                                       ; RETURN WITH COMPARE
FE64                  (       assist.asm):01757         CDBADN
FE64 16FAF2           (       assist.asm):01758                 LBRA    CMDBAD                            ; RETURN TO ERROR MECHANISM
                      (       assist.asm):01759                 SPC     3
                      (       assist.asm):01760         ;*****************PUNCH - PUNCH MEMORY IN S1-S9 FORMAT
FE67                  (       assist.asm):01761         CPUNCH
FE67 8DED             (       assist.asm):01762                 BSR     CDNUM                             ; OBTAIN START ADDRESS
FE69 1F02             (       assist.asm):01763                 TFR     D,Y                               ; SAVE IN Y
FE6B 8DE9             (       assist.asm):01764                 BSR     CDNUM                             ; OBTAIN END ADDRESS
FE6D 6FE2             (       assist.asm):01765                 CLR     ,-S                               ; SETUP PUNCH FUNCTION CODE
FE6F 3426             (       assist.asm):01766                 PSHS    Y,D                               ; STORE VALUES ON STACK
FE71                  (       assist.asm):01767         CCALBS
FE71 AD9DE16F         (       assist.asm):01768                 JSR     [VECTAB+.BSON,PCR]                ; INITIALIZE HANDLER
FE75 AD9DE16D         (       assist.asm):01769                 JSR     [VECTAB+.BSDTA,PCR]               ;  PERFORM FUNCTION
FE79 3401             (       assist.asm):01770                 PSHS    CC                                ; SAVE RETURN CODE
FE7B AD9DE169         (       assist.asm):01771                 JSR     [VECTAB+.BSOFF,PCR]               ; TURN OFF HANDLER
FE7F 3501             (       assist.asm):01772                 PULS    CC                                ; OBTAIN CONDITION CODE SAVED
FE81 26E1             (       assist.asm):01773                 BNE     CDBADN                            ; BRANCH IF ERROR
FE83 35B2             (       assist.asm):01774                 PULS    PC,Y,X,A                          ; RETURN FROM COMMAND
                      (       assist.asm):01775                 SPC     3
                      (       assist.asm):01776         ;*****************LOAD - LOAD MEMORY FROM S1-S9 FORMAT
FE85                  (       assist.asm):01777         CLOAD
FE85 8D01             (       assist.asm):01778                 BSR     CLVOFS                            ; CALL SETUP AND PASS CODE
FE87 01               (       assist.asm):01779                 FCB     1                                 ; LOAD FUNCTION CODE FOR PACKET
                      (       assist.asm):01780                 SPC     1
FE88                  (       assist.asm):01781         CLVOFS
FE88 33F1             (       assist.asm):01782                 LEAU    [,S++]                            ; LOAD CODE IN HIGH BYTE OF U
FE8A 33D4             (       assist.asm):01783                 LEAU    [,U]                              ; NOT CHANGING CC AND RESTORE S
FE8C 2703             (       assist.asm):01784                 BEQ     CLVDFT                            ; BRANCH IF CARRIAGE RETURN NEXT
FE8E 8DC6             (       assist.asm):01785                 BSR     CDNUM                             ; OBTAIN OFFSET
FE90 8C               (       assist.asm):01786                 FCB     SKIP2                             ;  SKIP DEFAULT OFFSET
FE91                  (       assist.asm):01787         CLVDFT
FE91 4F               (       assist.asm):01788                 CLRA                                      ; CREATE ZERO OFFSET
FE92 5F               (       assist.asm):01789                 CLRB                                      ; AS DEFAULT
FE93 344E             (       assist.asm):01790                 PSHS    U,DP,D                            ; SETUP CODE, NULL WORD, OFFSET
FE95 20DA             (       assist.asm):01791                 BRA     CCALBS                            ; ENTER CALL TO BS ROUTINES
                      (       assist.asm):01792                 SPC     3
                      (       assist.asm):01793         ;******************VERIFY - COMPARE MEMORY WITH FILES
FE97                  (       assist.asm):01794         CVER
FE97 8DEF             (       assist.asm):01795                 BSR     CLVOFS                            ; COMPUTE OFFSET IF ANY
FE99 FF               (       assist.asm):01796                 FCB     -1                                ; VERIFY FNCTN CODE FOR PACKET
                      (       assist.asm):01797                 SPC     3
                      (       assist.asm):01798         ;*******************TRACE - TRACE INSTRUCTIONS
                      (       assist.asm):01799         ;******************* . - SINGLE STEP TRACE
FE9A                  (       assist.asm):01800         CTRACE
FE9A 8DBA             (       assist.asm):01801                 BSR     CDNUM                             ; OBTAIN TRACE COUNT
FE9C DD91             (       assist.asm):01802                 STD     <TRACEC                           ; STORE COUNT
FE9E                  (       assist.asm):01803         CDOT
FE9E 3262             (       assist.asm):01804                 LEAS    2,S                               ; RID COMMAND RETURN FROM STACK
FEA0                  (       assist.asm):01805         CTRCE3
FEA0 EEF80A           (       assist.asm):01806                 LDU     [10,S]                            ; LOAD OPCODE TO EXECUTE
FEA3 DF99             (       assist.asm):01807                 STU     <LASTOP                           ; STORE FOR TRACE INTERRUPT
FEA5 DEF6             (       assist.asm):01808                 LDU     <VECTAB+.PTM                      ; LOAD PTM ADDRESS
FEA7 CC0701           (       assist.asm):01809                 LDD     #$0701                            ; 7,1 CYCLES DOWN+CYCLES UP
FEAA ED42             (       assist.asm):01810                 STD     PTMTM1-PTM,U                      ; START NMI TIMEOUT
FEAC 3B               (       assist.asm):01811                 RTI                                       ; RETURN FOR ONE INSTRUCTION
                      (       assist.asm):01812                 SPC     3
                      (       assist.asm):01813         ;*************NULLS  -  SET NEW LINE AND CHAR PADDING
FEAD                  (       assist.asm):01814         CNULLS
FEAD 8DA7             (       assist.asm):01815                 BSR     CDNUM                             ;  OBTAIN NEW LINE PAD
FEAF DDF2             (       assist.asm):01816                 STD     <VECTAB+.PAD                      ;  RESET VALUES
FEB1 39               (       assist.asm):01817                 RTS                                       ; END COMMAND
                      (       assist.asm):01818                 SPC     3
                      (       assist.asm):01819         ;******************STLEVEL - SET STACK TRACE LEVEL
FEB2                  (       assist.asm):01820         CSTLEV
FEB2 2705             (       assist.asm):01821                 BEQ     STLDFT                            ; TAKE DEFAULT
FEB4 8DA0             (       assist.asm):01822                 BSR     CDNUM                             ; OBTAIN NEW STACK LEVEL
FEB6 DDF8             (       assist.asm):01823                 STD     <SLEVEL                           ; STORE NEW ENTRY
FEB8 39               (       assist.asm):01824                 RTS                                       ; TO COMMAND HANDLER
FEB9                  (       assist.asm):01825         STLDFT
FEB9 306E             (       assist.asm):01826                 LEAX    14,S                              ; COMPUTE NMI COMPARE
FEBB 9FF8             (       assist.asm):01827                 STX     <SLEVEL                           ; AND STORE IT
FEBD 39               (       assist.asm):01828                 RTS                                       ; END COMMAND
                      (       assist.asm):01829                 SPC     3
                      (       assist.asm):01830         ;******************OFFSET - COMPUTE SHORT AND LONG
                      (       assist.asm):01831         ;******************                  BRANCH OFFSETS
FEBE                  (       assist.asm):01832         COFFS
FEBE 8D96             (       assist.asm):01833                 BSR     CDNUM                             ; OBTAIN INSTRUCTION ADDRESS
FEC0 1F01             (       assist.asm):01834                 TFR     D,X                               ; USE AS FROM ADDRESS
FEC2 8D92             (       assist.asm):01835                 BSR     CDNUM                             ; OBTAIN TO ADDRESS
                      (       assist.asm):01836         ;* D=TO INSTRUCTION, X=FROM INSTRUCTION OFFSET BYTE(S)
FEC4 3001             (       assist.asm):01837                 LEAX    1,X                               ; ADJUST FOR                    ;*+2 SHORT BRANCH
FEC6 3430             (       assist.asm):01838                 PSHS    Y,X                               ; STORE WORK WORD AND VALUE ON S
FEC8 A3E4             (       assist.asm):01839                 SUBD    ,S                                ; FIND OFFSET
FECA EDE4             (       assist.asm):01840                 STD     ,S                                ; SAVE OVER STACK
FECC 3061             (       assist.asm):01841                 LEAX    1,S                               ; POINT FOR ONE BYTE DISPLAY
FECE 1D               (       assist.asm):01842                 SEX                                       ; SIGN EXTEND LOW BYTE
FECF A1E4             (       assist.asm):01843                 CMPA    ,S                                ; ?  VALID ONE BYTE OFFSET
FED1 2602             (       assist.asm):01844                 BNE     COFNO1                            ; BRANCH IF NOT
FED3 3F               (       assist.asm):01845                 SWI                                       ; SHOW ONE BYTE OFFSET
FED4 04               (       assist.asm):01846                 FCB     OUT2HS                            ; FUNCTION
FED5                  (       assist.asm):01847         COFNO1
FED5 EEE4             (       assist.asm):01848                 LDU     ,S                                ; RELOAD OFFSET
FED7 335F             (       assist.asm):01849                 LEAU    -1,U                              ; CONVERT TO LONG BRANCH OFFSET
FED9 EF84             (       assist.asm):01850                 STU     ,X                                ; STORE BACK WHERE X POINTS NOW
FEDB 3F               (       assist.asm):01851                 SWI                                       ; SHOW TWO BYTE OFFSET
FEDC 05               (       assist.asm):01852                 FCB     OUT4HS                            ; FUNCTION
FEDD 3F               (       assist.asm):01853                 SWI                                       ; FORCE NEW LINE
FEDE 06               (       assist.asm):01854                 FCB     PCRLF                             ; FUNCTION
FEDF 3596             (       assist.asm):01855                 PULS    PC,X,D                            ; RESTORE STACK AND END COMMAND
                      (       assist.asm):01856         ;*H
                      (       assist.asm):01857                 SPC     2
                      (       assist.asm):01858         ;*************
                      (       assist.asm):01859         ;*BREAKPOINT - DISPLAY/ENTER/DELETE/CLEAR
                      (       assist.asm):01860         ;*             BREAKPOINTS
                      (       assist.asm):01861         ;*************
FEE1                  (       assist.asm):01862         CBKPT
FEE1 2723             (       assist.asm):01863                 BEQ     CBKDSP                            ; BRANCH DISPLAY OF JUST 'B'
FEE3 17FDF1           (       assist.asm):01864                 LBSR    BLDNUM                            ;  ATTEMPT VALUE ENTRY
FEE6 272C             (       assist.asm):01865                 BEQ     CBKADD                            ;  BRANCH TO ADD IF SO
FEE8 812D             (       assist.asm):01866                 CMPA    #'-'                              ;  ? CORRECT DELIMITER
FEEA 263E             (       assist.asm):01867                 BNE     CBKERR                            ;  NO, BRANCH FOR ERROR
FEEC 17FDE8           (       assist.asm):01868                 LBSR    BLDNUM                            ; ATTEMPT DELETE VALUE
FEEF 2703             (       assist.asm):01869                 BEQ     CBKDLE                            ;  GOT ONE, GO DELETE IT
FEF1 0FFA             (       assist.asm):01870                 CLR     <BKPTCT                           ;  WAS 'B -', SO ZERO COUNT
FEF3                  (       assist.asm):01871         CBKRTS
FEF3 39               (       assist.asm):01872                 RTS                                       ; END COMMAND
                      (       assist.asm):01873         ;* DELETE THE ENTRY
FEF4                  (       assist.asm):01874         CBKDLE
FEF4 8D3F             (       assist.asm):01875                 BSR     CBKSET                            ;  SETUP REGISTERS AND VALUE
FEF6                  (       assist.asm):01876         CBKDLP
FEF6 5A               (       assist.asm):01877                 DECB                                      ; ? ANY ENTRIES IN TABLE
FEF7 2B31             (       assist.asm):01878                 BMI     CBKERR                            ; BRANCH NO, ERROR
FEF9 ACA1             (       assist.asm):01879                 CMPX    ,Y++                              ;  ? IS THIS THE ENTRY
FEFB 26F9             (       assist.asm):01880                 BNE     CBKDLP                            ;  NO, TRY NEXT
                      (       assist.asm):01881         ;* FOUND, NOW MOVE OTHERS UP IN ITS PLACE
FEFD                  (       assist.asm):01882         CBKDLM
FEFD AEA1             (       assist.asm):01883                 LDX     ,Y++                              ;  LOAD NEXT ONE UP
FEFF AF3C             (       assist.asm):01884                 STX     -4,Y                              ; MOVE DOWN BY ONE
FF01 5A               (       assist.asm):01885                 DECB    ? DONE
FF02 2AF9             (       assist.asm):01886                 BPL     CBKDLM                            ;  NO, CONTINUE MOVE
FF04 0AFA             (       assist.asm):01887                 DEC     <BKPTCT                           ;  DECREMENT BREAKPOINT COUNT
FF06                  (       assist.asm):01888         CBKDSP
FF06 8D2D             (       assist.asm):01889                 BSR     CBKSET                            ;  SETUP REGISTERS AND LOAD VALUE
FF08 27E9             (       assist.asm):01890                 BEQ     CBKRTS                            ;  RETURN IF NONE TO DISPLY
FF0A                  (       assist.asm):01891         CBKDSL
FF0A 30A1             (       assist.asm):01892                 LEAX    ,Y++                              ;  POINT TO NEXT ENTRY
FF0C 3F               (       assist.asm):01893                 SWI                                       ; DISPLAY IN HEX
FF0D 05               (       assist.asm):01894                 FCB     OUT4HS                            ;  FUNCTION
FF0E 5A               (       assist.asm):01895                 DECB    COUNT                             ; DOWN
FF0F 26F9             (       assist.asm):01896                 BNE     CBKDSL                            ; LOOP IF NGABLE RAM
FF11 3F               (       assist.asm):01897                 SWI                                       ; SKIP TO NEW LINK
FF12 06               (       assist.asm):01898                 FCB     PCRLF                             ;  FUNCTIONRTS
FF13 39               (       assist.asm):01899                 RTS
                      (       assist.asm):01900         ;* ADD NEW ENTRY
FF14                  (       assist.asm):01901         CBKADD
FF14 5A               (       assist.asm):01902                 DECB                                      ; RESTORE BYTE
FF15 C108             (       assist.asm):01903                 CMPB    #NUMBKP                           ;  ? ALREADY FULL
FF17 2711             (       assist.asm):01904                 BEQ     CBKERR                            ;  BRANCH ERROR IF SO
FF19 A684             (       assist.asm):01905                 LDA     ,X                                ;  LOAD BYTE TO TRAP
FF1B E784             (       assist.asm):01906                 STB     ,X                                ;  TRY TO CHANGE
FF1D E184             (       assist.asm):01907                 CMPB    ,X                                ;   ? CHANGEABLE RAM
FF1F 2609             (       assist.asm):01908                 BNE     CBKERR                            ;   BRANCH ERROR IF NOT
FF21 A784             (       assist.asm):01909                 STA     ,X                                ;   RESTORE BYTE
FF23                  (       assist.asm):01910         CBKADL
FF23 5A               (       assist.asm):01911                 DECB                                      ; COUNT DOWN
FF24 2B07             (       assist.asm):01912                 BMI     CBKADT                            ; BRANCH IF DONE TO ADD IT
FF26 ACA1             (       assist.asm):01913                 CMPX    ,Y++                              ; ? ENTRY ALREADY HERE
FF28 26F9             (       assist.asm):01914                 BNE     CBKADL                            ; LOOP IF NOT
FF2A                  (       assist.asm):01915         CBKERR
FF2A 16FA2C           (       assist.asm):01916                 LBRA    CMDBAD                            ; RETURN TO ERROR PRODUCE
FF2D                  (       assist.asm):01917         CBKADT
FF2D AFA4             (       assist.asm):01918                 STX     ,Y                                ; ADD THIS ENTRY
FF2F 6F31             (       assist.asm):01919                 CLR     -NUMBKP*2+1,Y                     ; CLEAR OPTIONAL BYTE
FF31 0CFA             (       assist.asm):01920                 INC     <BKPTCT                           ;  ADD ONE TO COUNT
FF33 20D1             (       assist.asm):01921                 BRA     CBKDSP                            ; AND NOW DISPLAY ALL OF 'EM'
                      (       assist.asm):01922         ;* SETUP REGISTERS FOR SCAN
FF35                  (       assist.asm):01923         CBKSET
FF35 9E9B             (       assist.asm):01924                 LDX     <NUMBER                           ; LOAD VALUE DESIRED
FF37                  (       assist.asm):01925         CBKLDR
FF37 318DE077         (       assist.asm):01926                 LEAY    BKPTBL,PCR                        ; LOAD START OF TABLE
FF3B D6FA             (       assist.asm):01927                 LDB     <BKPTCT                           ; LOAD ENTRY COUNT
FF3D 39               (       assist.asm):01928                 RTS     RETURN
                      (       assist.asm):01929                 SPC     2
                      (       assist.asm):01930         ;*****************
                      (       assist.asm):01931         ;*ENCODE  -  ENCODE A POSTBYTE
                      (       assist.asm):01932         
FF3E                  (       assist.asm):01933         CENCDE
FF3E 6FE2             (       assist.asm):01934                 CLR     ,-S                               ; DEFAULT TO NOT INDIRECT
FF40 5F               (       assist.asm):01935                 CLRB                                      ; ZERO POSTBYTE VALUE
FF41 308C3F           (       assist.asm):01936                 LEAX    <CONV1,PCR                        ; START TABLE SEARCH
FF44 3F               (       assist.asm):01937                 SWI                                       ; OBTAIN FIRST CHARACTER
FF45 00               (       assist.asm):01938                 FCB     INCHNP                            ; FUNCTION
FF46 815B             (       assist.asm):01939                 CMPA    #'['                              ; ? INDIRECT HERE
FF48 2606             (       assist.asm):01940                 BNE     CEN2                              ; BRANCH IF NOT
FF4A 8610             (       assist.asm):01941                 LDA     #$10                              ; SET INDIRECT BIT ON
FF4C A7E4             (       assist.asm):01942                 STA     ,S                                ; SAVE FOR LATER
FF4E                  (       assist.asm):01943         CENGET
FF4E 3F               (       assist.asm):01944                 SWI                                       ; OBTAIN NEXT CHARACTER
FF4F 00               (       assist.asm):01945                 FCB     INCHNP                            ; FUNCTION
FF50                  (       assist.asm):01946         CEN2
FF50 810D             (       assist.asm):01947                 CMPA    #CR                               ; ? END OF ENTRY
FF52 270C             (       assist.asm):01948                 BEQ     CEND1                             ; BRANCH YES
FF54                  (       assist.asm):01949         CENLP1
FF54 6D84             (       assist.asm):01950                 TST     ,X                                ; ? END OF TABLE
FF56 2BD2             (       assist.asm):01951                 BMI     CBKERR                            ; BRANCH ERROR IF SO
FF58 A181             (       assist.asm):01952                 CMPA    ,X++                              ; ? THIS THE CHARACTER
FF5A 26F8             (       assist.asm):01953                 BNE     CENLP1                            ; BRANCH IF NOT
FF5C EB1F             (       assist.asm):01954                 ADDB    -1,X                              ; ADD THIS VALUE
FF5E 20EE             (       assist.asm):01955                 BRA     CENGET                            ; GET NEXT INPUT
FF60                  (       assist.asm):01956         CEND1
FF60 308C49           (       assist.asm):01957                 LEAX    <CONV2,PCR                        ; POINT AT TABLE 2
FF63 1F98             (       assist.asm):01958                 TFR     B,A                               ; SAVE COPY IN A
FF65 8460             (       assist.asm):01959                 ANDA    #$60                              ; ISOLATE REGISTER MASK
FF67 AAE4             (       assist.asm):01960                 ORA     ,S                                ; ADD IN INDIRECTION BIT
FF69 A7E4             (       assist.asm):01961                 STA     ,S                                ; SAVE BACK AS POSTBYTE SKELETON
FF6B C49F             (       assist.asm):01962                 ANDB    #$9F                              ; CLEAR REGISTER BITS
FF6D                  (       assist.asm):01963         CENLP2
FF6D 6D84             (       assist.asm):01964                 TST     ,X                                ; ? END OF TABLE
FF6F 27B9             (       assist.asm):01965                 BEQ     CBKERR                            ; RANCH ERROR IF SO
FF71 E181             (       assist.asm):01966                 CMPB    ,X++                              ; ? SAME VALUE
FF73 26F8             (       assist.asm):01967                 BNE     CENLP2                            ; LOOP IF NOT
FF75 E61F             (       assist.asm):01968                 LDB     -1,X                              ; LOAD RESULT VALUE
FF77 EAE4             (       assist.asm):01969                 ORB     ,S                                ; ADD TO BASE SKELETON
FF79 E7E4             (       assist.asm):01970                 STB     ,S                                ; SAVE POSTBYTE ON STACK
FF7B 30E4             (       assist.asm):01971                 LEAX    ,S                                ; POINT TO IT
FF7D 3F               (       assist.asm):01972                 SWI                                       ; SEND OUT AS HEX
FF7E 04               (       assist.asm):01973                 FCB     OUT2HS                            ; FUNCTION
FF7F 3F               (       assist.asm):01974                 SWI                                       ; TO NEXT LINE
FF80 06               (       assist.asm):01975                 FCB     PCRLF                             ; FUNCTION
FF81 3584             (       assist.asm):01976                 PULS    PC,B                              ; END OF COMMAND
                      (       assist.asm):01977                 SPC     1
                      (       assist.asm):01978         ;* TABLE ONE DEFINES VALID INPUT IN SEQUENCE
FF83                  (       assist.asm):01979         CONV1
FF83 4104420544064801 (       assist.asm):01980                 FCB     'A',$04,'B',$05,'D',$06,'H',$01
FF8B 4801480148002C00 (       assist.asm):01981                 FCB     'H',$01,'H',$01,'H',$00,',',$00
FF93 2D092D0153705930 (       assist.asm):01982                 FCB     '-',$09,'-',$01,'S',$70,'Y',$30
FF9B 555058102B072B01 (       assist.asm):01983                 FCB     'U',$50,'X',$10,'+',$07,'+',$01
FFA3 5080430052005D00 (       assist.asm):01984                 FCB     'P',$80,'C',$00,'R',$00,']',$00
FFAB FF               (       assist.asm):01985                 FCB     $FF END OF TABLE
                      (       assist.asm):01986         ;*CONV2 USES ABOVE CONVERSION TO SET POSTBYTE
                      (       assist.asm):01987         ;*                             BIT SKELETON.
FFAC                  (       assist.asm):01988         CONV2
FFAC 10841100         (       assist.asm):01989                 FDB     $1084,$1100                       ; R,        H,R
FFB0 12881389         (       assist.asm):01990                 FDB     $1288,$1389                       ; HH,R      HHHH,R
FFB4 14861585         (       assist.asm):01991                 FDB     $1486,$1585                       ; A,R       B,R
FFB8 168B1780         (       assist.asm):01992                 FDB     $168B,$1780                       ; D,R       ,R+
FFBC 18811982         (       assist.asm):01993                 FDB     $1881,$1982                       ; ,R++      ,-R
FFC0 1A83828C         (       assist.asm):01994                 FDB     $1A83,$828C                       ; ,--R      HH,PCR
FFC4 838D039F         (       assist.asm):01995                 FDB     $838D,$039F                       ; HHHH,PCR  [HHHH]
FFC8 00               (       assist.asm):01996                 FCB     0                                 ; END OF TABLE
                      (       assist.asm):01997                 SPC     3
                      (       assist.asm):01998         ;****************************************************
                      (       assist.asm):01999         ;*            DEFAULT INTERRUPT TRANSFERS           ;*
                      (       assist.asm):02000         ;****************************************************
FFC9                  (       assist.asm):02001         RSRVD
FFC9 6E9DDFF9         (       assist.asm):02002                 JMP     [VECTAB+.RSVD,PCR]                ; RESERVED VECTOR
FFCD                  (       assist.asm):02003         SWI3
FFCD 6E9DDFF7         (       assist.asm):02004                 JMP     [VECTAB+.SWI3,PCR]                ; SWI3 VECTOR
FFD1                  (       assist.asm):02005         SWI2
FFD1 6E9DDFF5         (       assist.asm):02006                 JMP     [VECTAB+.SWI2,PCR]                ; SWI2 VECTOR
FFD5                  (       assist.asm):02007         FIRQ
FFD5 6E9DDFF3         (       assist.asm):02008                 JMP     [VECTAB+.FIRQ,PCR]                ; FIRQ VECTOR
FFD9                  (       assist.asm):02009         IRQ
FFD9 6E9DDFF1         (       assist.asm):02010                 JMP     [VECTAB+.IRQ,PCR]                 ; IRQ VECTOR
FFDD                  (       assist.asm):02011         SWI
FFDD 6E9DDFEF         (       assist.asm):02012                 JMP     [VECTAB+.SWI,PCR]                 ; SWI VECTOR
FFE1                  (       assist.asm):02013         NMI
FFE1 6E9DDFED         (       assist.asm):02014                 JMP     [VECTAB+.NMI,PCR]                 ; NMI VECTOR
                      (       assist.asm):02015                 SPC     3
                      (       assist.asm):02016         ;******************************************************
                      (       assist.asm):02017         ;*             ASSIST09 HARDWARE VECTOR TABLE
                      (       assist.asm):02018         ;*  THIS TABLE IS USED IF THE ASSIST09 ROM ADDRESSES
                      (       assist.asm):02019         ;*  THE MC6809 HARDWARE VECTORS.
                      (       assist.asm):02020         ;******************************************************
                      (       assist.asm):02021                 ORG     ROMBEG+ROMSIZ-16                  ; SETUP HARDWARE VECTORS
FFF0 FFC9             (       assist.asm):02022                 FDB     RSRVD                             ; RESERVED SLOT
FFF2 FFCD             (       assist.asm):02023                 FDB     SWI3                              ; SOFTWARE INTERRUPT 3
FFF4 FFD1             (       assist.asm):02024                 FDB     SWI2                              ; SOFTWARE INTERRUPT 2
FFF6 FFD5             (       assist.asm):02025                 FDB     FIRQ                              ; FAST INTERRUPT REQUEST
FFF8 FFD9             (       assist.asm):02026                 FDB     IRQ                               ; INTERRUPT REQUEST
FFFA FFDD             (       assist.asm):02027                 FDB     SWI                               ; SOFTWARE INTERRUPT
FFFC FFE1             (       assist.asm):02028                 FDB     NMI                               ; NON-MASKABLE INTERRUPT
FFFE F82A             (       assist.asm):02029                 FDB     RESET                             ; RESTART
                      (       assist.asm):02030                 SPC     3
                      (       assist.asm):02031         ;* END RESET
                      (       assist.asm):02032         ;* #

Symbol Table:
[ G] .ACIA                            002E
[ G] .AVTBL                           0000
[ G] .BSDTA                           0024
[ G] .BSOFF                           0026
[ G] .BSON                            0022
[ G] .CIDTA                           0016
[ G] .CIOFF                           0018
[ G] .CION                            0014
[ G] .CMDL1                           0002
[ G] .CMDL2                           002C
[ G] .CODTA                           001C
[ G] .COOFF                           001E
[ G] .COON                            001A
[ G] .ECHO                            0032
[ G] .EXPAN                           002A
[ G] .FIRQ                            000A
[ G] .HSDTA                           0020
[ G] .IRQ                             000C
[ G] .NMI                             0010
[ G] .PAD                             0030
[ G] .PAUSE                           0028
[ G] .PTM                             0034
[ G] .RESET                           0012
[ G] .RSVD                            0004
[ G] .SWI                             000E
[ G] .SWI2                            0008
[ G] .SWI3                            0006
[ G] ACIA                             EF04
[ G] ADDR                             DF9E
[ G] ARMBK2                           FD9D
[ G] ARMBLP                           FD84
[ G] ARMLOP                           FDA2
[ G] ARMNSW                           FD93
[ G] BASEPG                           DF9D
[ G] BELL                             0007
[ G] BKPTBL                           DFB2
[ G] BKPTCT                           DFFA
[ G] BKPTOP                           DFA2
[ G] BLD2                             F815
[ G] BLD3                             F821
[ G] BLDBAD                           FD3C
[ G] BLDHEX                           FD43
[ G] BLDHXC                           FD45
[ G] BLDHXI                           FD3F
[ G] BLDNNB                           FCD5
[ G] BLDNUM                           FCD7
[ G] BLDRTN                           F828
[ G] BLDSHF                           FD4E
[ G] BLDVTR                           F800
[ G] BRKPT                            000A
[ G] BSDCMP                           FB5D
[ G] BSDEOL                           FB63
[ G] BSDLD1                           FB33
[ G] BSDLD2                           FB35
[ G] BSDNXT                           FB53
[ G] BSDPUN                           FB85
[ G] BSDSRT                           FB61
[ G] BSDTA                            FB2B
[ G] BSOFF                            FB1A
[ G] BSOFLP                           FB26
[ G] BSON                             FB0E
[ G] BSON2                            FB15
[ G] BSPEOF                           FBE2
[ G] BSPGO                            FB96
[ G] BSPMRE                           FBB9
[ G] BSPOK                            FBA2
[ G] BSPSTR                           FBDF
[ G] BSPUN2                           FBDA
[ G] BSPUNC                           FBDC
[ G] BYTE                             FB68
[ G] BYTHEX                           FB7C
[ G] BYTRTS                           FB7B
[ G] CAN                              0018
[ G] CBKADD                           FF14
[ G] CBKADL                           FF23
[ G] CBKADT                           FF2D
[ G] CBKDLE                           FEF4
[ G] CBKDLM                           FEFD
[ G] CBKDLP                           FEF6
[ G] CBKDSL                           FF0A
[ G] CBKDSP                           FF06
[ G] CBKERR                           FF2A
[ G] CBKLDR                           FF37
[ G] CBKPT                            FEE1
[ G] CBKRTS                           FEF3
[ G] CBKSET                           FF35
[ G] CCALBS                           FE71
[ G] CCALL                            FDAF
[ G] CDBADN                           FE64
[ G] CDCNT                            FE50
[ G] CDISP                            FE39
[ G] CDISPS                           FE47
[ G] CDNUM                            FE56
[ G] CDOT                             FE9E
[ G] CEN2                             FF50
[ G] CENCDE                           FF3E
[ G] CEND1                            FF60
[ G] CENGET                           FF4E
[ G] CENLP1                           FF54
[ G] CENLP2                           FF6D
[ G] CFLEX                            FC3D
[ G] CGO                              FD76
[ G] CGOBRK                           FDB5
[ G] CHKABT                           FA59
[ G] CHKRTN                           FA62
[ G] CHKSEC                           FA61
[ G] CHKWT                            FA63
[ G] ci1                              F83D
[ G] CIDTA                            FADD
[ G] CIOFF                            FAF8
[ G] CION                             FAEB
[ G] CIRTN                            FAEA
[ G] CLOAD                            FE85
[ G] CLVDFT                           FE91
[ G] CLVOFS                           FE88
[ G] CMD                              F8F4
[ G] CMD2                             F932
[ G] CMD3                             F945
[ G] CMDBAD                           F959
[ G] CMDCMP                           F974
[ G] CMDDDL                           F8FE
[ G] CMDFLS                           F969
[ G] CMDGOT                           F94A
[ G] CMDMEM                           F98D
[ G] CMDNEP                           F8F6
[ G] CMDNOL                           F907
[ G] CMDSCH                           F950
[ G] CMDSIZ                           F96C
[ G] CMDSME                           F964
[ G] CMDTB2                           F998
[ G] CMDTBL                           F999
[ G] CMDXQT                           F984
[ G] CMEM                             FDB9
[ G] CMEM2                            FDBE
[ G] CMEM4                            FDC7
[ G] CMEMN                            FDBC
[ G] CMENUM                           FDD6
[ G] CMESTR                           FDE2
[ G] CMNOTB                           FDF8
[ G] CMNOTC                           FDDE
[ G] CMNOTL                           FE04
[ G] CMNOTQ                           FDEE
[ G] CMNOTU                           FE12
[ G] CMPADP                           FE0E
[ G] CMPADS                           FE0C
[ G] CMSPCE                           FDF4
[ G] CNULLS                           FEAD
[ G] CNVGOT                           FD6A
[ G] CNVHEX                           FD58
[ G] CNVOK                            FD6C
[ G] CNVRTS                           FD6E
[ G] CODTA                            FAF9
[ G] CODTAD                           FB02
[ G] CODTAO                           FB05
[ G] CODTRT                           FB00
[ G] COFFS                            FEBE
[ G] COFNO1                           FED5
[ G] CONV1                            FF83
[ G] CONV2                            FFAC
[ G] COOFF                            FAF8
[ G] COON                             FAEB
[ G] CPUNCH                           FE67
[ G] CR                               000D
[ G] CREG                             FC40
[ G] CSTLEV                           FEB2
[ G] CTRACE                           FE9A
[ G] CTRCE3                           FEA0
[ G] CVER                             FE97
[ G] CWINDO                           FE34
[ G] DELIM                            DF8E
[ G] DFTCHP                           0000
[ G] DFTNLP                           0000
[ G] DLE                              0010
[ G] EOT                              0004
[ G] ERRMSG                           FABE
[ G] ERROR                            FACF
[ G] EXP1                             FCDF
[ G] EXP2                             FCFD
[ G] EXPADD                           FD19
[ G] EXPCDL                           FD0D
[ G] EXPCHM                           FD21
[ G] EXPDLM                           FCE1
[ G] EXPRTN                           FCFB
[ G] EXPSUB                           FD2C
[ G] EXPTDI                           FD03
[ G] EXPTDL                           FD05
[ G] EXPTRM                           FD38
[ G] FIRQ                             FFD5
[ G] FIRQR                            FABD
[ G] GOADDR                           FD79
[ G] GONDFT                           FD98
[ G] HERE                             E000
[ G] HIVTR                            0034
[ G] HSBLNK                           FBF3
[ G] HSDRTN                           FC3A
[ G] HSDTA                            FBEF
[ G] HSHCHR                           FC1E
[ G] HSHCOK                           FC28
[ G] HSHDOT                           FC26
[ G] HSHLNE                           FC07
[ G] HSHNXT                           FC13
[ G] HSHTTL                           FBF9
[ G] INCHNP                           0000
[ G] INITVT                           F841
[ G] INTVE                            F87A
[ G] INTVS                            F86D
[ G] IRQ                              FFD9
[ G] IRQR                             FAD9
[ G] LASTOP                           DF99
[ G] LDDP                             FAC2
[ G] LF                               000A
[ G] MISFLG                           DF8F
[ G] MONITR                           0008
[ G] MSHOWP                           FA7A
[ G] MUPBAD                           FE2C
[ G] MUPDAT                           FE21
[ G] NMI                              FFE1
[ G] NMICON                           FAB8
[ G] NMIR                             FA7E
[ G] NMITRC                           FAB1
[ G] NUMBER                           DF9B
[ G] NUMBKP                           0008
[ G] NUMFUN                           000B
[ G] NUMVTR                           001B
[ G] OUT2HS                           0004
[ G] OUT4HS                           0005
[ G] OUTCH                            0001
[ G] PAUSE                            000B
[ G] PAUSER                           DFFC
[ G] PCNTER                           DF93
[ G] PCRLF                            0006
[ G] PDATA                            0003
[ G] PDATA1                           0002
[ G] PROMPT                           003E
[ G] PRTADR                           FE17
[ G] PSTACK                           DF95
[ G] PTM                              E808
[ G] PTMC13                           E808
[ G] PTMC2                            E809
[ G] PTMSTA                           E809
[ G] PTMTM1                           E80A
[ G] PTMTM2                           E80C
[ G] PTMTM3                           E80E
[ G] RAMOFS                           FFFFE700
[ G] READ                             FD6F
[ G] REG4                             FC8A
[ G] REGAGN                           FCB9
[ G] REGCHG                           FC66
[ G] REGCNG                           FC93
[ G] REGMSK                           FC46
[ G] REGNXC                           FCA7
[ G] REGP1                            FC6E
[ G] REGP2                            FC77
[ G] REGP3                            FC88
[ G] REGPRS                           FAB4
[ G] REGPRT                           FC65
[ G] REGRTN                           FC91
[ G] REGSKP                           FCA0
[ G] REGTF1                           FCBF
[ G] REGTF2                           FCCC
[ G] REGTWO                           FCB1
[ G] RESET                            F82A
[ G] RESET2                           F830
[ G] ROM2OF                           F000
[ G] ROM2WK                           DF66
[ G] ROMBEG                           F800
[ G] ROMSIZ                           0800
[ G] RSRVD                            FFC9
[ G] RSRVDR                           FAD9
[ G] RSTACK                           DF97
[ G] RTI                              FABD
[ G] RTS                              FAF8
[ G] SEND                             F9ED
[ G] SIGNON                           F8C6
[ G] SKIP2                            008C
[ G] SLEVEL                           DFF8
[ G] SPACE                            0007
[ G] STACK                            DF51
[ G] STLDFT                           FEB9
[ G] SWI                              FFDD
[ G] SWI2                             FFD1
[ G] SWI2R                            FAD9
[ G] SWI3                             FFCD
[ G] SWI3R                            FAD9
[ G] SWIBFL                           DFFB
[ G] SWICNT                           DF90
[ G] SWIDNE                           F8B2
[ G] SWILP                            F8A5
[ G] SWIR                             F892
[ G] SWIVTB                           F87A
[ G] TRACEC                           DF91
[ G] TSTACK                           DF51
[ G] VCTRSW                           0009
[ G] VECTAB                           DFC2
[ G] WINDOW                           DFA0
[ G] WORKPG                           DF00
[ G] XQCIDT                           FA73
[ G] XQPAUS                           FA6F
[ G] ZBKCMD                           FAD6
[ G] ZBKPNT                           FAD4
[ G] ZIN2                             FA2B
[ G] ZINCH                            FA12
[ G] ZINCHP                           FA10
[ G] ZMONT2                           F8E3
[ G] ZMONTR                           F8CF
[ G] ZOT2HS                           F9F3
[ G] ZOT4HS                           F9F1
[ G] ZOTCH1                           FA2F
[ G] ZOTCH2                           FA38
[ G] ZOTCH3                           FA3A
[ G] ZOUT2H                           F9DA
[ G] ZOUTHX                           F9E7
[ G] ZPAUSE                           FA4F
[ G] ZPCRLF                           FA3E
[ G] ZPCRLS                           FA3D
[ G] ZPDATA                           FA41
[ G] ZPDTA1                           FA49
[ G] ZPDTLP                           FA47
[ G] ZSPACE                           F9F7
[ G] ZVSWTH                           F9FB
