                      (        flex9.asm):00001                 NAM     flex9.asm
                      (        flex9.asm):00002                 OPT     pag
                      (        flex9.asm):00003                 PAG
                      (        flex9.asm):00004                 PRAGMA  CD
                      (        flex9.asm):00005         
                      (        flex9.asm):00006         
                      (        flex9.asm):00007                 INCLUDE "init.asm"
                      (         init.asm):00001                 NAM     INIT.TXT
                      (         init.asm):00002                 OPT     pag
                      (         init.asm):00003                 PAG
                      (         init.asm):00004                 PRAGMA  CD
                      (         init.asm):00005         ;*************************************************
                      (         init.asm):00006         ;*                                               *
                      (         init.asm):00007         ;*       flex 2.9:1 initialization code          *
                      (         init.asm):00008         ;*                                               *
                      (         init.asm):00009         ;*************************************************
     C000             (         init.asm):00010         STARTOFFLEX     EQU $C000
     DEFF             (         init.asm):00011         ENDOFFLEX       EQU $DEFF
                      (         init.asm):00012         
                      (         init.asm):00013         ;LNBUFF  equ     $C080
                      (         init.asm):00014         ;STARTR  equ     $C100
                      (         init.asm):00015         
                      (         init.asm):00016         ;SMONTH  equ     $CC0E
                      (         init.asm):00017         ;LNBUFP  equ     $CC14
                      (         init.asm):00018         ;ESCRTN  equ     $CC16
                      (         init.asm):00019         ;PROMPT  equ     $CC4E
                      (         init.asm):00020         
                      (         init.asm):00021         ;COLDST  equ     $CD00
                      (         init.asm):00022         ;WARMST  equ     $CD03
                      (         init.asm):00023         ;RENTER  equ     $CD06
                      (         init.asm):00024         ;INCH    equ     $CD09
                      (         init.asm):00025         ;INCH2   equ     $CD0C
                      (         init.asm):00026         ;OUTCH   equ     $CD0F
                      (         init.asm):00027         ;OUTCH2  equ     $CD12
                      (         init.asm):00028         ;INBUFF  equ     $CD1B
                      (         init.asm):00029         ;PSTRNG  equ     $CD1E
                      (         init.asm):00030         ;PRCRLF  equ     $CD24
                      (         init.asm):00031         ;INDECM  equ     $CD48
                      (         init.asm):00032         ;STAT    equ     $CD4E
                      (         init.asm):00033         
                      (         init.asm):00034         ;ZD0F0   equ     $D0F0
                      (         init.asm):00035         ;ZD0F1   equ     $D0F1
                      (         init.asm):00036         
     D370             (         init.asm):00037         STIME           EQU $D370
                      (         init.asm):00038         
                      (         init.asm):00039         ;IHNDLR  equ     $D3E7
                      (         init.asm):00040         ;TIMOFF  equ     $D3ED
                      (         init.asm):00041         ;TIMON   equ     $D3EF
                      (         init.asm):00042         ;TMINIT  equ     $D3F1
                      (         init.asm):00043         ;TRMINT  equ     $D3F5
                      (         init.asm):00044         ;TRMCHK  equ     $D3F7
                      (         init.asm):00045         ;TIMOUT  equ     $D3F9
                      (         init.asm):00046         ;TIMINE  equ     $D3FB
                      (         init.asm):00047         ;ZD3FD   equ     $D3FD
                      (         init.asm):00048         
                      (         init.asm):00049         ;FMSCAL  equ     $D406
                      (         init.asm):00050         
                      (         init.asm):00051         ;ZDFD0   equ     $DFD0
                      (         init.asm):00052         ;ZDFDC   equ     $DFDC
                      (         init.asm):00053         ;ZDFDD   equ     $DFDD
                      (         init.asm):00054         
                      (         init.asm):00055         ;ZE005   equ     $E005
                      (         init.asm):00056         ;ZE045   equ     $E045
                      (         init.asm):00057         ;ZE085   equ     $E085
                      (         init.asm):00058         ;ZE090   equ     $E090
                      (         init.asm):00059         ;ZE0C5   equ     $E0C5
                      (         init.asm):00060         
                      (         init.asm):00061         ;ZF810   equ     $F810
                      (         init.asm):00062         ;ZFFF0   equ     $FFF0
                      (         init.asm):00063         ;ZFFFC   equ     $FFFC
                      (         init.asm):00064         ;ZFFFD   equ     $FFFD
                      (         init.asm):00065         
                      (         init.asm):00066                 PAGE
                      (         init.asm):00067         
                      (         init.asm):00068         ;****************************************************
                      (         init.asm):00069         
                      (         init.asm):00070         
                      (         init.asm):00071         ;*
                      (         init.asm):00072         ;* STARTUp rouTINE
                      (         init.asm):00073         ;* THIS RoutinE INITIALIZES CERTAIN PARAMETERS, GETS
                      (         init.asm):00074         ;* DATE From uSER, AND EXECUTES A STARTUP.TXT FILE.
                      (         init.asm):00075         
                      (         init.asm):00076                 ORG     $C400
                      (         init.asm):00077         
C400                  (         init.asm):00078         LOADADDR
C400                  (         init.asm):00079         STAR
C400 2005             (         init.asm):00080 [3]             BRA     STAR0
C402                  (         init.asm):00081         Vers
C402 822E893A81       (         init.asm):00082                 FCB     $82,$2E,$89,$3A,$81
                      (         init.asm):00083         
C407                  (         init.asm):00084         STAR0
C407 8639             (         init.asm):00085 [2]             LDA     #$39                              ;SET UP RTS
C409 B7D3FD           (         init.asm):00086 [5]             STA     >TSTSTR                           ;disable re-entry to this code
C40C CCCD03           (         init.asm):00087 [3]             LDD     #$CD03                            ;setup 'escape routine' address
C40F FDCC16           (         init.asm):00088 [6]             STD     >RETRNR                           ;ESCRTN
                      (         init.asm):00089         
C412 CCBFFF           (         init.asm):00090 [3]             LDD     #$BFFF
C415 FDCC2B           (         init.asm):00091 [6]             STD     MEMEND
                      (         init.asm):00092         ;
                      (         init.asm):00093         ;        ldd     >TRMCHK         ;get address of terminal status check routine
                      (         init.asm):00094         ;        std     >DSTAT+1         ;set in FLEX status check jump
                      (         init.asm):00095         ;                                ;
                      (         init.asm):00096         ;        ldd     >TIMOUT         ;get address of terminal output routine
                      (         init.asm):00097         ;        std     >OUTCH+1        ;set in FLEX out char jump
                      (         init.asm):00098         ;        std     >OUTCH2+1       ;set in FLEX alternate out char jump
                      (         init.asm):00099         ;                                ;
                      (         init.asm):00100         ;        ldd     >TIMINE         ;get address of terminal input routine
                      (         init.asm):00101         ;        std     >INCH+1         ;set in FLEX in char jump
                      (         init.asm):00102         ;        std     >INCH2+1        ;set in FLEX alt in char jump
                      (         init.asm):00103         ;
                      (         init.asm):00104         
C418 AD9FD3F5         (         init.asm):00105 [7+5]           JSR     [TINITP]                          ;do terminal init
                      (         init.asm):00106         
C41C 8EC4F1           (         init.asm):00107 [3]             LDX     #ZC810                            ;point to Flex version signon
C41F BDCE79           (         init.asm):00108 [8]             JSR     >PSTRNG                           ;print to terminal
C422 BDCD24           (         init.asm):00109 [8]             JSR     >DPCRLF                           ;and CRLF
                      (         init.asm):00110                                                           ;
                      (         init.asm):00111         
C425                  (         init.asm):00112         ZC43A
C425 FCCC4E           (         init.asm):00113 [6]             LDD     >PPRMPT                           ;PROMPT get  current prompt pointer
C428 3406             (         init.asm):00114 [5+2]           PSHS    b,a                               ;save it
C42A 8EC522           (         init.asm):00115 [3]             LDX     #ZC82E                            ;request for date - PROMPT FOR IT
C42D BFCC4E           (         init.asm):00116 [6]             STX     >PPRMPT                           ;set new prompt pointer
C430 BDCE79           (         init.asm):00117 [8]             JSR     >PSTRNG                           ;do prompt
C433 BDCD1B           (         init.asm):00118 [8]             JSR     >DINBUF                           ;get date
C436 3506             (         init.asm):00119 [5+2]           PULS    b,a                               ;restore prompt pointer
C438 FDCC4E           (         init.asm):00120 [6]             STD     >PPRMPT                           ;
C43B 108ECC0E         (         init.asm):00121 [4]             LDY     #SYSMTH                           ;SMONTH point Y reg to date regs
C43F 8D5D             (         init.asm):00122 [7]             BSR     ZC4A0                             ;convert month from ascii
C441 25E2             (         init.asm):00123 [3]             BCS     ZC43A                             ;no good - retry
                      (         init.asm):00124                                                           ;
C443 8D59             (         init.asm):00125 [7]             BSR     ZC4A0                             ;convert day from ascii
C445 25DE             (         init.asm):00126 [3]             BCS     ZC43A                             ;no good - retry
                      (         init.asm):00127                                                           ;
C447 8D55             (         init.asm):00128 [7]             BSR     ZC4A0                             ;convert year from ascii
C449 25DA             (         init.asm):00129 [3]             BCS     ZC43A                             ;no good - retry
                      (         init.asm):00130                                                           ;
C44B 108ED370         (         init.asm):00131 [4]             LDY     #STIME                            ;point Y reg to system time regs
C44F 8D4D             (         init.asm):00132 [7]             BSR     ZC4A0                             ;
C451 25D2             (         init.asm):00133 [3]             BCS     ZC43A                             ;no good - retry
                      (         init.asm):00134                                                           ;
C453 8D49             (         init.asm):00135 [7]             BSR     ZC4A0                             ;
C455 25CE             (         init.asm):00136 [3]             BCS     ZC43A                             ;no good - retry
                      (         init.asm):00137                                                           ;
C457 8D45             (         init.asm):00138 [7]             BSR     ZC4A0                             ;
C459 25CA             (         init.asm):00139 [3]             BCS     ZC43A                             ;no good - retry
C45B 7FD373           (         init.asm):00140 [7]             CLR     STIME+3                           ;clear tick counter
                      (         init.asm):00141         
C45E BDCD24           (         init.asm):00142 [8]             JSR     >DPCRLF                           ;do CRLF
                      (         init.asm):00143         
C461 BDDE18           (         init.asm):00144 [8]             JSR     >WARM                             ;init the disk drivers
C464 8EC840           (         init.asm):00145 [3]             LDX     #SYSFCB                           ;point to STARTUP.TXT FCB
C467 BDDE0F           (         init.asm):00146 [8]             JSR     >CHKRDY                           ;do disk check
C46A 8601             (         init.asm):00147 [2]             LDA     #$01                              ;set for read operation
C46C A784             (         init.asm):00148 [4+0]           STA     ,x                                ;
C46E BDD406           (         init.asm):00149 [8]             JSR     >FMS                              ;D406
C471 2709             (         init.asm):00150 [3]             BEQ     ZC47E                             ;no error
                      (         init.asm):00151                                                           ;
C473 A601             (         init.asm):00152 [4+1]           LDA     $01,x                             ;
C475 8104             (         init.asm):00153 [2]             CMPA    #$04                              ;file not found error?
C477 263B             (         init.asm):00154 [3]             BNE     ZC4B2                             ;no -
                      (         init.asm):00155                                                           ;
C479 7ECD03           (         init.asm):00156 [4]             JMP     >WARMS                            ;yes - ignore file
                      (         init.asm):00157         ;
C47C                  (         init.asm):00158         ZC47E
C47C 108EC080         (         init.asm):00159 [4]             LDY     #LINBUF                           ;init line buffer pointer
C480 10BFCC14         (         init.asm):00160 [7]             STY     >BUFPNT                           ;LNBUFP
C484 C680             (         init.asm):00161 [2]             LDB     #$80                              ;set byte count to move
                      (         init.asm):00162                                                           ;
C486                  (         init.asm):00163         ZC488
C486 BDD406           (         init.asm):00164 [8]             JSR     >FMS                              ;get byte from startup.txt
                      (         init.asm):00165         
C489 2629             (         init.asm):00166 [3]             BNE     ZC4B2                             ;error
C48B 5A               (         init.asm):00167 [2]             DECB                                      ;decrement count
C48C 2726             (         init.asm):00168 [3]             BEQ     ZC4B2                             ;done
                      (         init.asm):00169                                                           ;
C48E A7A0             (         init.asm):00170 [4+2]           STA     ,y+                               ;put character in line buffer
C490 810D             (         init.asm):00171 [2]             CMPA    #$0D                              ;see if EOL character
C492 26F2             (         init.asm):00172 [3]             BNE     ZC488                             ;no - loop
                      (         init.asm):00173                                                           ;
C494 8604             (         init.asm):00174 [2]             LDA     #$04                              ;yes - close file
C496 A784             (         init.asm):00175 [4+0]           STA     ,x                                ;
C498 BDD406           (         init.asm):00176 [8]             JSR     >FMS                              ;
                      (         init.asm):00177         
C49B 7ECD06           (         init.asm):00178 [4]             JMP     >RENTER                           ;re-enter FLEX with command in line buffer
                      (         init.asm):00179                                                           ;
                      (         init.asm):00180         ;*       convert ascii to decimal;
                      (         init.asm):00181         ;
C49E                  (         init.asm):00182         ZC4A0
C49E BDCD48           (         init.asm):00183 [8]             JSR     >DINDEC                           ;
C4A1 3410             (         init.asm):00184 [5+2]           PSHS    x                                 ;
C4A3 250D             (         init.asm):00185 [3]             BCS     ZC4B0                             ;
C4A5 A6A4             (         init.asm):00186 [4+0]           LDA     ,y                                ;
C4A7 5D               (         init.asm):00187 [2]             TSTB                                      ;see if any valid decimal digits entered
C4A8 1A01             (         init.asm):00188 [3]             ORCC    #$01                              ;set carry flag for error
C4AA 2704             (         init.asm):00189 [3]             BEQ     ZC4AE                             ;no - return error
                      (         init.asm):00190                                                           ;
C4AC A661             (         init.asm):00191 [4+1]           LDA     $01,s                             ;yes - get returned byte
C4AE 1CFE             (         init.asm):00192 [3]             ANDCC   #$FE                              ;set carry flag = 0 if no error
C4B0                  (         init.asm):00193         ZC4AE
C4B0 A7A0             (         init.asm):00194 [4+2]           STA     ,y+                               ;put in callers buffer
C4B2                  (         init.asm):00195         ZC4B0
C4B2 3586             (         init.asm):00196 [5+4]           PULS    pc,b,a                            ;return
                      (         init.asm):00197         
                      (         init.asm):00198         ;*       error in startup file - report it
                      (         init.asm):00199         
C4B4                  (         init.asm):00200         ZC4B2
C4B4 8EC4DE           (         init.asm):00201 [3]             LDX     #ZC555                            ;can't run startup message
                      (         init.asm):00202         
C4B7 BDCE79           (         init.asm):00203 [8]             JSR     >PSTRNG
                      (         init.asm):00204         
C4BA 7ECD03           (         init.asm):00205 [4]             JMP     >WARMS
                      (         init.asm):00206         
                      (         init.asm):00207         ;*       fix up number of K of memory available message
                      (         init.asm):00208         
C4BD                  (         init.asm):00209         ZC4BB
C4BD 3414             (         init.asm):00210 [5+3]           PSHS    x,b
C4BF 8EC519           (         init.asm):00211 [3]             LDX     #ZC82B                            ;'K' message
C4C2 8604             (         init.asm):00212 [2]             LDA     #$04
C4C4 2006             (         init.asm):00213 [3]             BRA     ZC4CA
                      (         init.asm):00214         
                      (         init.asm):00215         ;*
                      (         init.asm):00216         
C4C6                  (         init.asm):00217         ZC4C4
C4C6 800A             (         init.asm):00218 [2]             SUBA    #$0A
C4C8 A784             (         init.asm):00219 [4+0]           STA     ,x
C4CA 8601             (         init.asm):00220 [2]             LDA     #$01
                      (         init.asm):00221         
                      (         init.asm):00222         ;*
                      (         init.asm):00223         
C4CC                  (         init.asm):00224         ZC4CA
C4CC AB82             (         init.asm):00225 [4+2]           ADDA    ,-x
C4CE 8A30             (         init.asm):00226 [2]             ORA     #$30
C4D0 A784             (         init.asm):00227 [4+0]           STA     ,x
C4D2 8139             (         init.asm):00228 [2]             CMPA    #$39
C4D4 22F0             (         init.asm):00229 [3]             BHI     ZC4C4
C4D6 3594             (         init.asm):00230 [5+5]           PULS    pc,x,b
                      (         init.asm):00231         
                      (         init.asm):00232         ;*       return status that no no RTC is available
                      (         init.asm):00233         ;*       but mPT does exist
                      (         init.asm):00234         
C4D8                  (         init.asm):00235         ZC4D6
C4D8 BDDE3E           (         init.asm):00236 [8]             JSR     TMINT                             ;init timer
C4DB 8602             (         init.asm):00237 [2]             LDA     #$02                              ;set flag for MPT
C4DD 39               (         init.asm):00238 [5]             RTS
                      (         init.asm):00239         
                      (         init.asm):00240         ;*       startup file error message
                      (         init.asm):00241         
C4DE                  (         init.asm):00242         ZC555
C4DE 43616E2774207275 (         init.asm):00243                 FCC     "Can't run STARTUP."
     6E20535441525455
     502E
C4F0 04               (         init.asm):00244                 FCB     $04
                      (         init.asm):00245         
                      (         init.asm):00246         ;*       flex startup signon message
                      (         init.asm):00247         
C4F1                  (         init.asm):00248         ZC810   ;fcb     $1A               ; purpose?
C4F1 464C455820666F72 (         init.asm):00249                 FCC     "FLEX for NHYODYNE 6809 Version 2.9:2 "
     204E48594F44594E
     4520363830392056
     657273696F6E2032
     2E393A3220
C516 043438           (         init.asm):00250                 FCB     $04,$34,$38                       ; purpose?
                      (         init.asm):00251         
C519                  (         init.asm):00252         ZC82B
C519 34384B2072616D   (         init.asm):00253                 FCC     "48K ram"
C520 04               (         init.asm):00254                 FCB     $04                               ; purpose?
C521 04               (         init.asm):00255                 FCB     $04
                      (         init.asm):00256         
                      (         init.asm):00257         ;*       date prompt
                      (         init.asm):00258         
C522                  (         init.asm):00259         ZC82E
C522 4461746520616E64 (         init.asm):00260                 FCC     "Date and TIME (MM/DD/YY HH/MM/SS)? "
     2054494D4520284D
     4D2F44442F595920
     48482F4D4D2F5353
     293F20
C545 04               (         init.asm):00261                 FCB     $04
                      (         init.asm):00262         
                      (         init.asm):00263         ;        org     SYSFCB         ; same data in FLX29CPP
                      (         init.asm):00264         
                      (         init.asm):00265         ;        fcb     $FF
                      (         init.asm):00266         ;        fcb     $00
                      (         init.asm):00267         ;        fcb     $00
                      (         init.asm):00268         ;        fcb     $00
                      (         init.asm):00269         ;        fcc     "startup"
                      (         init.asm):00270         ;        fcb     $00
                      (         init.asm):00271         ;        fcc     "txt"
                      (         init.asm):00272         ;        fcb     $00
                      (         init.asm):00273         
                      (         init.asm):00274         ;*************************************************
                      (         init.asm):00275         ;*                                               *
                      (         init.asm):00276         ;*       flex entry point after boot             *
                      (         init.asm):00277         ;*                                               *
                      (         init.asm):00278         ;*         this must start at $C850              *
                      (         init.asm):00279         ;*       N8VEM doesn't use this!                 *
                      (         init.asm):00280         ;*************************************************
                      (         init.asm):00281         ;               org $c850
                      (         init.asm):00282         ;COLDSTART
                      (         init.asm):00283         ;SFRES1  orcc    #$50
                      (         init.asm):00284         ;lds     #LNBUF
                      (         init.asm):00285         ;ldd     >ZDFDC
                      (         init.asm):00286         ;ldx     >ZD0F0
                      (         init.asm):00287         ;pshs    x,b,a
                      (         init.asm):00288         ;ldx     #$99AA
                      (         init.asm):00289         ;ldy     #STARTR+256
                      (         init.asm):00290         ;ldb     #$FF
                      (         init.asm):00291         
                      (         init.asm):00292         ;ZC867   lbsr    ZC91A
                      (         init.asm):00293         ;stx     >ZD0F0
                      (         init.asm):00294         ;cmpx    >ZD0F0
                      (         init.asm):00295         ;bne     ZC888
                      (         init.asm):00296         ;pshs    b
                      (         init.asm):00297         
                      (         init.asm):00298         ;ZC874   lbsr    ZC91A
                      (         init.asm):00299         ;stb     >ZD0F1
                      (         init.asm):00300         ;subb    #$01
                      (         init.asm):00301         ;bcc     ZC874
                      (         init.asm):00302         
                      (         init.asm):00303         ;puls    b
                      (         init.asm):00304         ;lbsr    ZC91A
                      (         init.asm):00305         ;cmpb    >ZD0F1
                      (         init.asm):00306         ;beq     ZC889
                      (         init.asm):00307         ;ZC888   clra
                      (         init.asm):00308         
                      (         init.asm):00309         ;ZC889   sta     ,-y
                      (         init.asm):00310         ;beq     ZC890
                      (         init.asm):00311         ;lbsr    ZC4BB
                      (         init.asm):00312         
                      (         init.asm):00313         ;ZC890   subb    #$01
                      (         init.asm):00314         ;bcc     ZC867
                      (         init.asm):00315         
                      (         init.asm):00316         ;puls    x,b,a
                      (         init.asm):00317         ;std     >ZFFFC
                      (         init.asm):00318         ;stx     >ZD0F0
                      (         init.asm):00319         ;clra
                      (         init.asm):00320         ;ldx     #STARTR
                      (         init.asm):00321         ;ldb     >ZDFDC
                      (         init.asm):00322         ;eorb    #$0F
                      (         init.asm):00323         ;clr     d,x
                      (         init.asm):00324         ;ldb     >ZDFDD
                      (         init.asm):00325         ;eorb    #$0F
                      (         init.asm):00326         ;clr     d,x
                      (         init.asm):00327         ;bsr     ZC922
                      (         init.asm):00328         ;tstb
                      (         init.asm):00329         ;beq     ZC8B8
                      (         init.asm):00330         
                      (         init.asm):00331         ;ZC8B3   clr     ,y+
                      (         init.asm):00332         ;decb
                      (         init.asm):00333         ;bne     ZC8B3
                      (         init.asm):00334         
                      (         init.asm):00335         ;ZC8B8   leay    -$0C,y
                      (         init.asm):00336         ;ldx     #ZFFF0
                      (         init.asm):00337         ;ldb     #$10
                      (         init.asm):00338         
                      (         init.asm):00339         ;ZC8BF   lda     ,y+
                      (         init.asm):00340         ;sta     ,x+
                      (         init.asm):00341         ;decb
                      (         init.asm):00342         ;bne     ZC8BF
                      (         init.asm):00343         ;lda     >MEMEND
                      (         init.asm):00344         ;asla
                      (         init.asm):00345         ;asla
                      (         init.asm):00346         ;asla
                      (         init.asm):00347         ;asla
                      (         init.asm):00348         ;clrb
                      (         init.asm):00349         ;subd    #$0001
                      (         init.asm):00350         ;std     >MEMEND
                      (         init.asm):00351         ;lbsr    ZC4D6
                      (         init.asm):00352         ;ora     >CPUTYP
                      (         init.asm):00353         ;ldb     >ZDFD0
                      (         init.asm):00354         ;bitb    #$F0
                      (         init.asm):00355         ;beq     ZC8E3
                      (         init.asm):00356         ;ora     #$01
                      (         init.asm):00357         
                      (         init.asm):00358         ;ZC8E3   ldb     >ZE005
                      (         init.asm):00359         ;beq     ZC8FD
                      (         init.asm):00360         ;cmpb    #$FF
                      (         init.asm):00361         ;beq     ZC8FD
                      (         init.asm):00362         ;cmpb    >ZE0C5
                      (         init.asm):00363         ;bne     ZC8FD
                      (         init.asm):00364         ;cmpb    >ZE045
                      (         init.asm):00365         ;bne     ZC8FD
                      (         init.asm):00366         ;cmpb    >ZE085
                      (         init.asm):00367         ;bne     ZC8FD
                      (         init.asm):00368         ;ora     #$04
                      (         init.asm):00369         
                      (         init.asm):00370         ;ZC8FD   ldx     >$E800
                      (         init.asm):00371         ;pshs    x
                      (         init.asm):00372         ;ldx     #$99AA
                      (         init.asm):00373         ;stx     >$E800
                      (         init.asm):00374         ;cmpx    >$E800
                      (         init.asm):00375         ;puls    x
                      (         init.asm):00376         ;bne     ZC911
                      (         init.asm):00377         ;ora     #$10
                      (         init.asm):00378         
                      (         init.asm):00379         ;ZC911   stx     >$E800
                      (         init.asm):00380         ;sta     >CPUTYP
C546 7EC400           (         init.asm):00381 [4]             JMP     >STAR
                      (         init.asm):00382         
                      (         init.asm):00383         ;*
                      (         init.asm):00384         
                      (         init.asm):00385         ;ZC91A   tfr     b,a
                      (         init.asm):00386         ;eora    #$0F
                      (         init.asm):00387         ;sta     >ZFFFD
                      (         init.asm):00388         ;rts
                      (         init.asm):00389         
                      (         init.asm):00390         ;;*
                      (         init.asm):00391         
                      (         init.asm):00392         ;ZC922   ldb     #$0C
                      (         init.asm):00393         ;ldy     #ZDFD0
                      (         init.asm):00394         ;;*       ldx     #STARTR+16
                      (         init.asm):00395         ;ldx     #STARTR
                      (         init.asm):00396         
                      (         init.asm):00397         ;ZC92B   cmpx    #STARTR+256
                      (         init.asm):00398         ;beq     ZC93D
                      (         init.asm):00399         ;lda     ,x+
                      (         init.asm):00400         ;beq     ZC92B
                      (         init.asm):00401         ;sta     ,y+
                      (         init.asm):00402         ;inc     >MEMEND
                      (         init.asm):00403         ;decb
                      (         init.asm):00404         ;bne     ZC92B
                      (         init.asm):00405         ;rts
                      (         init.asm):00406         
                      (         init.asm):00407         ;ZC93D   ldx     #STARTR
                      (         init.asm):00408         
                      (         init.asm):00409         ;ZC940   cmpx    #STARTR+16
                      (         init.asm):00410         ;beq     ZC951
                      (         init.asm):00411         ;lda     ,x+
                      (         init.asm):00412         ;beq     ZC940
                      (         init.asm):00413         ;sta     ,y+
                      (         init.asm):00414         ;inc     >MEMEND
                      (         init.asm):00415         ;decb
                      (         init.asm):00416         ;bne     ZC940
                      (         init.asm):00417         
C549                  (         init.asm):00418         ZC951
C549 39               (         init.asm):00419 [5]             RTS
                      (        flex9.asm):00008                 INCLUDE "spooler.asm"
                      (      spooler.asm):00001                 NAM     SPOOLER.TXT
                      (      spooler.asm):00002                 OPT     pag
                      (      spooler.asm):00003         ;       LEN     96
                      (      spooler.asm):00004                 PAG
                      (      spooler.asm):00005                 PRAGMA  CD
                      (      spooler.asm):00006         
                      (      spooler.asm):00007         ;___________________________________________________________________________________________________________
                      (      spooler.asm):00008         ;
                      (      spooler.asm):00009         ;       FLEX Spooler STUB (No spooler support on Nhyodyne)
                      (      spooler.asm):00010         ;
                      (      spooler.asm):00011         ;       DWERNER 8/14/2022
                      (      spooler.asm):00012         ;___________________________________________________________________________________________________________
                      (      spooler.asm):00013         
                      (      spooler.asm):00014                 ORG     $C700                             ; JUMP TABLE STARTS AT $C700
                      (      spooler.asm):00015         
C700                  (      spooler.asm):00016         PRSPLI
C700 393939           (      spooler.asm):00017                 FCB     $39,$39,$39                       ; REPLACE THE FIRST BYTE
C703                  (      spooler.asm):00018         PRSPL2
C703 393939           (      spooler.asm):00019                 FCB     $39,$39,$39                       ; OF EACH ENTRY WITH AN
C706                  (      spooler.asm):00020         PRSPL3
C706 393939           (      spooler.asm):00021                 FCB     $39,$39,$39                       ; RTS ($39) AND THE SECOND
C709                  (      spooler.asm):00022         PRSPL4
C709 393939           (      spooler.asm):00023                 FCB     $39,$39,$39                       ; TWO BYTES WITH ANYTHING
C70C                  (      spooler.asm):00024         PRSPL5
C70C 393939           (      spooler.asm):00025                 FCB     $39,$39,$39
C70F                  (      spooler.asm):00026         PRSPL6
C70F 393939           (      spooler.asm):00027                 FCB     $39,$39,$39
                      (      spooler.asm):00028         
                      (      spooler.asm):00029                 ORG     $C71B                             ; QUEUE COUNT IS AT $C71B
C71B                  (      spooler.asm):00030         QCNT
C71B 00               (      spooler.asm):00031                 FCB     0                                 ; FORCE QUEUE COUNT TO ZERO
                      (        flex9.asm):00009                 INCLUDE "flx29ccp.asm"
                      (     flx29ccp.asm):00001                 OPT     PAG
                      (     flx29ccp.asm):00002                 TTL     6809 FILE MANAGEMENT SYSTEM
                      (     flx29ccp.asm):00003                 PAG
                      (     flx29ccp.asm):00004                 PRAGMA  CD
                      (     flx29ccp.asm):00005         ;
                      (     flx29ccp.asm):00006         ; TSC 6809 DISK OPERATING SYSTEM
                      (     flx29ccp.asm):00007         ;
                      (     flx29ccp.asm):00008         ; COPYRIGHT (C) 1979 BY
                      (     flx29ccp.asm):00009         ;
                      (     flx29ccp.asm):00010         ; TECHNICAL SYSTEMS CONSULTANTS, INC.
                      (     flx29ccp.asm):00011         ; PO BOX 2570
                      (     flx29ccp.asm):00012         ; WEST LAFAYETTE, INDIANA  47906
                      (     flx29ccp.asm):00013         ;
                      (     flx29ccp.asm):00014         
                      (     flx29ccp.asm):00015         ;
                      (     flx29ccp.asm):00016         ; GLOBAL VARIABLE STARAGE
                      (     flx29ccp.asm):00017         ;
                      (     flx29ccp.asm):00018         
     C080             (     flx29ccp.asm):00019         LINBUF          EQU $C080
     D40B             (     flx29ccp.asm):00020         CURFCB          EQU $D40B
                      (     flx29ccp.asm):00021         
                      (     flx29ccp.asm):00022         ; ASCII CODE EQUATES
                      (     flx29ccp.asm):00023         
     0000             (     flx29ccp.asm):00024         NUL             EQU $00
     0004             (     flx29ccp.asm):00025         EOT             EQU $04
                      (     flx29ccp.asm):00026         
                      (     flx29ccp.asm):00027         ; EXTERNAL LABEL EQUATES
                      (     flx29ccp.asm):00028         
     C07F             (     flx29ccp.asm):00029         STACK           EQU $C07F
     C400             (     flx29ccp.asm):00030         LC400           EQU $C400
     C700             (     flx29ccp.asm):00031         CHPR            EQU $C700
                      (     flx29ccp.asm):00032         
                      (     flx29ccp.asm):00033         
                      (     flx29ccp.asm):00034         
                      (     flx29ccp.asm):00035                 ORG     $C840
                      (     flx29ccp.asm):00036         
C840                  (     flx29ccp.asm):00037         SYSFCB
C840 FF000000         (     flx29ccp.asm):00038                 FCB     $FF,0,0,0
C844 73746172747570   (     flx29ccp.asm):00039                 FCC     "startup"                         ; SYSTEM HANGS WHEN TRYING TO EXECUTE STARTUP.TXT
C84B 00               (     flx29ccp.asm):00040                 FCB     0
C84C 747874           (     flx29ccp.asm):00041                 FCC     "txt"
C84F 00               (     flx29ccp.asm):00042                 FCB     0
                      (     flx29ccp.asm):00043         
                      (     flx29ccp.asm):00044         ;*************************************************
                      (     flx29ccp.asm):00045         ;*                                               *
                      (     flx29ccp.asm):00046         ;*       flex entry point after boot             *
                      (     flx29ccp.asm):00047         ;*                                               *
                      (     flx29ccp.asm):00048         ;*         this must start at $C850              *
                      (     flx29ccp.asm):00049         ;*       N8VEM doesn't use this!                 *
                      (     flx29ccp.asm):00050         ;*************************************************
                      (     flx29ccp.asm):00051                 ORG     $c850
C850 7EC407           (     flx29ccp.asm):00052 [4]             JMP     STAR0
                      (     flx29ccp.asm):00053         
     0080             (     flx29ccp.asm):00054         LBL             EQU 128                           ;LINE BUFFER LENGTH
                      (     flx29ccp.asm):00055         
                      (     flx29ccp.asm):00056                 ORG     $CC00
                      (     flx29ccp.asm):00057         
CC00                  (     flx29ccp.asm):00058         TTYBS
CC00 08               (     flx29ccp.asm):00059                 FCB     $08                               ;$CC00   ;BACK SPACE (^H)
CC01                  (     flx29ccp.asm):00060         TTYDEL
CC01 18               (     flx29ccp.asm):00061                 FCB     $18                               ;$CC01   ;DELETE CHARACTER (^X)
CC02                  (     flx29ccp.asm):00062         TTYEOL
CC02 3A               (     flx29ccp.asm):00063                 FCB     $3A                               ;$CC02   ;END OF LINE CHAR (:)
CC03                  (     flx29ccp.asm):00064         TTYDP
CC03 18               (     flx29ccp.asm):00065                 FCB     24                                ;$CC03   ;LINES PER SCREEN
CC04                  (     flx29ccp.asm):00066         COLCNT
CC04 50               (     flx29ccp.asm):00067                 FCB     80                                ;$CC04   ;COLUMNS PER LINE
CC05                  (     flx29ccp.asm):00068         TTYNL
CC05 00               (     flx29ccp.asm):00069                 FCB     $00                               ;$CC05   ;LINE PADDING NULLS
CC06                  (     flx29ccp.asm):00070         TTYTB
CC06 00               (     flx29ccp.asm):00071                 FCB     $00                               ;$CC06   ;TAB CHARACTER
CC07                  (     flx29ccp.asm):00072         TTYBE
CC07 08               (     flx29ccp.asm):00073                 FCB     $08                               ;$CC07   ;BACK SPACE ECHO
CC08                  (     flx29ccp.asm):00074         TTYEJ
CC08 00               (     flx29ccp.asm):00075                 FCB     $00                               ;$CC08   ;EJECT LENGTH
CC09                  (     flx29ccp.asm):00076         TTYPS
CC09 00               (     flx29ccp.asm):00077                 FCB     $00                               ;$CC09   ;PAUSE CONTROL
CC0A                  (     flx29ccp.asm):00078         TTYESC
CC0A 1B               (     flx29ccp.asm):00079                 FCB     $1B                               ;$CC0A   ;ESCAPE CHARACTER
CC0B                  (     flx29ccp.asm):00080         SYSDRV
CC0B 00               (     flx29ccp.asm):00081                 FCB     $00                               ;$CC0B   ;SYSTEM DRIVE
CC0C                  (     flx29ccp.asm):00082         WRKDRV
CC0C 01               (     flx29ccp.asm):00083                 FCB     $01                               ;$CC0C   ;WORKING DRIVE
CC0D                  (     flx29ccp.asm):00084         SYSFLG
CC0D 00               (     flx29ccp.asm):00085                 FCB     $00                               ;$CC0D   ;SYSTEM FLAG
CC0E                  (     flx29ccp.asm):00086         SYSMTH
CC0E 00               (     flx29ccp.asm):00087                 FCB     $00                               ;$CC0E   ;SYSTEM DATE
CC0F                  (     flx29ccp.asm):00088         SYSDAY
CC0F 00               (     flx29ccp.asm):00089                 FCB     $00                               ;$CC0F   ;
CC10                  (     flx29ccp.asm):00090         SYSYR
CC10 00               (     flx29ccp.asm):00091                 FCB     $00                               ;$CC10   ;
CC11                  (     flx29ccp.asm):00092         LSTTRM
CC11 00               (     flx29ccp.asm):00093                 FCB     $00                               ;$CC11   ;LAST TERMINATOR
CC12                  (     flx29ccp.asm):00094         USRTBL
CC12 0000             (     flx29ccp.asm):00095                 FDB     $0000                             ;$CC12   ;USER COMMAND TABLE
CC14                  (     flx29ccp.asm):00096         BUFPNT
CC14 0000             (     flx29ccp.asm):00097                 FDB     $0000                             ;$CC14   ;LINE BUFFER POINTER
CC16                  (     flx29ccp.asm):00098         RETRNR
CC16 0000             (     flx29ccp.asm):00099                 FDB     $0000                             ;$CC16   ;ESCAPE RETURN REG
CC18                  (     flx29ccp.asm):00100         CHAR
CC18 00               (     flx29ccp.asm):00101                 FCB     $00                               ;$CC18   ;CHARACTER
CC19                  (     flx29ccp.asm):00102         PRVCHR
CC19 00               (     flx29ccp.asm):00103                 FCB     $00                               ;$CC19   ;PREVIOUS CHARACTER
CC1A                  (     flx29ccp.asm):00104         LINE
CC1A 00               (     flx29ccp.asm):00105                 FCB     $00                               ;$CC1A   ;CURRENT LINE NUMBER
CC1B                  (     flx29ccp.asm):00106         OFFSET
CC1B 0000             (     flx29ccp.asm):00107                 FDB     $0000                             ;$CC1B   ;LOADER ADR OFFSET
CC1D                  (     flx29ccp.asm):00108         XFR
CC1D 00               (     flx29ccp.asm):00109                 FCB     $00                               ;$CC1D   ;TRANSFER FLAG
CC1E                  (     flx29ccp.asm):00110         TADR
CC1E 0000             (     flx29ccp.asm):00111                 FDB     $0000                             ;$CC1E   ;TRANSFER ADDRESS
CC20                  (     flx29ccp.asm):00112         ERRTYP
CC20 00               (     flx29ccp.asm):00113                 FCB     $00                               ;$CC20   ;ERROR TYPE
CC21                  (     flx29ccp.asm):00114         SPCLS
CC21 00               (     flx29ccp.asm):00115                 FCB     $00                               ;$CC21   ;SPECIAL IO FLAG
CC22                  (     flx29ccp.asm):00116         OUTCHN
CC22 00               (     flx29ccp.asm):00117                 FCB     $00                               ;$CC22   ;OUTPUT CHANNEL BYTE
CC23                  (     flx29ccp.asm):00118         INCHNL
CC23 00               (     flx29ccp.asm):00119                 FCB     $00                               ;$CC23   ;INPUT CHANNEL BYTE
CC24                  (     flx29ccp.asm):00120         FILOUT
CC24 0000             (     flx29ccp.asm):00121                 FDB     $0000                             ;$CC24   ;OUTPUT FILE ADDRESS
CC26                  (     flx29ccp.asm):00122         FILIN
CC26 0000             (     flx29ccp.asm):00123                 FDB     $0000                             ;$CC26   ;INPUT FILE ADDRESS
CC28                  (     flx29ccp.asm):00124         CMFLG
CC28 00               (     flx29ccp.asm):00125                 FCB     $00                               ;$CC28   ;COMMAND FLAG
CC29                  (     flx29ccp.asm):00126         COLMN
CC29 00               (     flx29ccp.asm):00127                 FCB     $00                               ;$CC29   ;CURRENT OUTPUT COL.
CC2A                  (     flx29ccp.asm):00128         TMRFLG
CC2A 00               (     flx29ccp.asm):00129                 FCB     $00                               ;$CC2A   ;TIMER FLAG UNUSED NOW
CC2B                  (     flx29ccp.asm):00130         MEMEND
CC2B 0000             (     flx29ccp.asm):00131                 FDB     $0000                             ;$CC2B   MEMORY END
CC2D                  (     flx29ccp.asm):00132         ERRVEC
CC2D 0000             (     flx29ccp.asm):00133                 FDB     $0000                             ;$CC2D   ;ERROR NAME VECTOR
CC2F                  (     flx29ccp.asm):00134         FILEKO
CC2F 01               (     flx29ccp.asm):00135                 FCB     $01                               ;$CC2F   ;FILE INPUT ECHO
CC30                  (     flx29ccp.asm):00136         FMSBSY
CC30 00               (     flx29ccp.asm):00137                 FCB     $00                               ;$CC30   ;FMS IS BUSY FLAG
CC31                  (     flx29ccp.asm):00138         CP
CC31 0000             (     flx29ccp.asm):00139                 FDB     $0000                             ;$CC31   ;
CC33                  (     flx29ccp.asm):00140         CPUTYP
CC33 00               (     flx29ccp.asm):00141                 FCB     $00                               ;$CC33   ;
CC34                  (     flx29ccp.asm):00142         PRCNT
CC34 00               (     flx29ccp.asm):00143                 FCB     $00                               ;$CC34   ;UNUSED NOW
CC35                  (     flx29ccp.asm):00144         SPARES
CC35 000000000000     (     flx29ccp.asm):00145                 FDB     0,0,0                             ;$CC35   ;SPARE BYTES
CC3B                  (     flx29ccp.asm):00146         XTEMP
CC3B                  (     flx29ccp.asm):00147                 RMB     2                                 ;$CC3B   ;INDEX TEMP
CC3D                  (     flx29ccp.asm):00148         INDEX
CC3D                  (     flx29ccp.asm):00149                 RMB     2                                 ;$CC3D   ;INDEX TEMP STORAGE
CC3F                  (     flx29ccp.asm):00150         CRSAVE
CC3F                  (     flx29ccp.asm):00151                 RMB     2                                 ;$CC3F   ;INDEX SAVE
CC41                  (     flx29ccp.asm):00152         DATPNT
CC41                  (     flx29ccp.asm):00153                 RMB     2                                 ;$CC41   ;DATA POINTER
CC43                  (     flx29ccp.asm):00154         RETADR
CC43                  (     flx29ccp.asm):00155                 RMB     2                                 ;$CC43   ;RETURN ADDRESS
CC45                  (     flx29ccp.asm):00156         STKSTR
CC45                  (     flx29ccp.asm):00157                 RMB     2                                 ;$CC45   ;STACK STORAGE
CC47                  (     flx29ccp.asm):00158         IOTEMP
CC47                  (     flx29ccp.asm):00159                 RMB     2                                 ;$CC47   ;IO TEMP STORE
                      (     flx29ccp.asm):00160         
                      (     flx29ccp.asm):00161         ;* SET MAPUP TO $FF TO DISABLE MAPPING
                      (     flx29ccp.asm):00162         
CC49                  (     flx29ccp.asm):00163         MAPUP
CC49 60               (     flx29ccp.asm):00164                 FCB     $60                               ;$CC49   ;MAP FILENAMES TO UPPER
CC4A                  (     flx29ccp.asm):00165         OUTNUM
CC4A                  (     flx29ccp.asm):00166                 RMB     1                                 ;$CC4A   ;0 SUPPRESSION FLAG
CC4B                  (     flx29ccp.asm):00167         COUNT
CC4B                  (     flx29ccp.asm):00168                 RMB     1                                 ;$CC4B   ;SPARE COUNT REGISTER
CC4C                  (     flx29ccp.asm):00169         GOTFIL
CC4C                  (     flx29ccp.asm):00170                 RMB     1                                 ;$CC4C   ;FILE INDICATOR
CC4D                  (     flx29ccp.asm):00171         Temp
CC4D                  (     flx29ccp.asm):00172                 RMB     1                                 ;$CC4D   ;TEMPORARY REGISTER
                      (     flx29ccp.asm):00173         
CC4E                  (     flx29ccp.asm):00174         PPRMPT
CC4E CCAC             (     flx29ccp.asm):00175                 FDB     PRMPT
                      (     flx29ccp.asm):00176         
CC50                  (     flx29ccp.asm):00177         WHATST
CC50 574841543F       (     flx29ccp.asm):00178                 FCC     "WHAT?"
CC55 04               (     flx29ccp.asm):00179                 FCB     EOT
CC56                  (     flx29ccp.asm):00180         NOTRST
CC56 43414E2754205452 (     flx29ccp.asm):00181                 FCC     "CAN'T TRANSFER"
     414E53464552
CC64 04               (     flx29ccp.asm):00182                 FCB     EOT
CC65                  (     flx29ccp.asm):00183         NONMST
CC65 4E4F5420464F554E (     flx29ccp.asm):00184                 FCC     "NOT FOUND"
     44
CC6E 04               (     flx29ccp.asm):00185                 FCB     EOT
CC6F                  (     flx29ccp.asm):00186         DSKERS
CC6F 4449534B20455252 (     flx29ccp.asm):00187                 FCC     "DISK ERROR #"
     4F522023
CC7B 04               (     flx29ccp.asm):00188                 FCB     EOT
CC7C                  (     flx29ccp.asm):00189         NTRST
CC7C 4452495645204E4F (     flx29ccp.asm):00190                 FCC     "DRIVE NOT READY"
     54205245414459
CC8B 04               (     flx29ccp.asm):00191                 FCB     EOT
CC8C                  (     flx29ccp.asm):00192         COMTBL
CC8C 474554           (     flx29ccp.asm):00193                 FCC     "GET"
CC8F 00               (     flx29ccp.asm):00194                 FCB     0
CC90 D21A             (     flx29ccp.asm):00195                 FDB     GET
CC92 4D4F4E           (     flx29ccp.asm):00196                 FCC     "MON"
CC95 00               (     flx29ccp.asm):00197                 FCB     0
CC96 D356             (     flx29ccp.asm):00198                 FDB     MEXIT
CC98 00               (     flx29ccp.asm):00199                 FCB     $00
                      (     flx29ccp.asm):00200         
CC99                  (     flx29ccp.asm):00201         CONTBL
CC99 2710             (     flx29ccp.asm):00202                 FDB     10000
CC9B 03E8             (     flx29ccp.asm):00203                 FDB     1000
CC9D 0064             (     flx29ccp.asm):00204                 FDB     100
CC9F 000A             (     flx29ccp.asm):00205                 FDB     10
                      (     flx29ccp.asm):00206         
CCA1                  (     flx29ccp.asm):00207         ERNM
CCA1 6572726F7273     (     flx29ccp.asm):00208                 FCC     "errors"
CCA7 0000             (     flx29ccp.asm):00209                 FCB     0,0
CCA9 737973           (     flx29ccp.asm):00210                 FCC     "sys"
                      (     flx29ccp.asm):00211         
CCAC                  (     flx29ccp.asm):00212         PRMPT
CCAC 2B2B2B           (     flx29ccp.asm):00213                 FCC     "+++"
CCAF 04               (     flx29ccp.asm):00214                 FCB     EOT
                      (     flx29ccp.asm):00215         
                      (     flx29ccp.asm):00216                 ORG     $CCC0
                      (     flx29ccp.asm):00217         
CCC0                  (     flx29ccp.asm):00218         PINIT
CCC0 39               (     flx29ccp.asm):00219 [5]             RTS
                      (     flx29ccp.asm):00220         
                      (     flx29ccp.asm):00221                 ORG     $CCD8
                      (     flx29ccp.asm):00222         
CCD8                  (     flx29ccp.asm):00223         PCHK
CCD8 39               (     flx29ccp.asm):00224 [5]             RTS
                      (     flx29ccp.asm):00225         
                      (     flx29ccp.asm):00226                 ORG     $CCE4
                      (     flx29ccp.asm):00227         
CCE4                  (     flx29ccp.asm):00228         POUT
CCE4 39               (     flx29ccp.asm):00229 [5]             RTS
                      (     flx29ccp.asm):00230         
                      (     flx29ccp.asm):00231                 ORG     $CCF8
                      (     flx29ccp.asm):00232         
CCF8                  (     flx29ccp.asm):00233         PR0
CCF8 01000000         (     flx29ccp.asm):00234                 FCB     $01,$00,$00,$00
CCFC                  (     flx29ccp.asm):00235         PR1
CCFC 00000000         (     flx29ccp.asm):00236                 FCB     $00,$00,$00,$00
                      (     flx29ccp.asm):00237         
CD00                  (     flx29ccp.asm):00238         COLDS
CD00 7ECD57           (     flx29ccp.asm):00239 [4]             JMP     INITI                             ;GO INITIALIZE
CD03                  (     flx29ccp.asm):00240         WARMS
CD03 7ECD67           (     flx29ccp.asm):00241 [4]             JMP     ENTRY                             ;WARM ENTRY POINT
CD06                  (     flx29ccp.asm):00242         RENTER
CD06 7ECDAB           (     flx29ccp.asm):00243 [4]             JMP     DOS3                              ;RE-ENTER DOS
CD09                  (     flx29ccp.asm):00244         INCH
CD09 7EDE43           (     flx29ccp.asm):00245 [4]             JMP     VINCH                             ;INPUT ROUTINE
CD0C                  (     flx29ccp.asm):00246         INCH2
CD0C 7EDE43           (     flx29ccp.asm):00247 [4]             JMP     VINCH                             ;TERMINAL INPUT
CD0F                  (     flx29ccp.asm):00248         OUTCH
CD0F 7EDE4C           (     flx29ccp.asm):00249 [4]             JMP     VOUTCH                            ;OUTPUT CHARACTER
CD12                  (     flx29ccp.asm):00250         OUTCH2
CD12 7EDE4C           (     flx29ccp.asm):00251 [4]             JMP     VOUTCH                            ;TERMINAL OUTPUT
CD15                  (     flx29ccp.asm):00252         DGETCH
CD15 7ECEF7           (     flx29ccp.asm):00253 [4]             JMP     GETCHR                            ;GET CHARACTER
CD18                  (     flx29ccp.asm):00254         DPUTCH
CD18 7ECF3D           (     flx29ccp.asm):00255 [4]             JMP     PUTCHR                            ;PUT CHARACTER
CD1B                  (     flx29ccp.asm):00256         DINBUF
CD1B 7ECE2A           (     flx29ccp.asm):00257 [4]             JMP     INBUF                             ;INPUT TO BUFFER
CD1E                  (     flx29ccp.asm):00258         DPSTRN
CD1E 7ECE79           (     flx29ccp.asm):00259 [4]             JMP     PSTRNG                            ;PRINT STRING
CD21                  (     flx29ccp.asm):00260         DCLASS
CD21 7ECFE9           (     flx29ccp.asm):00261 [4]             JMP     CLASS                             ;CLASSIFY CHARACTER
CD24                  (     flx29ccp.asm):00262         DPCRLF
CD24 7ECEB1           (     flx29ccp.asm):00263 [4]             JMP     PCRLF                             ;PRINT CR AND LF
CD27                  (     flx29ccp.asm):00264         DNEXTC
CD27 7ED00A           (     flx29ccp.asm):00265 [4]             JMP     NXTCH                             ;NEXT BUFFER CHAR
CD2A                  (     flx29ccp.asm):00266         RSTRIO
CD2A 7ECDE4           (     flx29ccp.asm):00267 [4]             JMP     RESTIO                            ;RESTORE IO VECTORS
CD2D                  (     flx29ccp.asm):00268         DFILSP
CD2D 7ED032           (     flx29ccp.asm):00269 [4]             JMP     GETFIL                            ;GET FILE SPEC
CD30                  (     flx29ccp.asm):00270         DLOAD
CD30 7ED1B0           (     flx29ccp.asm):00271 [4]             JMP     LOAD                              ;FILE LOADER
CD33                  (     flx29ccp.asm):00272         DSETEX
CD33 7ED0E7           (     flx29ccp.asm):00273 [4]             JMP     SETEXT                            ;SET NAME EXTENSION
CD36                  (     flx29ccp.asm):00274         DADDBX
CD36 7ED354           (     flx29ccp.asm):00275 [4]             JMP     ADDBX                             ;ADD B TO X
CD39                  (     flx29ccp.asm):00276         DOUTDE
CD39 7ECF82           (     flx29ccp.asm):00277 [4]             JMP     OUTDEC                            ;OUTPUT DECIMAL
CD3C                  (     flx29ccp.asm):00278         DOUTHE
CD3C 7ECFD0           (     flx29ccp.asm):00279 [4]             JMP     OUTHEX                            ;OUT HEX CHARACTER
CD3F                  (     flx29ccp.asm):00280         DRPTER
CD3F 7ED28A           (     flx29ccp.asm):00281 [4]             JMP     RPTERR                            ;REPORT ERROR
CD42                  (     flx29ccp.asm):00282         DGETHX
CD42 7ED13D           (     flx29ccp.asm):00283 [4]             JMP     GETHEX                            ;GET HEX NUMBER
CD45                  (     flx29ccp.asm):00284         DOUTAD
CD45 7ECFCC           (     flx29ccp.asm):00285 [4]             JMP     OUTADR                            ;OUT HEX ADDRESS
CD48                  (     flx29ccp.asm):00286         DINDEC
CD48 7ED186           (     flx29ccp.asm):00287 [4]             JMP     INDEC                             ;GET DECIMAL NUMBER
CD4B                  (     flx29ccp.asm):00288         DDOCMD
CD4B 7ED334           (     flx29ccp.asm):00289 [4]             JMP     DOCMD                             ;DO COMMAND LINE
CD4E                  (     flx29ccp.asm):00290         DSTAT
CD4E 7EDE5D           (     flx29ccp.asm):00291 [4]             JMP     STAT                              ;TERMINAL INPUT STATUS
CD51                  (     flx29ccp.asm):00292         DSPR2
CD51 7ECDFF           (     flx29ccp.asm):00293 [4]             JMP     RTS
CD54                  (     flx29ccp.asm):00294         DSPR3
CD54 7ECDFF           (     flx29ccp.asm):00295 [4]             JMP     RTS
                      (     flx29ccp.asm):00296         
                      (     flx29ccp.asm):00297         ;* INIT
                      (     flx29ccp.asm):00298         ;*
                      (     flx29ccp.asm):00299         ;* INIT IS THE INITIALIZATION ROUTINE.
                      (     flx29ccp.asm):00300         ;* ALL SYSTEM VARIABLES ARE SET HERE.
                      (     flx29ccp.asm):00301         
CD57                  (     flx29ccp.asm):00302         INITI
CD57 10CEC07F         (     flx29ccp.asm):00303 [4]             LDS     #STACK                            ;SET STACK
CD5B                  (     flx29ccp.asm):00304         INIT1
CD5B 7FCC11           (     flx29ccp.asm):00305 [7]             CLR     LSTTRM                            ;CLEAR TERM BYTE
CD5E BDD400           (     flx29ccp.asm):00306 [8]             JSR     FMSINT                            ;INIT SYSTEM
                      (     flx29ccp.asm):00307         
CD61 7FCC28           (     flx29ccp.asm):00308 [7]             CLR     CMFLG                             ;CLEAR FLAG
CD64 BDD3FD           (     flx29ccp.asm):00309 [8]             JSR     TSTSTR                            ;CHECK FOR STARTUP
                      (     flx29ccp.asm):00310         
                      (     flx29ccp.asm):00311         
                      (     flx29ccp.asm):00312         ;* ENTRY
                      (     flx29ccp.asm):00313         ;*
                      (     flx29ccp.asm):00314         ;* ENTRY IS THE WARM START ENTRY POINT.
                      (     flx29ccp.asm):00315         ;* THE STACK IS RESET HERE.
                      (     flx29ccp.asm):00316         
CD67                  (     flx29ccp.asm):00317         ENTRY
CD67 10CEC07F         (     flx29ccp.asm):00318 [4]             LDS     #STACK                            ;SET STACK
CD6B BDDE18           (     flx29ccp.asm):00319 [8]             JSR     WARM                              ;DO USER WARMSTART ROUTINE
CD6E 8ECD03           (     flx29ccp.asm):00320 [3]             LDX     #WARMS                            ;POINT TO WARM START
CD71 BFCC16           (     flx29ccp.asm):00321 [6]             STX     RETRNR                            ;SET RETURN REG
CD74 8EC700           (     flx29ccp.asm):00322 [3]             LDX     #CHPR                             ;SET SWI3 VECTOR
CD77 AF9FD3E9         (     flx29ccp.asm):00323 [5+5]           STX     [SWIVECP]                         ;
CD7B BED3E7           (     flx29ccp.asm):00324 [6]             LDX     IHNDLRP                           ;SET IRQ VECTOR
CD7E AF9FD3EB         (     flx29ccp.asm):00325 [5+5]           STX     [IRQVECP]                         ;
CD82 8ECCF8           (     flx29ccp.asm):00326 [3]             LDX     #PR0                              ;SET PR # 0
CD85 BFCC31           (     flx29ccp.asm):00327 [6]             STX     CP                                ;
CD88 7FCC34           (     flx29ccp.asm):00328 [7]             CLR     PRCNT                             ;SET STATUS
CD8B                  (     flx29ccp.asm):00329         ENTRY2
CD8B 7FCC4C           (     flx29ccp.asm):00330 [7]             CLR     GOTFIL                            ;CLEAR FILE DESIG.
CD8E 8D54             (     flx29ccp.asm):00331 [7]             BSR     RESTIO                            ;RESTORE IO
                      (     flx29ccp.asm):00332         
                      (     flx29ccp.asm):00333         ;* DOS
                      (     flx29ccp.asm):00334         ;*
                      (     flx29ccp.asm):00335         ;* DOS IS THE MAIN DOS LOOP
                      (     flx29ccp.asm):00336         
CD90                  (     flx29ccp.asm):00337         DOS
CD90 B6CC11           (     flx29ccp.asm):00338 [5]             LDA     LSTTRM                            ;CHECK TERMINATOR
CD93 B1CC02           (     flx29ccp.asm):00339 [5]             CMPA    TTYEOL                            ;WAS IT EOL?
                      (     flx29ccp.asm):00340         
CD96 2605             (     flx29ccp.asm):00341 [3]             BNE     DOS2                              ;
CD98 7CCC15           (     flx29ccp.asm):00342 [7]             INC     BUFPNT+1                          ;RESET BUFPNT
CD9B 200E             (     flx29ccp.asm):00343 [3]             BRA     DOS3                              ;
                      (     flx29ccp.asm):00344                                                           ;
CD9D                  (     flx29ccp.asm):00345         DOS2
CD9D 7DCC28           (     flx29ccp.asm):00346 [7]             TST     CMFLG                             ;TEST FLAG
                      (     flx29ccp.asm):00347         
CDA0 102605A2         (     flx29ccp.asm):00348 [5+?]           LBNE    RETRN                             ;DO CMD RETURN
CDA4 BDD403           (     flx29ccp.asm):00349 [8]             JSR     FMSCLS                            ;CLOSE ALL
                      (     flx29ccp.asm):00350         
CDA7 26B2             (     flx29ccp.asm):00351 [3]             BNE     INIT1                             ;ERRORS?
CDA9 8D7A             (     flx29ccp.asm):00352 [7]             BSR     PRMTUSR                           ;POINT TO PROMPT
                      (     flx29ccp.asm):00353                                                           ;
CDAB                  (     flx29ccp.asm):00354         DOS3
CDAB BDD0D0           (     flx29ccp.asm):00355 [8]             JSR     SKPSPC                            ;SKIP SPACES
CDAE 810D             (     flx29ccp.asm):00356 [2]             CMPA    #$0D                              ;LONE CARRIAGE RET?
CDB0 27EB             (     flx29ccp.asm):00357 [3]             BEQ     DOS2                              ;
                      (     flx29ccp.asm):00358                                                           ;
CDB2                  (     flx29ccp.asm):00359         DOS4
CDB2 8EC840           (     flx29ccp.asm):00360 [3]             LDX     #SYSFCB                           ;POINT TO SYSTEM FCB
CDB5 7CCC0D           (     flx29ccp.asm):00361 [7]             INC     SYSFLG                            ;SET SYSTEM DRIVE
CDB8 BDD032           (     flx29ccp.asm):00362 [8]             JSR     GETFIL                            ;GET FILE NAME
CDBB 2516             (     flx29ccp.asm):00363 [3]             BCS     NFERR                             ;ERROR?
CDBD 8ECC8C           (     flx29ccp.asm):00364 [3]             LDX     #COMTBL                           ;POINT TO TABLE
CDC0 8D3E             (     flx29ccp.asm):00365 [7]             BSR     LKNAM                             ;LOOK FOR NAME
CDC2 2709             (     flx29ccp.asm):00366 [3]             BEQ     DOS6                              ;FIND?
                      (     flx29ccp.asm):00367         
CDC4 BECC12           (     flx29ccp.asm):00368 [6]             LDX     USRTBL                            ;CHECK USER TABLE
CDC7 2707             (     flx29ccp.asm):00369 [3]             BEQ     DOS8                              ;IS THERE ONE?
                      (     flx29ccp.asm):00370         
CDC9 8D35             (     flx29ccp.asm):00371 [7]             BSR     LKNAM                             ;LOOK FOR NAME
CDCB 2603             (     flx29ccp.asm):00372 [3]             BNE     DOS8                              ;FIND?
                      (     flx29ccp.asm):00373                                                           ;
CDCD                  (     flx29ccp.asm):00374         DOS6
CDCD 6E9801           (     flx29ccp.asm):00375 [3+4]           JMP     [1,x]                             ;JUMP TO COM ADDRESS
                      (     flx29ccp.asm):00376                                                           ;
CDD0                  (     flx29ccp.asm):00377         DOS8
CDD0 BDD239           (     flx29ccp.asm):00378 [8]             JSR     LGO                               ;DO LOAD & GO
                      (     flx29ccp.asm):00379                                                           ;
                      (     flx29ccp.asm):00380         ;* NFERR                     ;
                      (     flx29ccp.asm):00381         ;
CDD3                  (     flx29ccp.asm):00382         NFERR
CDD3 8ECC50           (     flx29ccp.asm):00383 [3]             LDX     #WHATST                           ;POINT TO STRING
CDD6 8615             (     flx29ccp.asm):00384 [2]             LDA     #$15                              ;SET ERROR TYPE
CDD8                  (     flx29ccp.asm):00385         NFERR1
CDD8 B7CC20           (     flx29ccp.asm):00386 [5]             STA     ERRTYP                            ;
CDDB                  (     flx29ccp.asm):00387         NFERR2
CDDB BDCE79           (     flx29ccp.asm):00388 [8]             JSR     PSTRNG                            ;OUTPUT IT
CDDE                  (     flx29ccp.asm):00389         NFERR4
CDDE 7FCC11           (     flx29ccp.asm):00390 [7]             CLR     LSTTRM                            ;CLEAR TERM
CDE1 7ECD67           (     flx29ccp.asm):00391 [4]             JMP     ENTRY                             ;RESTART
                      (     flx29ccp.asm):00392         
                      (     flx29ccp.asm):00393         ;* RESTIO
                      (     flx29ccp.asm):00394         ;*
                      (     flx29ccp.asm):00395         ;* RESTIO RESTORES THE SYSTEM IO JUMP
                      (     flx29ccp.asm):00396         ;* VECTORS FOR INPUT, OUTPUT, & INIT.
                      (     flx29ccp.asm):00397         
CDE4                  (     flx29ccp.asm):00398         RESTIO
CDE4 BECD13           (     flx29ccp.asm):00399 [6]             LDX     OUTCH2+1                          ;SET OUTPUT
CDE7 BFCD10           (     flx29ccp.asm):00400 [6]             STX     OUTCH+1                           ;
CDEA BECD0D           (     flx29ccp.asm):00401 [6]             LDX     INCH2+1                           ;SET INPUT
CDED BFCD0A           (     flx29ccp.asm):00402 [6]             STX     INCH+1                            ;
CDF0 7FCC23           (     flx29ccp.asm):00403 [7]             CLR     INCHNL                            ;
CDF3 7FCC22           (     flx29ccp.asm):00404 [7]             CLR     OUTCHN                            ;CLEAR OUT CHAN
CDF6 7FCC21           (     flx29ccp.asm):00405 [7]             CLR     SPCLS                             ;SET SPECIALS
CDF9 7FCC26           (     flx29ccp.asm):00406 [7]             CLR     FILIN                             ;CLEAR FILES
CDFC 7FCC24           (     flx29ccp.asm):00407 [7]             CLR     FILOUT
CDFF                  (     flx29ccp.asm):00408         RTS
CDFF 39               (     flx29ccp.asm):00409 [5]             RTS
                      (     flx29ccp.asm):00410         
                      (     flx29ccp.asm):00411         ;* LKNAM
                      (     flx29ccp.asm):00412         ;*
                      (     flx29ccp.asm):00413         ;* LKNAM looks FOR A COMMAND
                      (     flx29ccp.asm):00414         ;* NAME In a tABLE
                      (     flx29ccp.asm):00415         ;*
                      (     flx29ccp.asm):00416         ;*   ENTRy: x POINTS TO TABLE
                      (     flx29ccp.asm):00417         ;*   EXIT:  eq IF FOUND
                      (     flx29ccp.asm):00418         ;*          x+1 POINTS TO ADR
                      (     flx29ccp.asm):00419         
CE00                  (     flx29ccp.asm):00420         LKNAM
CE00 108EC844         (     flx29ccp.asm):00421 [4]             LDY     #SYSFCB+4                         ;SET POINTER
CE04                  (     flx29ccp.asm):00422         LKNAM3
CE04 A6A0             (     flx29ccp.asm):00423 [4+2]           LDA     ,y+                               ;GET A NAME CHAR
CE06 815F             (     flx29ccp.asm):00424 [2]             CMPA    #$5F                              ;CHECK IF UPPER CASE
CE08 2302             (     flx29ccp.asm):00425 [3]             BLS     LKNAM4                            ;SKIP IF NOT
CE0A 8020             (     flx29ccp.asm):00426 [2]             SUBA    #$20                              ;MAKE UPPER
                      (     flx29ccp.asm):00427                                                           ;
CE0C                  (     flx29ccp.asm):00428         LKNAM4
CE0C A180             (     flx29ccp.asm):00429 [4+2]           CMPA    ,x+                               ;CHECK AGAINST TABLE
CE0E 2608             (     flx29ccp.asm):00430 [3]             BNE     LKNAM6                            ;BRANCH IF NO MATCH
CE10 6D84             (     flx29ccp.asm):00431 [6+0]           TST     ,x                                ;CHECK IF END
CE12 26F0             (     flx29ccp.asm):00432 [3]             BNE     LKNAM3                            ;LOOP IF NOT
                      (     flx29ccp.asm):00433                                                           ;
CE14 6DA4             (     flx29ccp.asm):00434 [6+0]           TST     ,y                                ;AT END OF NAME
CE16 270C             (     flx29ccp.asm):00435 [3]             BEQ     LKNAM8                            ;GOT COMMAND IF SO
                      (     flx29ccp.asm):00436                                                           ;
CE18                  (     flx29ccp.asm):00437         LKNAM6
CE18 6D80             (     flx29ccp.asm):00438 [6+2]           TST     ,x+                               ;END OF WORD?
CE1A 26FC             (     flx29ccp.asm):00439 [3]             BNE     LKNAM6                            ;LOOP TIL SO
CE1C 3002             (     flx29ccp.asm):00440 [4+1]           LEAX    2,x                               ;BUMP PAST ADDRESS
CE1E 6D84             (     flx29ccp.asm):00441 [6+0]           TST     ,x                                ;END OF TABLE?
CE20 26DE             (     flx29ccp.asm):00442 [3]             BNE     LKNAM                             ;REPEAT IF NOT
CE22 1CFB             (     flx29ccp.asm):00443 [3]             ANDCC   #$FB                              ;CLZ SET NOT EQUAL
CE24                  (     flx29ccp.asm):00444         LKNAM8
CE24 39               (     flx29ccp.asm):00445 [5]             RTS
                      (     flx29ccp.asm):00446         
CE25                  (     flx29ccp.asm):00447         PRMTUSR
CE25 BECC4E           (     flx29ccp.asm):00448 [6]             LDX     PPRMPT
CE28 8D4F             (     flx29ccp.asm):00449 [7]             BSR     PSTRNG
                      (     flx29ccp.asm):00450         
                      (     flx29ccp.asm):00451         ;* INBUF
                      (     flx29ccp.asm):00452         ;*
                      (     flx29ccp.asm):00453         ;* INBUF inputS A LINE INTO THE LINE
                      (     flx29ccp.asm):00454         ;* BUFFER. delETE AND BACK SPACE
                      (     flx29ccp.asm):00455         ;* CHARACters ARE CHECKED HERE.
                      (     flx29ccp.asm):00456         ;*
                      (     flx29ccp.asm):00457         ;*   ENTRy: noNE
                      (     flx29ccp.asm):00458         ;*   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00459         
CE2A                  (     flx29ccp.asm):00460         INBUF
CE2A 8EC080           (     flx29ccp.asm):00461 [3]             LDX     #LINBUF                           ;POINT TO BUFFER
CE2D BFCC14           (     flx29ccp.asm):00462 [6]             STX     BUFPNT                            ;SET POINTER
CE30                  (     flx29ccp.asm):00463         INBUF2
CE30 BDCEF7           (     flx29ccp.asm):00464 [8]             JSR     GETCHR                            ;GO GET A CHARACTER
CE33 B1CC01           (     flx29ccp.asm):00465 [5]             CMPA    TTYDEL                            ;IS IT DELETE?
CE36 27ED             (     flx29ccp.asm):00466 [3]             BEQ     PRMTUSR                           ;
CE38 B1CC00           (     flx29ccp.asm):00467 [5]             CMPA    TTYBS                             ;IS IT BACK SPACE?
CE3B 2718             (     flx29ccp.asm):00468 [3]             BEQ     INBUF6                            ;
CE3D 810D             (     flx29ccp.asm):00469 [2]             CMPA    #$0D                              ;IS IT CARRIAGE RET?
CE3F 270D             (     flx29ccp.asm):00470 [3]             BEQ     INBUF4                            ;
CE41 810A             (     flx29ccp.asm):00471 [2]             CMPA    #$0A                              ;IS IT LF?
CE43 272B             (     flx29ccp.asm):00472 [3]             BEQ     INBUF7                            ;
CE45 811F             (     flx29ccp.asm):00473 [2]             CMPA    #$1F                              ;IS IT CONTROL?
CE47 23E7             (     flx29ccp.asm):00474 [3]             BLS     INBUF2                            ;IGNORE IF SO
CE49                  (     flx29ccp.asm):00475         INBUF3
CE49 8CC0FF           (     flx29ccp.asm):00476 [4]             CMPX    #LINBUF+LBL-1
CE4C 27E2             (     flx29ccp.asm):00477 [3]             BEQ     INBUF2
CE4E                  (     flx29ccp.asm):00478         INBUF4
CE4E A780             (     flx29ccp.asm):00479 [4+2]           STA     ,x+                               ;PUT CHAR IN BUFFER
CE50 810D             (     flx29ccp.asm):00480 [2]             CMPA    #$0D                              ;IS IT RETURN?
CE52 26DC             (     flx29ccp.asm):00481 [3]             BNE     INBUF2                            ;REPEAT IF NOT
CE54 39               (     flx29ccp.asm):00482 [5]             RTS                                       ;
                      (     flx29ccp.asm):00483                                                           ;
CE55                  (     flx29ccp.asm):00484         INBUF6
CE55 8CC080           (     flx29ccp.asm):00485 [4]             CMPX    #LINBUF                           ;FRONT OF BUFFER?
CE58 27CB             (     flx29ccp.asm):00486 [3]             BEQ     PRMTUSR                           ;
CE5A 301F             (     flx29ccp.asm):00487 [4+1]           LEAX    -1,x                              ;DEC THE POINTER
CE5C B6CC07           (     flx29ccp.asm):00488 [5]             LDA     TTYBE                             ;GET ECHO CHAR
CE5F 8108             (     flx29ccp.asm):00489 [2]             CMPA    #8                                ;IS IT ^H ?
CE61 2608             (     flx29ccp.asm):00490 [3]             BNE     INBU65                            ;
CE63 8620             (     flx29ccp.asm):00491 [2]             LDA     #$20                              ;SETUP SPACE
CE65 BDCF62           (     flx29ccp.asm):00492 [8]             JSR     PUTCH6                            ;OUTPUT IT
CE68 B6CC07           (     flx29ccp.asm):00493 [5]             LDA     TTYBE                             ;GET CHAR
CE6B                  (     flx29ccp.asm):00494         INBU65
CE6B BDCF62           (     flx29ccp.asm):00495 [8]             JSR     PUTCH6                            ;OUTPUT IT
CE6E 20C0             (     flx29ccp.asm):00496 [3]             BRA     INBUF2                            ;REPEAT
                      (     flx29ccp.asm):00497                                                           ;
CE70                  (     flx29ccp.asm):00498         INBUF7
CE70 860D             (     flx29ccp.asm):00499 [2]             LDA     #$0D                              ;OUTPUT CR
CE72 BDCF3D           (     flx29ccp.asm):00500 [8]             JSR     PUTCHR                            ;
CE75 8620             (     flx29ccp.asm):00501 [2]             LDA     #$20                              ;SETUP SPACE
CE77 20D0             (     flx29ccp.asm):00502 [3]             BRA     INBUF3
                      (     flx29ccp.asm):00503         
                      (     flx29ccp.asm):00504         ;* PSTRNG
                      (     flx29ccp.asm):00505         ;*
                      (     flx29ccp.asm):00506         ;* PSTRNG prinTS THE STRING POINTED
                      (     flx29ccp.asm):00507         ;* TO BY the iNDEX REGISTER.
                      (     flx29ccp.asm):00508         ;*
                      (     flx29ccp.asm):00509         ;*   ENTRy: x POINTS TO STRING
                      (     flx29ccp.asm):00510         ;*   EXIT:  a & X CHANGED
                      (     flx29ccp.asm):00511         
CE79                  (     flx29ccp.asm):00512         PSTRNG
CE79 8D36             (     flx29ccp.asm):00513 [7]             BSR     PCRLF                             ;OUTPUT CR & LF
                      (     flx29ccp.asm):00514         
CE7B                  (     flx29ccp.asm):00515         PDATA1
CE7B A684             (     flx29ccp.asm):00516 [4+0]           LDA     ,x                                ;GET A CHARACTER
CE7D 8104             (     flx29ccp.asm):00517 [2]             CMPA    #4                                ;IS IT TERM?
CE7F 2773             (     flx29ccp.asm):00518 [3]             BEQ     PCRLF8                            ;
CE81 BDCF3D           (     flx29ccp.asm):00519 [8]             JSR     PUTCHR                            ;GO PUT CHAR.
CE84 3001             (     flx29ccp.asm):00520 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
CE86 20F3             (     flx29ccp.asm):00521 [3]             BRA     PDATA1                            ;REPEAT IT
                      (     flx29ccp.asm):00522         
                      (     flx29ccp.asm):00523         ;* BREAK
                      (     flx29ccp.asm):00524         ;*
                      (     flx29ccp.asm):00525         ;* BREAK checkS FOR A CHARACTER ON INPUT CHANNEL,
                      (     flx29ccp.asm):00526         ;* RETURNs immEDIATELY IF NONE OR NOT ESCAPE.
                      (     flx29ccp.asm):00527         ;* IF ESCape, WAITS FOR ANOTHER OR FOR RETURN.
                      (     flx29ccp.asm):00528         
CE88                  (     flx29ccp.asm):00529         BREAK
CE88 BDCD4E           (     flx29ccp.asm):00530 [8]             JSR     DSTAT                             ;ANY INPUT CHARACTER?
CE8B 2769             (     flx29ccp.asm):00531 [3]             BEQ     PCRLF9                            ;EXIT IF NOT
                      (     flx29ccp.asm):00532                                                           ;
CE8D AD9FD3E5         (     flx29ccp.asm):00533 [7+5]           JSR     [INCHNEP]                         ;ELSE, GET THE CHARACTER
CE91 847F             (     flx29ccp.asm):00534 [2]             ANDA    #$7F                              ;STRIP UPPER BIT
CE93 B1CC0A           (     flx29ccp.asm):00535 [5]             CMPA    TTYESC                            ;AN ESCAPE?
CE96 265E             (     flx29ccp.asm):00536 [3]             BNE     PCRLF9                            ;EXIT IF NOT
                      (     flx29ccp.asm):00537                                                           ;
CE98                  (     flx29ccp.asm):00538         BREAK1
CE98 7FCC1A           (     flx29ccp.asm):00539 [7]             CLR     LINE                              ;CLEAR LINE COUNT
CE9B                  (     flx29ccp.asm):00540         BREAK2
CE9B AD9FD3E5         (     flx29ccp.asm):00541 [7+5]           JSR     [INCHNEP]                         ;WAIT FOR A CHARACTER
CE9F 847F             (     flx29ccp.asm):00542 [2]             ANDA    #$7F                              ;STRIP UPPER BIT
CEA1 B1CC0A           (     flx29ccp.asm):00543 [5]             CMPA    TTYESC                            ;AN ESCAPE?
CEA4 2750             (     flx29ccp.asm):00544 [3]             BEQ     PCRLF9                            ;CONTINUE IF SO
CEA6 810D             (     flx29ccp.asm):00545 [2]             CMPA    #$0D                              ;IS IT A C.R.?
CEA8 26F1             (     flx29ccp.asm):00546 [3]             BNE     BREAK2                            ;LOOP IF NEITHER
CEAA 7FCC11           (     flx29ccp.asm):00547 [7]             CLR     LSTTRM                            ;CLEAR TERMINATOR
CEAD 6E9FCC16         (     flx29ccp.asm):00548 [3+5]           JMP     [RETRNR]                          ;JUMP TO RETURN REG
                      (     flx29ccp.asm):00549         
                      (     flx29ccp.asm):00550         ;* PCRLF
                      (     flx29ccp.asm):00551         ;*
                      (     flx29ccp.asm):00552         ;* PCRLF outpuTS A CARRIAGE RETURN
                      (     flx29ccp.asm):00553         ;* AND A line FEED COMBINATION.
                      (     flx29ccp.asm):00554         ;*
                      (     flx29ccp.asm):00555         ;*   ENTRY: NONE
                      (     flx29ccp.asm):00556         ;*   EXIT:  A & B CHANGED
                      (     flx29ccp.asm):00557         
CEB1                  (     flx29ccp.asm):00558         PCRLF
CEB1 7DCC21           (     flx29ccp.asm):00559 [7]             TST     SPCLS                             ;TEST SPECIALS
CEB4 2627             (     flx29ccp.asm):00560 [3]             BNE     PCRLF2                            ;
                      (     flx29ccp.asm):00561         ;bra     PCRLF2      ;
CEB6 8DD0             (     flx29ccp.asm):00562 [7]             BSR     BREAK                             ;CHECK FOR BREAK
CEB8 B6CC03           (     flx29ccp.asm):00563 [5]             LDA     TTYDP                             ;GET COUNT
CEBB 2720             (     flx29ccp.asm):00564 [3]             BEQ     PCRLF2                            ;IS IT OFF?
                      (     flx29ccp.asm):00565                                                           ;
CEBD B1CC1A           (     flx29ccp.asm):00566 [5]             CMPA    LINE                              ;CHECK COUNT
CEC0 2218             (     flx29ccp.asm):00567 [3]             BHI     PCRL19                            ;
CEC2 7FCC1A           (     flx29ccp.asm):00568 [7]             CLR     LINE                              ;CLEAR COUNT
CEC5 7DCC09           (     flx29ccp.asm):00569 [7]             TST     TTYPS                             ;PAUSE ON?
CEC8 2702             (     flx29ccp.asm):00570 [3]             BEQ     PCRLF1                            ;
CECA 8DCC             (     flx29ccp.asm):00571 [7]             BSR     BREAK1                            ;WAIT FOR ESC
                      (     flx29ccp.asm):00572                                                           ;
CECC                  (     flx29ccp.asm):00573         PCRLF1
CECC 3404             (     flx29ccp.asm):00574 [5+1]           PSHS    b                                 ;SAVE B
CECE F6CC08           (     flx29ccp.asm):00575 [5]             LDB     TTYEJ                             ;CHECK COUNT
CED1 2705             (     flx29ccp.asm):00576 [3]             BEQ     PCRL18                            ;
CED3                  (     flx29ccp.asm):00577         PCRL15
CED3 8D08             (     flx29ccp.asm):00578 [7]             BSR     PCRLF2                            ;OUTPUT CR & LF
CED5 5A               (     flx29ccp.asm):00579 [2]             DECB                                      ;DEC THE COUNT
CED6 26FB             (     flx29ccp.asm):00580 [3]             BNE     PCRL15                            ;
                      (     flx29ccp.asm):00581                                                           ;
CED8                  (     flx29ccp.asm):00582         PCRL18
CED8 3504             (     flx29ccp.asm):00583 [5+1]           PULS    b                                 ;RESTORE B
CEDA                  (     flx29ccp.asm):00584         PCRL19
CEDA 7CCC1A           (     flx29ccp.asm):00585 [7]             INC     LINE                              ;BUMP LINE COUNT
CEDD                  (     flx29ccp.asm):00586         PCRLF2
CEDD 860D             (     flx29ccp.asm):00587 [2]             LDA     #$0D                              ;SET UP CR
CEDF 8D5C             (     flx29ccp.asm):00588 [7]             BSR     PUTCHR                            ;OUTPUT IT
CEE1 860A             (     flx29ccp.asm):00589 [2]             LDA     #$0A                              ;SET UP LINE FEED
CEE3 8D58             (     flx29ccp.asm):00590 [7]             BSR     PUTCHR                            ;OUTPUT IT
                      (     flx29ccp.asm):00591         ;rts                                    ; !!!
CEE5 3404             (     flx29ccp.asm):00592 [5+1]           PSHS    b                                 ;SAVE B
CEE7 F6CC05           (     flx29ccp.asm):00593 [5]             LDB     TTYNL                             ;CHECK NULLS
CEEA 2706             (     flx29ccp.asm):00594 [3]             BEQ     PCRLF6                            ;
CEEC                  (     flx29ccp.asm):00595         PCRLF4
CEEC 4F               (     flx29ccp.asm):00596 [2]             CLRA                                      ;SET UP NULL
CEED 8D4E             (     flx29ccp.asm):00597 [7]             BSR     PUTCHR                            ;OUTPUT IT
CEEF 5A               (     flx29ccp.asm):00598 [2]             DECB                                      ;DEC THE COUNT
CEF0 26FA             (     flx29ccp.asm):00599 [3]             BNE     PCRLF4                            ;REPEAT?
                      (     flx29ccp.asm):00600                                                           ;
CEF2                  (     flx29ccp.asm):00601         PCRLF6
CEF2 3504             (     flx29ccp.asm):00602 [5+1]           PULS    b                                 ;RESTORE B
CEF4                  (     flx29ccp.asm):00603         PCRLF8
CEF4 1CFE             (     flx29ccp.asm):00604 [3]             ANDCC   #$FE                              ;CLC  CLEAR ERRORS
CEF6                  (     flx29ccp.asm):00605         PCRLF9
CEF6 39               (     flx29ccp.asm):00606 [5]             RTS
                      (     flx29ccp.asm):00607         
                      (     flx29ccp.asm):00608         ;* GETCHR
                      (     flx29ccp.asm):00609         ;*
                      (     flx29ccp.asm):00610         ;* GETCHR gets A CHARACTER FROM EITHER
                      (     flx29ccp.asm):00611         ;* THE STandarD INPUT OR A FILE.
                      (     flx29ccp.asm):00612         ;*
                      (     flx29ccp.asm):00613         ;*   ENTRy: noNE
                      (     flx29ccp.asm):00614         ;*   EXIT:  a HAS CHARACTER
                      (     flx29ccp.asm):00615         
CEF7                  (     flx29ccp.asm):00616         GETCHR
CEF7 7DCC23           (     flx29ccp.asm):00617 [7]             TST     INCHNL                            ;CHECK CHAN
CEFA 261A             (     flx29ccp.asm):00618 [3]             BNE     GETCH5                            ;
CEFC 7DCC26           (     flx29ccp.asm):00619 [7]             TST     FILIN                             ;FILE INPUT?
CEFF 2710             (     flx29ccp.asm):00620 [3]             BEQ     GETCH4                            ;
CF01 8D1A             (     flx29ccp.asm):00621 [7]             BSR     FILIO                             ;DO FILE INPUT
CF03 7DCC2F           (     flx29ccp.asm):00622 [7]             TST     FILEKO                            ;ECHO CHARACTER?
CF06 2711             (     flx29ccp.asm):00623 [3]             BEQ     GETCH6                            ;
CF08 7DCC24           (     flx29ccp.asm):00624 [7]             TST     FILOUT                            ;OUTPUT FILE?
CF0B 270C             (     flx29ccp.asm):00625 [3]             BEQ     GETCH6                            ;
CF0D 8D53             (     flx29ccp.asm):00626 [7]             BSR     PUTCH6                            ;ECHO CHARACTER
CF0F 2008             (     flx29ccp.asm):00627 [3]             BRA     GETCH6                            ;
                      (     flx29ccp.asm):00628                                                           ;
CF11                  (     flx29ccp.asm):00629         GETCH4
CF11 BDCD09           (     flx29ccp.asm):00630 [8]             JSR     INCH                              ;GET CHAR
CF14 2003             (     flx29ccp.asm):00631 [3]             BRA     GETCH6                            ;
                      (     flx29ccp.asm):00632                                                           ;
CF16                  (     flx29ccp.asm):00633         GETCH5
CF16 BDCD0C           (     flx29ccp.asm):00634 [8]             JSR     INCH2                             ;TERMINAL INPUT
CF19                  (     flx29ccp.asm):00635         GETCH6
CF19 7FCC1A           (     flx29ccp.asm):00636 [7]             CLR     LINE                              ;CLEAR COUNTER
CF1C 39               (     flx29ccp.asm):00637 [5]             RTS
                      (     flx29ccp.asm):00638         
                      (     flx29ccp.asm):00639         ;* FILIO
                      (     flx29ccp.asm):00640         ;*
                      (     flx29ccp.asm):00641         ;* FILIO dose A FMS CALL FOR CHARACTER
                      (     flx29ccp.asm):00642         ;* IO TRAnsfer. CONTROL RETURNED TO
                      (     flx29ccp.asm):00643         ;* WARM Start UPON ERROR.
                      (     flx29ccp.asm):00644         
CF1D                  (     flx29ccp.asm):00645         FILIO
CF1D BFCC47           (     flx29ccp.asm):00646 [6]             STX     IOTEMP                            ;SAVE INDEX
CF20 BECC26           (     flx29ccp.asm):00647 [6]             LDX     FILIN                             ;GET INPUT FCB
CF23 2006             (     flx29ccp.asm):00648 [3]             BRA     FILIO4                            ;
                      (     flx29ccp.asm):00649                                                           ;
CF25                  (     flx29ccp.asm):00650         FILIO2
CF25 BFCC47           (     flx29ccp.asm):00651 [6]             STX     IOTEMP                            ;SAVE X
CF28 BECC24           (     flx29ccp.asm):00652 [6]             LDX     FILOUT                            ;GET OUTPUT FCB
                      (     flx29ccp.asm):00653                                                           ;
CF2B                  (     flx29ccp.asm):00654         FILIO4
CF2B BDD406           (     flx29ccp.asm):00655 [8]             JSR     FMS                               ;CALL FMS
CF2E 2604             (     flx29ccp.asm):00656 [3]             BNE     FILIO6                            ;ERROR?
CF30 BECC47           (     flx29ccp.asm):00657 [6]             LDX     IOTEMP                            ;RESTORE INDEX
CF33 39               (     flx29ccp.asm):00658 [5]             RTS                                       ;
                      (     flx29ccp.asm):00659                                                           ;
CF34                  (     flx29ccp.asm):00660         FILIO6
CF34 7FCC24           (     flx29ccp.asm):00661 [7]             CLR     FILOUT                            ;CLEAR CHAN
CF37 BDD28A           (     flx29ccp.asm):00662 [8]             JSR     RPTERR                            ;REPORT ERROR
CF3A 7ECD03           (     flx29ccp.asm):00663 [4]             JMP     WARMS                             ;DO WARM START
                      (     flx29ccp.asm):00664         
                      (     flx29ccp.asm):00665         ;* PUTCHR
                      (     flx29ccp.asm):00666         ;*
                      (     flx29ccp.asm):00667         ;* PUTCHR writES A CHARACTER TO EITHER
                      (     flx29ccp.asm):00668         ;* THE STandarD OUTPUT OR TO A FILE.
                      (     flx29ccp.asm):00669         ;*
                      (     flx29ccp.asm):00670         ;*   ENTRy: chARACTER IN A
                      (     flx29ccp.asm):00671         ;*   EXIT:  a MAY BE DESTROYED
                      (     flx29ccp.asm):00672         
CF3D                  (     flx29ccp.asm):00673         PUTCHR
CF3D 7DCC21           (     flx29ccp.asm):00674 [7]             TST     SPCLS                             ;CHECK SPECIALS
CF40 2620             (     flx29ccp.asm):00675 [3]             BNE     PUTCH6                            ;
CF42 811F             (     flx29ccp.asm):00676 [2]             CMPA    #$1F                              ;IS IT CONTROL?
CF44 2205             (     flx29ccp.asm):00677 [3]             BHI     PUTCH2                            ;
CF46 7FCC29           (     flx29ccp.asm):00678 [7]             CLR     COLMN                             ;CLEAR COL COUNT
CF49 2017             (     flx29ccp.asm):00679 [3]             BRA     PUTCH6                            ;JUMP AHEAD
                      (     flx29ccp.asm):00680                                                           ;
CF4B                  (     flx29ccp.asm):00681         PUTCH2
CF4B 7CCC29           (     flx29ccp.asm):00682 [7]             INC     COLMN                             ;BUMP COUNTER
CF4E 3402             (     flx29ccp.asm):00683 [5+1]           PSHS    a                                 ;SAVE CHARACTER
CF50 B6CC04           (     flx29ccp.asm):00684 [5]             LDA     COLCNT                            ;GET COUNT
CF53 270B             (     flx29ccp.asm):00685 [3]             BEQ     PUTCH4                            ;IS IT 0?
CF55 B1CC29           (     flx29ccp.asm):00686 [5]             CMPA    COLMN                             ;ENOUGH?
CF58 2406             (     flx29ccp.asm):00687 [3]             BCC     PUTCH4                            ;
CF5A BDCEB1           (     flx29ccp.asm):00688 [8]             JSR     PCRLF                             ;OUTPUT CR & LF
CF5D 7CCC29           (     flx29ccp.asm):00689 [7]             INC     COLMN                             ;
                      (     flx29ccp.asm):00690                                                           ;
CF60                  (     flx29ccp.asm):00691         PUTCH4
CF60 3502             (     flx29ccp.asm):00692 [5+1]           PULS    a                                 ;RESTORE CHAR
CF62                  (     flx29ccp.asm):00693         PUTCH6
CF62 3402             (     flx29ccp.asm):00694 [5+1]           PSHS    a                                 ;
CF64 7DCC22           (     flx29ccp.asm):00695 [7]             TST     OUTCHN                            ;TEST CHANNEL
CF67 2613             (     flx29ccp.asm):00696 [3]             BNE     PUTCH7                            ;
CF69 7DCC24           (     flx29ccp.asm):00697 [7]             TST     FILOUT                            ;FILE OUTPUT?
CF6C 2704             (     flx29ccp.asm):00698 [3]             BEQ     PUTC68                            ;
CF6E 8DB5             (     flx29ccp.asm):00699 [7]             BSR     FILIO2                            ;DO FMS CALL
CF70 200D             (     flx29ccp.asm):00700 [3]             BRA     PUTC75                            ;
                      (     flx29ccp.asm):00701                                                           ;
CF72                  (     flx29ccp.asm):00702         PUTC68
CF72 7DCC26           (     flx29ccp.asm):00703 [7]             TST     FILIN                             ;
CF75 2608             (     flx29ccp.asm):00704 [3]             BNE     PUTC75                            ;FILE INPUT?
CF77 BDCD0F           (     flx29ccp.asm):00705 [8]             JSR     OUTCH                             ;OUTPUT IT
CF7A 2003             (     flx29ccp.asm):00706 [3]             BRA     PUTC75                            ;
                      (     flx29ccp.asm):00707                                                           ;
CF7C                  (     flx29ccp.asm):00708         PUTCH7
CF7C BDCD12           (     flx29ccp.asm):00709 [8]             JSR     OUTCH2                            ;CHAN 2 OUTPUT
CF7F                  (     flx29ccp.asm):00710         PUTC75
CF7F 3502             (     flx29ccp.asm):00711 [5+1]           PULS    a                                 ;RESTORE CHAR
CF81 39               (     flx29ccp.asm):00712 [5]             RTS
                      (     flx29ccp.asm):00713         
                      (     flx29ccp.asm):00714         ;* OUTDEC
                      (     flx29ccp.asm):00715         ;*
                      (     flx29ccp.asm):00716         ;* OUTPUT deciMAL NUMBER POINTED TO
                      (     flx29ccp.asm):00717         ;* BY X. the nS ENTRY PRINTS LEADING
                      (     flx29ccp.asm):00718         ;* ZEROES.
                      (     flx29ccp.asm):00719         ;*
                      (     flx29ccp.asm):00720         ;*   ENTRy: x POINTS TO NUMBER
                      (     flx29ccp.asm):00721         ;*   EXIT:  alL CHANGED
                      (     flx29ccp.asm):00722         
CF82                  (     flx29ccp.asm):00723         OUTDEC
CF82 7FCC4A           (     flx29ccp.asm):00724 [7]             CLR     OUTNUM                            ;CLEAR FLAG
CF85 F7CC1D           (     flx29ccp.asm):00725 [5]             STB     XFR                               ;SET SUP FLAG
CF88 8604             (     flx29ccp.asm):00726 [2]             LDA     #4                                ;SET COUNTER
CF8A B7CC4D           (     flx29ccp.asm):00727 [5]             STA     Temp                              ;SAVE IT
CF8D EC84             (     flx29ccp.asm):00728 [5+0]           LDD     ,x                                ;GET VALUE
CF8F 8ECC99           (     flx29ccp.asm):00729 [3]             LDX     #CONTBL                           ;POINT TO CONSTANTS
                      (     flx29ccp.asm):00730                                                           ;
CF92                  (     flx29ccp.asm):00731         OUTDE4
CF92 8D0B             (     flx29ccp.asm):00732 [7]             BSR     OUTDIG                            ;OUTPUT DIGIT
CF94 3002             (     flx29ccp.asm):00733 [4+1]           LEAX    2,x                               ;BUMP TO NEXT CONST.
CF96 7ACC4D           (     flx29ccp.asm):00734 [7]             DEC     Temp                              ;DEC THE COUNT
CF99 26F7             (     flx29ccp.asm):00735 [3]             BNE     OUTDE4                            ;
CF9B 1F98             (     flx29ccp.asm):00736 [6]             TFR     b,a                               ;GET LS DIGIT
CF9D 203D             (     flx29ccp.asm):00737 [3]             BRA     OUTHR                             ;OUTPUT IT
                      (     flx29ccp.asm):00738         
                      (     flx29ccp.asm):00739         ;* OUTDIG
                      (     flx29ccp.asm):00740         ;*
                      (     flx29ccp.asm):00741         ;* OUTDIG outpUTS THE DIGITS PLACE
                      (     flx29ccp.asm):00742         ;* OF THE numbER IN A & B CORRESPONDING
                      (     flx29ccp.asm):00743         ;* TO THE consTANT POINTED TO BY X.
                      (     flx29ccp.asm):00744         ;*
                      (     flx29ccp.asm):00745         ;*   ENTRy: a & B CONTAIN NUMBER
                      (     flx29ccp.asm):00746         ;*          x POINTS TO CONSTANT
                      (     flx29ccp.asm):00747         ;*   EXIT:  alL REGISTERS PRESERVED
                      (     flx29ccp.asm):00748         
CF9F                  (     flx29ccp.asm):00749         OUTDIG
CF9F 7FCC4B           (     flx29ccp.asm):00750 [7]             CLR     COUNT                             ;CLEAR COUNTER
CFA2                  (     flx29ccp.asm):00751         OUTDI2
CFA2 10A384           (     flx29ccp.asm):00752 [7+0]           CMPD    ,x                                ;COMPARE NUMBER
CFA5 2507             (     flx29ccp.asm):00753 [3]             BCS     OUTDI5                            ;
CFA7 A384             (     flx29ccp.asm):00754 [6+0]           SUBD    ,x                                ;SUB VALUE
CFA9 7CCC4B           (     flx29ccp.asm):00755 [7]             INC     COUNT                             ;BUMP COUNTER
CFAC 20F4             (     flx29ccp.asm):00756 [3]             BRA     OUTDI2                            ;REPEAT
                      (     flx29ccp.asm):00757                                                           ;
CFAE                  (     flx29ccp.asm):00758         OUTDI5
CFAE 3402             (     flx29ccp.asm):00759 [5+1]           PSHS    a                                 ;SAVE A
CFB0 B6CC4B           (     flx29ccp.asm):00760 [5]             LDA     COUNT                             ;GET TOTAL
CFB3 2610             (     flx29ccp.asm):00761 [3]             BNE     OUTDI6                            ;IS IT ZERO?
CFB5 7DCC4A           (     flx29ccp.asm):00762 [7]             TST     OUTNUM                            ;SUPRESS ZEROES?
CFB8 260B             (     flx29ccp.asm):00763 [3]             BNE     OUTDI6                            ;NUMBER YET?
CFBA 7DCC1D           (     flx29ccp.asm):00764 [7]             TST     XFR                               ;NULL OR SPACE?
CFBD 270B             (     flx29ccp.asm):00765 [3]             BEQ     OUTDI8                            ;
CFBF 8620             (     flx29ccp.asm):00766 [2]             LDA     #$20                              ;SETUP SPACE
CFC1 8D23             (     flx29ccp.asm):00767 [7]             BSR     OUTHR2                            ;OUTPUT IT
CFC3 2005             (     flx29ccp.asm):00768 [3]             BRA     OUTDI8
                      (     flx29ccp.asm):00769         
CFC5                  (     flx29ccp.asm):00770         OUTDI6
CFC5 7CCC4A           (     flx29ccp.asm):00771 [7]             INC     OUTNUM                            ;SHOW NUMBER
CFC8 8D12             (     flx29ccp.asm):00772 [7]             BSR     OUTHR                             ;OUTPUT DIGIT
                      (     flx29ccp.asm):00773         
CFCA                  (     flx29ccp.asm):00774         OUTDI8
CFCA 3582             (     flx29ccp.asm):00775 [5+3]           PULS    a,pc                              ;RESTORE A & RETURN
                      (     flx29ccp.asm):00776         
                      (     flx29ccp.asm):00777         ;* OUTADR
                      (     flx29ccp.asm):00778         ;*
                      (     flx29ccp.asm):00779         ;* OUTPUT four HEX DIGITS POINTED
                      (     flx29ccp.asm):00780         ;* TO BY the iNDEX REGISTER.
                      (     flx29ccp.asm):00781         
CFCC                  (     flx29ccp.asm):00782         OUTADR
CFCC 8D02             (     flx29ccp.asm):00783 [7]             BSR     OUTHEX                            ;OUT 2 DIGITS
CFCE 3001             (     flx29ccp.asm):00784 [4+1]           LEAX    1,x                               ;BUMP POINTER
                      (     flx29ccp.asm):00785         
                      (     flx29ccp.asm):00786         ;* OUTHEX
                      (     flx29ccp.asm):00787         ;*
                      (     flx29ccp.asm):00788         ;* OUTHEX outpUTS THE BYTE IN HEX
                      (     flx29ccp.asm):00789         ;* POINTEd to BY X.
                      (     flx29ccp.asm):00790         ;*
                      (     flx29ccp.asm):00791         ;*   ENTRy: x POINTS TO BYTE
                      (     flx29ccp.asm):00792         ;*   EXIT:  b PRESERVED
                      (     flx29ccp.asm):00793         
CFD0                  (     flx29ccp.asm):00794         OUTHEX
CFD0 A684             (     flx29ccp.asm):00795 [4+0]           LDA     ,x                                ;GET MSB
CFD2 8D04             (     flx29ccp.asm):00796 [7]             BSR     OUTHL                             ;OUTPUT IT
CFD4 A684             (     flx29ccp.asm):00797 [4+0]           LDA     ,x                                ;DO LSB
CFD6 2004             (     flx29ccp.asm):00798 [3]             BRA     OUTHR                             ;OUTPUT IT
                      (     flx29ccp.asm):00799                                                           ;
CFD8                  (     flx29ccp.asm):00800         OUTHL
CFD8 44               (     flx29ccp.asm):00801 [2]             LSRA                                      ;GET MSB TO LSB
CFD9 44               (     flx29ccp.asm):00802 [2]             LSRA
CFDA 44               (     flx29ccp.asm):00803 [2]             LSRA
CFDB 44               (     flx29ccp.asm):00804 [2]             LSRA
                      (     flx29ccp.asm):00805         
CFDC                  (     flx29ccp.asm):00806         OUTHR
CFDC 840F             (     flx29ccp.asm):00807 [2]             ANDA    #$0F                              ;MASK OFF MSB
CFDE 8B30             (     flx29ccp.asm):00808 [2]             ADDA    #$30                              ;ADD IN BIAS
CFE0 8139             (     flx29ccp.asm):00809 [2]             CMPA    #$39                              ;OVER NUMBERS?
CFE2 2302             (     flx29ccp.asm):00810 [3]             BLS     OUTHR2
                      (     flx29ccp.asm):00811         
CFE4 8B07             (     flx29ccp.asm):00812 [2]             ADDA    #7                                ;FINISH BIAS
                      (     flx29ccp.asm):00813         
CFE6                  (     flx29ccp.asm):00814         OUTHR2
CFE6 7ECF3D           (     flx29ccp.asm):00815 [4]             JMP     PUTCHR                            ;OUTPUT IT
                      (     flx29ccp.asm):00816         
                      (     flx29ccp.asm):00817         ;* CLASS
                      (     flx29ccp.asm):00818         ;*
                      (     flx29ccp.asm):00819         ;* CLASS will CLASSIFY THE CHARACTER IN A.
                      (     flx29ccp.asm):00820         ;*
                      (     flx29ccp.asm):00821         ;*   ENTRy: chARACTER IN A
                      (     flx29ccp.asm):00822         ;*   EXIT:  cs IF NOT 0-9 OR A-Z
                      (     flx29ccp.asm):00823         
CFE9                  (     flx29ccp.asm):00824         CLASS
CFE9 8130             (     flx29ccp.asm):00825 [2]             CMPA    #$30                              ;IS IT 0?
CFEB 2514             (     flx29ccp.asm):00826 [3]             BCS     CLASS2                            ;REPORT
CFED 8139             (     flx29ccp.asm):00827 [2]             CMPA    #$39                              ;COMPARE TO 9
CFEF 2316             (     flx29ccp.asm):00828 [3]             BLS     CLASS4                            ;IS IT NUMBER?
CFF1 8141             (     flx29ccp.asm):00829 [2]             CMPA    #$41                              ;COMPARE TO A
CFF3 250C             (     flx29ccp.asm):00830 [3]             BCS     CLASS2                            ;REPORT
CFF5 815A             (     flx29ccp.asm):00831 [2]             CMPA    #$5A                              ;COMPARE TO Z
CFF7 230E             (     flx29ccp.asm):00832 [3]             BLS     CLASS4                            ;IS IT LETTER?
CFF9 8161             (     flx29ccp.asm):00833 [2]             CMPA    #$61                              ;CHECK FOR LOWER
CFFB 2504             (     flx29ccp.asm):00834 [3]             BCS     CLASS2                            ;REPORT
CFFD 817A             (     flx29ccp.asm):00835 [2]             CMPA    #$7A                              ;UPPER LIMIT
CFFF 2306             (     flx29ccp.asm):00836 [3]             BLS     CLASS4
                      (     flx29ccp.asm):00837         
D001                  (     flx29ccp.asm):00838         CLASS2
D001 1A01             (     flx29ccp.asm):00839 [3]             ORCC    #1                                ;SEC  SET FOR NOT
D003 B7CC11           (     flx29ccp.asm):00840 [5]             STA     LSTTRM
D006 39               (     flx29ccp.asm):00841 [5]             RTS
                      (     flx29ccp.asm):00842         
D007                  (     flx29ccp.asm):00843         CLASS4
D007 1CFE             (     flx29ccp.asm):00844 [3]             ANDCC   #$FE                              ;CLC  SHOW ALPHANUMERIC
D009 39               (     flx29ccp.asm):00845 [5]             RTS
                      (     flx29ccp.asm):00846         
                      (     flx29ccp.asm):00847         ;* NXTCH
                      (     flx29ccp.asm):00848         ;*
                      (     flx29ccp.asm):00849         ;* NXTCH gets THE NEXT CHARACTER FROM
                      (     flx29ccp.asm):00850         ;* THE LIne buFFER.
                      (     flx29ccp.asm):00851         ;*
                      (     flx29ccp.asm):00852         ;*   ENTRy: noNE
                      (     flx29ccp.asm):00853         ;*   EXIT:  a HAS CHARACTER
                      (     flx29ccp.asm):00854         
D00A                  (     flx29ccp.asm):00855         NXTCH
D00A 3410             (     flx29ccp.asm):00856 [5+2]           PSHS    x
D00C BECC14           (     flx29ccp.asm):00857 [6]             LDX     BUFPNT                            ;GET POINTER
D00F B6CC18           (     flx29ccp.asm):00858 [5]             LDA     CHAR                              ;GET OLD CHAR
D012 B7CC19           (     flx29ccp.asm):00859 [5]             STA     PRVCHR                            ;SAVE AS PREVIOUS
D015                  (     flx29ccp.asm):00860         NXTCH3
D015 A680             (     flx29ccp.asm):00861 [4+2]           LDA     ,x+                               ;GET THE CHARACTER
D017 B7CC18           (     flx29ccp.asm):00862 [5]             STA     CHAR                              ;SAVE CHAR
D01A 810D             (     flx29ccp.asm):00863 [2]             CMPA    #$0D                              ;IS IT RETURN?
D01C 2710             (     flx29ccp.asm):00864 [3]             BEQ     NXTCH4                            ;
D01E B1CC02           (     flx29ccp.asm):00865 [5]             CMPA    TTYEOL                            ;IS IT EOL?
D021 270B             (     flx29ccp.asm):00866 [3]             BEQ     NXTCH4                            ;
D023 BFCC14           (     flx29ccp.asm):00867 [6]             STX     BUFPNT                            ;SAVE NEW POSITION
D026 8120             (     flx29ccp.asm):00868 [2]             CMPA    #$20                              ;CHECK FOR SPACE
D028 2604             (     flx29ccp.asm):00869 [3]             BNE     NXTCH4                            ;
D02A A184             (     flx29ccp.asm):00870 [4+0]           CMPA    ,x                                ;NEXT CHAR SPACE?
D02C 27E7             (     flx29ccp.asm):00871 [3]             BEQ     NXTCH3                            ;SKIP IF SO
                      (     flx29ccp.asm):00872                                                           ;
D02E                  (     flx29ccp.asm):00873         NXTCH4
D02E 8DB9             (     flx29ccp.asm):00874 [7]             BSR     CLASS                             ;GO CLASSIFY
D030 3590             (     flx29ccp.asm):00875 [5+4]           PULS    x,pc                              ;RESTORE REG. & RETURN
                      (     flx29ccp.asm):00876         
                      (     flx29ccp.asm):00877         ;* GETFIL
                      (     flx29ccp.asm):00878         ;*
                      (     flx29ccp.asm):00879         ;* GETFIL gets A FILE SPECIFICATION FROM
                      (     flx29ccp.asm):00880         ;* THE INput sTREAM.
                      (     flx29ccp.asm):00881         ;*
                      (     flx29ccp.asm):00882         ;*   ENTRy: x POINTS TO FCB
                      (     flx29ccp.asm):00883         ;*   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):00884         
D032                  (     flx29ccp.asm):00885         GETFIL
D032 8615             (     flx29ccp.asm):00886 [2]             LDA     #21                               ;SET PRE ERROR
D034 A701             (     flx29ccp.asm):00887 [4+1]           STA     1,x                               ;
D036 86FF             (     flx29ccp.asm):00888 [2]             LDA     #$FF                              ;SET DRIVE NEG
D038 A703             (     flx29ccp.asm):00889 [4+1]           STA     3,x                               ;
D03A 6F04             (     flx29ccp.asm):00890 [6+1]           CLR     4,x                               ;
D03C 6F0C             (     flx29ccp.asm):00891 [6+1]           CLR     12,x                              ;CLEAR EXTENSION
D03E BDD0D0           (     flx29ccp.asm):00892 [8]             JSR     SKPSPC                            ;SKIP SPACES
D041 8608             (     flx29ccp.asm):00893 [2]             LDA     #8                                ;SET UP COUNT
D043 B7CC4B           (     flx29ccp.asm):00894 [5]             STA     COUNT                             ;SAVE IT
D046 8D34             (     flx29ccp.asm):00895 [7]             BSR     PRTM                              ;PROCESS ITEM
D048 252E             (     flx29ccp.asm):00896 [3]             BCS     GETFI5                            ;ERROR?
D04A 260F             (     flx29ccp.asm):00897 [3]             BNE     GETFI2                            ;CHECK TERM
D04C 8D2E             (     flx29ccp.asm):00898 [7]             BSR     PRTM                              ;PROCESS ITEM
D04E 2528             (     flx29ccp.asm):00899 [3]             BCS     GETFI5                            ;ERROR?
D050 2609             (     flx29ccp.asm):00900 [3]             BNE     GETFI2                            ;CHECK TERM
D052 BCCC3F           (     flx29ccp.asm):00901 [7]             CMPX    CRSAVE                            ;CHECK ERROR?
D055 276C             (     flx29ccp.asm):00902 [3]             BEQ     PRTM6                             ;
D057 8D23             (     flx29ccp.asm):00903 [7]             BSR     PRTM                              ;PROCESS ITEM
D059 2368             (     flx29ccp.asm):00904 [3]             BLS     PRTM6                             ;ERROR?
                      (     flx29ccp.asm):00905                                                           ;
D05B                  (     flx29ccp.asm):00906         GETFI2
D05B BECC3F           (     flx29ccp.asm):00907 [6]             LDX     CRSAVE                            ;RESTORE POINTER
D05E 6D04             (     flx29ccp.asm):00908 [6+1]           TST     4,x                               ;IS NAME NULL?
D060 2761             (     flx29ccp.asm):00909 [3]             BEQ     PRTM6                             ;
D062 6D03             (     flx29ccp.asm):00910 [6+1]           TST     3,x                               ;CHECK DRIVE NUMBER
D064 2A0F             (     flx29ccp.asm):00911 [3]             BPL     GETFI4                            ;SET YET?
D066 7DCC0D           (     flx29ccp.asm):00912 [7]             TST     SYSFLG                            ;SYSTEM DRIVE?
D069 2705             (     flx29ccp.asm):00913 [3]             BEQ     GETFI3                            ;
D06B B6CC0B           (     flx29ccp.asm):00914 [5]             LDA     SYSDRV                            ;GET SYSTEM DRIVE
D06E 2003             (     flx29ccp.asm):00915 [3]             BRA     GETF35                            ;
                      (     flx29ccp.asm):00916                                                           ;
D070                  (     flx29ccp.asm):00917         GETFI3
D070 B6CC0C           (     flx29ccp.asm):00918 [5]             LDA     WRKDRV                            ;GET WORK DRIVE
D073                  (     flx29ccp.asm):00919         GETF35
D073 A703             (     flx29ccp.asm):00920 [4+1]           STA     3,x                               ;SET DRIVE NUMBER
D075                  (     flx29ccp.asm):00921         GETFI4
D075 7FCC0D           (     flx29ccp.asm):00922 [7]             CLR     SYSFLG                            ;CLEAR FLAG
D078                  (     flx29ccp.asm):00923         GETFI5
D078 BECC3F           (     flx29ccp.asm):00924 [6]             LDX     CRSAVE                            ;RESTORE FCB
D07B 39               (     flx29ccp.asm):00925 [5]             RTS
                      (     flx29ccp.asm):00926         
                      (     flx29ccp.asm):00927         ;* PRTM
                      (     flx29ccp.asm):00928         ;*
                      (     flx29ccp.asm):00929         ;* PRTM ProcesSES AN ITEM OF THE FILE SPEC
                      (     flx29ccp.asm):00930         
D07C                  (     flx29ccp.asm):00931         PRTM
D07C 8D8C             (     flx29ccp.asm):00932 [7]             BSR     NXTCH                             ;GET NEXT CHAR
D07E 2543             (     flx29ccp.asm):00933 [3]             BCS     PRTM6                             ;ERROR?
D080 8139             (     flx29ccp.asm):00934 [2]             CMPA    #$39                              ;CHECK IF NUMBER
D082 2215             (     flx29ccp.asm):00935 [3]             BHI     PRTM2                             ;
D084 BECC3F           (     flx29ccp.asm):00936 [6]             LDX     CRSAVE                            ;RESTORE POINTER
D087 6D03             (     flx29ccp.asm):00937 [6+1]           TST     3,x                               ;CHECK FOR DRIVE NO
D089 2A38             (     flx29ccp.asm):00938 [3]             BPL     PRTM6                             ;ERROR?
D08B 8403             (     flx29ccp.asm):00939 [2]             ANDA    #3                                ;MASK DRIVE
D08D A703             (     flx29ccp.asm):00940 [4+1]           STA     3,x                               ;SET DRIVE NUM
D08F BDD00A           (     flx29ccp.asm):00941 [8]             JSR     NXTCH                             ;GET NEXT CHAR
D092 242F             (     flx29ccp.asm):00942 [3]             BCC     PRTM6                             ;ERROR?
                      (     flx29ccp.asm):00943                                                           ;
D094                  (     flx29ccp.asm):00944         PRTM1
D094 812E             (     flx29ccp.asm):00945 [2]             CMPA    #$2E                              ;CHECK TERM
D096 1CFE             (     flx29ccp.asm):00946 [3]             ANDCC   #$FE                              ;CLC  CLEAR ERROR
D098 39               (     flx29ccp.asm):00947 [5]             RTS                                       ;
                      (     flx29ccp.asm):00948                                                           ;
D099                  (     flx29ccp.asm):00949         PRTM2
D099 F6CC4B           (     flx29ccp.asm):00950 [5]             LDB     COUNT                             ;GET COUNT
D09C 2B25             (     flx29ccp.asm):00951 [3]             BMI     PRTM6                             ;ERROR?
D09E 3404             (     flx29ccp.asm):00952 [5+1]           PSHS    b                                 ;SAVE COUNT
D0A0 C005             (     flx29ccp.asm):00953 [2]             SUBB    #5                                ;SET NEW COUNT
D0A2 F7CC4B           (     flx29ccp.asm):00954 [5]             STB     COUNT                             ;SAVE IT
D0A5 3504             (     flx29ccp.asm):00955 [5+1]           PULS    b                                 ;RESTORE OLD
                      (     flx29ccp.asm):00956                                                           ;
D0A7                  (     flx29ccp.asm):00957         PRTM3
D0A7 B1CC49           (     flx29ccp.asm):00958 [5]             CMPA    MAPUP                             ;CHECK FOR LOWER CASE
D0AA 2502             (     flx29ccp.asm):00959 [3]             BCS     LD0AE                             ;SKIP IF NOT
D0AC 8020             (     flx29ccp.asm):00960 [2]             SUBA    #$20                              ;CONVERT TO UPPER
                      (     flx29ccp.asm):00961                                                           ;
D0AE                  (     flx29ccp.asm):00962         LD0AE
D0AE A704             (     flx29ccp.asm):00963 [4+1]           STA     4,x                               ;PUT CHARACTER
D0B0 3001             (     flx29ccp.asm):00964 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
D0B2 5A               (     flx29ccp.asm):00965 [2]             DECB                                      ;DEC THE COUNT
D0B3 BDD00A           (     flx29ccp.asm):00966 [8]             JSR     NXTCH                             ;GET NEXT CHAR
D0B6 2408             (     flx29ccp.asm):00967 [3]             BCC     PRTM5                             ;TERM CHAR?
D0B8 812D             (     flx29ccp.asm):00968 [2]             CMPA    #$2D                              ;IS IT HYPHEN?
D0BA 2704             (     flx29ccp.asm):00969 [3]             BEQ     PRTM5                             ;
                      (     flx29ccp.asm):00970                                                           ;
D0BC 815F             (     flx29ccp.asm):00971 [2]             CMPA    #$5F                              ;IS IT UNDER SCORE?
D0BE 2606             (     flx29ccp.asm):00972 [3]             BNE     PRTM7                             ;
                      (     flx29ccp.asm):00973                                                           ;
D0C0                  (     flx29ccp.asm):00974         PRTM5
D0C0 5D               (     flx29ccp.asm):00975 [2]             TSTB                                      ;CHECK COUNT
D0C1 26E4             (     flx29ccp.asm):00976 [3]             BNE     PRTM3                             ;REPEAT
                      (     flx29ccp.asm):00977                                                           ;
D0C3                  (     flx29ccp.asm):00978         PRTM6
D0C3 1A01             (     flx29ccp.asm):00979 [3]             ORCC    #1                                ;SEC  SET ERROR
D0C5 39               (     flx29ccp.asm):00980 [5]             RTS                                       ;
                      (     flx29ccp.asm):00981                                                           ;
D0C6                  (     flx29ccp.asm):00982         PRTM7
D0C6 5D               (     flx29ccp.asm):00983 [2]             TSTB                                      ;CHECK COUNT
D0C7 27CB             (     flx29ccp.asm):00984 [3]             BEQ     PRTM1                             ;FINISHED?
                      (     flx29ccp.asm):00985                                                           ;
D0C9 6F04             (     flx29ccp.asm):00986 [6+1]           CLR     4,x                               ;CLEAR REST
D0CB 3001             (     flx29ccp.asm):00987 [4+1]           LEAX    1,x                               ;BUMP POINTER
D0CD 5A               (     flx29ccp.asm):00988 [2]             DECB                                      ;DEC THE COUNT
D0CE 20F6             (     flx29ccp.asm):00989 [3]             BRA     PRTM7                             ;REPEAT
                      (     flx29ccp.asm):00990         
                      (     flx29ccp.asm):00991         ;* SKPSPC
                      (     flx29ccp.asm):00992         ;*
                      (     flx29ccp.asm):00993         ;* SKPSPC skipS SPACES IN THE BUFFER
                      (     flx29ccp.asm):00994         ;*
                      (     flx29ccp.asm):00995         ;*   ENTRy: noNE
                      (     flx29ccp.asm):00996         ;*   EXIT:  alL CHANGED
                      (     flx29ccp.asm):00997         
D0D0                  (     flx29ccp.asm):00998         SKPSPC
D0D0 BFCC3F           (     flx29ccp.asm):00999 [6]             STX     CRSAVE                            ;SAVE INDEX
D0D3 BECC14           (     flx29ccp.asm):01000 [6]             LDX     BUFPNT                            ;GET POINTER
                      (     flx29ccp.asm):01001                                                           ;
D0D6                  (     flx29ccp.asm):01002         SKPSP2
D0D6 A684             (     flx29ccp.asm):01003 [4+0]           LDA     ,x                                ;GET CHARACTER
D0D8 8120             (     flx29ccp.asm):01004 [2]             CMPA    #$20                              ;IS IT SPACE?
D0DA 2604             (     flx29ccp.asm):01005 [3]             BNE     SKPSP4                            ;
                      (     flx29ccp.asm):01006                                                           ;
D0DC 3001             (     flx29ccp.asm):01007 [4+1]           LEAX    1,x                               ;BUMP TO NEXT
D0DE 20F6             (     flx29ccp.asm):01008 [3]             BRA     SKPSP2                            ;REPEAT
                      (     flx29ccp.asm):01009                                                           ;
D0E0                  (     flx29ccp.asm):01010         SKPSP4
D0E0 BFCC14           (     flx29ccp.asm):01011 [6]             STX     BUFPNT                            ;SET POINTER
D0E3 BECC3F           (     flx29ccp.asm):01012 [6]             LDX     CRSAVE                            ;RESTORE REGISTER
D0E6 39               (     flx29ccp.asm):01013 [5]             RTS
                      (     flx29ccp.asm):01014         
                      (     flx29ccp.asm):01015         ;* SETEXT
                      (     flx29ccp.asm):01016         ;*
                      (     flx29ccp.asm):01017         ;* SETEXT sets A DEFAULT NAME EXTENSION
                      (     flx29ccp.asm):01018         ;* IF THE exteNSION IS NULL. IT IS SET
                      (     flx29ccp.asm):01019         ;* ACCORDing tO THE CODE IN A.
                      (     flx29ccp.asm):01020         ;*
                      (     flx29ccp.asm):01021         ;*   ENTRy: a HAS CODE
                      (     flx29ccp.asm):01022         ;*          x POINTS TO FCB
                      (     flx29ccp.asm):01023         ;*   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):01024         
D0E7                  (     flx29ccp.asm):01025         SETEXT
D0E7 3430             (     flx29ccp.asm):01026 [5+4]           PSHS    x,y                               ;SAVE REGISTERS
D0E9 E60C             (     flx29ccp.asm):01027 [4+1]           LDB     12,x                              ;GET FIRST EXT
D0EB 261E             (     flx29ccp.asm):01028 [3]             BNE     SETEX6                            ;NULL?
                      (     flx29ccp.asm):01029                                                           ;
                      (     flx29ccp.asm):01030         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;leay    <EXTTBL,pc  ;POINT TO TABLE
D0ED 318C1D           (     flx29ccp.asm):01031                 FCB     $31,$8C,$1D                       ; ASSEMBLER ERROR??
D0F0 810F             (     flx29ccp.asm):01032 [2]             CMPA    #$0F                              ;CHECK RANGE
D0F2 2217             (     flx29ccp.asm):01033 [3]             BHI     SETEX6                            ;
D0F4 C603             (     flx29ccp.asm):01034 [2]             LDB     #3                                ;GET TO DESIRED EXT.
D0F6 3D               (     flx29ccp.asm):01035 [11]            MUL                                       ;
D0F7 31AB             (     flx29ccp.asm):01036 [4+4]           LEAY    d,y                               ;
D0F9 C603             (     flx29ccp.asm):01037 [2]             LDB     #3                                ;GET EXTENSION LENGTH
                      (     flx29ccp.asm):01038                                                           ;
D0FB                  (     flx29ccp.asm):01039         SETEX4
D0FB A6A0             (     flx29ccp.asm):01040 [4+2]           LDA     ,y+                               ;GET CHAR
D0FD B1CC49           (     flx29ccp.asm):01041 [5]             CMPA    MAPUP                             ;IS IT LOWER CASE?
D100 2502             (     flx29ccp.asm):01042 [3]             BCS     SETEX5                            ;NO
D102 8020             (     flx29ccp.asm):01043 [2]             SUBA    #$20                              ;YES - MAKE UPPER CASE
                      (     flx29ccp.asm):01044                                                           ;
D104                  (     flx29ccp.asm):01045         SETEX5
D104 A70C             (     flx29ccp.asm):01046 [4+1]           STA     12,x                              ;PUT IN EXT
D106 3001             (     flx29ccp.asm):01047 [4+1]           LEAX    1,x                               ;BUMP POINTER
D108 5A               (     flx29ccp.asm):01048 [2]             DECB                                      ;THE COUNT
D109 26F0             (     flx29ccp.asm):01049 [3]             BNE     SETEX4                            ;FINISHED?
                      (     flx29ccp.asm):01050                                                           ;
D10B                  (     flx29ccp.asm):01051         SETEX6
D10B 35B0             (     flx29ccp.asm):01052 [5+6]           PULS    x,y,pc                            ;RESTORE REGS. & RETURN
                      (     flx29ccp.asm):01053         
                      (     flx29ccp.asm):01054         ;* EXTTBL
                      (     flx29ccp.asm):01055         ;*
                      (     flx29ccp.asm):01056         ;* EXTENSion cODE TABLE
                      (     flx29ccp.asm):01057         
D10D                  (     flx29ccp.asm):01058         EXTTBL
D10D 62696E           (     flx29ccp.asm):01059                 FCC     "bin"                             ;CODE 0
D110 747874           (     flx29ccp.asm):01060                 FCC     "txt"                             ;CODE 1
D113 636D64           (     flx29ccp.asm):01061                 FCC     "cmd"                             ;CODE 2
D116 626173           (     flx29ccp.asm):01062                 FCC     "bas"                             ;CODE 3
D119 737973           (     flx29ccp.asm):01063                 FCC     "sys"                             ;CODE 4
D11C 62616B           (     flx29ccp.asm):01064                 FCC     "bak"                             ;CODE 5
D11F 736372           (     flx29ccp.asm):01065                 FCC     "scr"                             ;CODE 6
D122 646174           (     flx29ccp.asm):01066                 FCC     "dat"                             ;CODE 7
D125 626163           (     flx29ccp.asm):01067                 FCC     "bac"                             ;CODE 8
D128 646972           (     flx29ccp.asm):01068                 FCC     "dir"                             ;CODE 9
D12B 707274           (     flx29ccp.asm):01069                 FCC     "prt"                             ;CODE 10
D12E 6F7574           (     flx29ccp.asm):01070                 FCC     "out"                             ;CODE 11
D131 72656C           (     flx29ccp.asm):01071                 FCC     "rel"                             ;CODE 12
D134 726669           (     flx29ccp.asm):01072                 FCC     "rfi"                             ;CODE 13
D137 646576           (     flx29ccp.asm):01073                 FCC     "dev"                             ;CODE 14
D13A 617263           (     flx29ccp.asm):01074                 FCC     "arc"                             ;CODE 15
                      (     flx29ccp.asm):01075         
                      (     flx29ccp.asm):01076         ;* GETHEX
                      (     flx29ccp.asm):01077         ;*
                      (     flx29ccp.asm):01078         ;* GETHEX gets A HEX VALUE FROM THE
                      (     flx29ccp.asm):01079         ;* INPUT buffeR.  B IS NON ZERO IF
                      (     flx29ccp.asm):01080         ;* THERE was a NUMBER.
                      (     flx29ccp.asm):01081         ;*
                      (     flx29ccp.asm):01082         ;*   ENTRy: noNE
                      (     flx29ccp.asm):01083         ;*   EXIT:  cs IF ERROR
                      (     flx29ccp.asm):01084         ;*          vaLUE IN X
                      (     flx29ccp.asm):01085         
D13D                  (     flx29ccp.asm):01086         GETHEX
D13D BDD229           (     flx29ccp.asm):01087 [8]             JSR     CLROFS                            ;CLEAR SPACE & B REG
D140                  (     flx29ccp.asm):01088         GETHE2
D140 BDD00A           (     flx29ccp.asm):01089 [8]             JSR     NXTCH                             ;GET CHARACTER
D143 2522             (     flx29ccp.asm):01090 [3]             BCS     GETHE8                            ;GRAPHICS?
                      (     flx29ccp.asm):01091                                                           ;
D145 8D26             (     flx29ccp.asm):01092 [7]             BSR     TSTHEX                            ;TEST FOR HEX
D147 2518             (     flx29ccp.asm):01093 [3]             BCS     GETHE6                            ;ERROR?
                      (     flx29ccp.asm):01094                                                           ;
D149 3404             (     flx29ccp.asm):01095 [5+1]           PSHS    b                                 ;SAVE IND
D14B C604             (     flx29ccp.asm):01096 [2]             LDB     #4                                ;SET UP COUNT
                      (     flx29ccp.asm):01097                                                           ;
D14D                  (     flx29ccp.asm):01098         GETHE4
D14D 78CC1C           (     flx29ccp.asm):01099 [7]             ASL     OFFSET+1                          ;SHIFT OVER 4
D150 79CC1B           (     flx29ccp.asm):01100 [7]             ROL     OFFSET                            ;
D153 5A               (     flx29ccp.asm):01101 [2]             DECB                                      ;DEC THE COUNT
D154 26F7             (     flx29ccp.asm):01102 [3]             BNE     GETHE4                            ;LOOP TIL DONE
                      (     flx29ccp.asm):01103                                                           ;
D156 3504             (     flx29ccp.asm):01104 [5+1]           PULS    b                                 ;RESTORE IND
D158 BBCC1C           (     flx29ccp.asm):01105 [5]             ADDA    OFFSET+1                          ;
D15B B7CC1C           (     flx29ccp.asm):01106 [5]             STA     OFFSET+1                          ;SET NEW DIGIT
D15E 5C               (     flx29ccp.asm):01107 [2]             INCB                                      ;SET INDICATOR
D15F 20DF             (     flx29ccp.asm):01108 [3]             BRA     GETHE2                            ;
                      (     flx29ccp.asm):01109                                                           ;
D161                  (     flx29ccp.asm):01110         GETHE6
D161 BDD00A           (     flx29ccp.asm):01111 [8]             JSR     NXTCH                             ;GET CHARACTER
D164 24FB             (     flx29ccp.asm):01112 [3]             BCC     GETHE6                            ;WAIT FOR TERM
D166 39               (     flx29ccp.asm):01113 [5]             RTS                                       ;
                      (     flx29ccp.asm):01114                                                           ;
D167                  (     flx29ccp.asm):01115         GETHE8
D167 BECC1B           (     flx29ccp.asm):01116 [6]             LDX     OFFSET                            ;GET VALUE
D16A                  (     flx29ccp.asm):01117         GETHE9
D16A 1CFE             (     flx29ccp.asm):01118 [3]             ANDCC   #$FE                              ;CLC  CLEAR ERRORS
D16C 39               (     flx29ccp.asm):01119 [5]             RTS
                      (     flx29ccp.asm):01120         
                      (     flx29ccp.asm):01121         ;* TSTHEX
                      (     flx29ccp.asm):01122         ;*
                      (     flx29ccp.asm):01123         ;* TEST For vaLID HEX CHARACTER
                      (     flx29ccp.asm):01124         
D16D                  (     flx29ccp.asm):01125         TSTHEX
D16D 815F             (     flx29ccp.asm):01126 [2]             CMPA    #$5F
D16F 2302             (     flx29ccp.asm):01127 [3]             BLS     TSTHE2
D171 8020             (     flx29ccp.asm):01128 [2]             SUBA    #$20
                      (     flx29ccp.asm):01129         
D173                  (     flx29ccp.asm):01130         TSTHE2
D173 8047             (     flx29ccp.asm):01131 [2]             SUBA    #$47                              ;REMOVE BIAS
D175 2A0C             (     flx29ccp.asm):01132 [3]             BPL     TSTHE4                            ;
                      (     flx29ccp.asm):01133                                                           ;
D177 8B06             (     flx29ccp.asm):01134 [2]             ADDA    #6                                ;CHECK RANGE
D179 2A04             (     flx29ccp.asm):01135 [3]             BPL     TSTHE3                            ;ERROR?
                      (     flx29ccp.asm):01136                                                           ;
D17B 8B07             (     flx29ccp.asm):01137 [2]             ADDA    #7                                ;ADD BACK IN
D17D 2A04             (     flx29ccp.asm):01138 [3]             BPL     TSTHE4                            ;ERROR?
                      (     flx29ccp.asm):01139                                                           ;
D17F                  (     flx29ccp.asm):01140         TSTHE3
D17F 8B0A             (     flx29ccp.asm):01141 [2]             ADDA    #$0A                              ;FINAL BIAS
D181 2AE7             (     flx29ccp.asm):01142 [3]             BPL     GETHE9                            ;NO ERROR
                      (     flx29ccp.asm):01143         
D183                  (     flx29ccp.asm):01144         TSTHE4
D183 1A01             (     flx29ccp.asm):01145 [3]             ORCC    #1
D185 39               (     flx29ccp.asm):01146 [5]             RTS
                      (     flx29ccp.asm):01147         
                      (     flx29ccp.asm):01148         ;* INDEC
                      (     flx29ccp.asm):01149         ;*
                      (     flx29ccp.asm):01150         ;* INPUT decimAL NUMBER.
                      (     flx29ccp.asm):01151         ;*
                      (     flx29ccp.asm):01152         ;*   ENTRy: noNE
                      (     flx29ccp.asm):01153         ;*   EXIT:  cs IF ERROR
                      (     flx29ccp.asm):01154         ;*          vaLUE IN X
                      (     flx29ccp.asm):01155         ;*          b=0 IF NO NUMBER
                      (     flx29ccp.asm):01156         
D186                  (     flx29ccp.asm):01157         INDEC
D186 BDD229           (     flx29ccp.asm):01158 [8]             JSR     CLROFS                            ;CLEAR SPACE & B REG.
D189                  (     flx29ccp.asm):01159         INDEC2
D189 BDD00A           (     flx29ccp.asm):01160 [8]             JSR     NXTCH                             ;GET CHARACTER
D18C 25D9             (     flx29ccp.asm):01161 [3]             BCS     GETHE8                            ;TERM?
D18E 8139             (     flx29ccp.asm):01162 [2]             CMPA    #$39                              ;CHECK FOR NUMBER
D190 22CF             (     flx29ccp.asm):01163 [3]             BHI     GETHE6                            ;
D192 840F             (     flx29ccp.asm):01164 [2]             ANDA    #$0F                              ;MASK NUMBER
D194 3404             (     flx29ccp.asm):01165 [5+1]           PSHS    b                                 ;SAVE COUNT
D196 3402             (     flx29ccp.asm):01166 [5+1]           PSHS    a                                 ;SAVE NUMBER
D198 FCCC1B           (     flx29ccp.asm):01167 [6]             LDD     OFFSET                            ;GET VALUE
D19B 58               (     flx29ccp.asm):01168 [2]             ASLB                                      ;DO TIMES 8
D19C 49               (     flx29ccp.asm):01169 [2]             ROLA                                      ;
D19D 58               (     flx29ccp.asm):01170 [2]             ASLB                                      ;
D19E 49               (     flx29ccp.asm):01171 [2]             ROLA                                      ;
D19F F3CC1B           (     flx29ccp.asm):01172 [7]             ADDD    OFFSET                            ;PLUS TIMES 2
D1A2 58               (     flx29ccp.asm):01173 [2]             ASLB                                      ;
D1A3 49               (     flx29ccp.asm):01174 [2]             ROLA                                      ;
D1A4 EBE0             (     flx29ccp.asm):01175 [4+2]           ADDB    ,s+                               ;ADD IN NEW DIGIT
D1A6 8900             (     flx29ccp.asm):01176 [2]             ADCA    #0                                ;
D1A8 FDCC1B           (     flx29ccp.asm):01177 [6]             STD     OFFSET                            ;SAVE RESULT
D1AB 3504             (     flx29ccp.asm):01178 [5+1]           PULS    b                                 ;GET COUNT
D1AD 5C               (     flx29ccp.asm):01179 [2]             INCB                                      ;BUMP COUNT
D1AE 20D9             (     flx29ccp.asm):01180 [3]             BRA     INDEC2                            ;REPEAT
                      (     flx29ccp.asm):01181         
                      (     flx29ccp.asm):01182         ;* LOAD
                      (     flx29ccp.asm):01183         ;*
                      (     flx29ccp.asm):01184         ;* LOAD Is the SYSTEM BINARY LOADER
                      (     flx29ccp.asm):01185         ;*
                      (     flx29ccp.asm):01186         ;*   ENTRy: x POINTS TO FCB
                      (     flx29ccp.asm):01187         ;*   EXIT:  waRMS IF ERROR
                      (     flx29ccp.asm):01188         ;*          alL RGISTERS CHANGED
                      (     flx29ccp.asm):01189         
D1B0                  (     flx29ccp.asm):01190         LOAD
D1B0 7FCC1D           (     flx29ccp.asm):01191 [7]             CLR     XFR                               ;CLEAR TRANSFER FLAG
D1B3                  (     flx29ccp.asm):01192         LOAD2
D1B3 8D3D             (     flx29ccp.asm):01193 [7]             BSR     DOFMS                             ;DO READ
D1B5 8102             (     flx29ccp.asm):01194 [2]             CMPA    #2                                ;BEGIN DESIGNATOR?
D1B7 2715             (     flx29ccp.asm):01195 [3]             BEQ     LOAD4                             ;YES - GET DATA COUNT
                      (     flx29ccp.asm):01196                                                           ;
D1B9 8116             (     flx29ccp.asm):01197 [2]             CMPA    #$16                              ;TRANSFER DESIG?
D1BB 26F6             (     flx29ccp.asm):01198 [3]             BNE     LOAD2                             ;
D1BD 8D33             (     flx29ccp.asm):01199 [7]             BSR     DOFMS                             ;GET NEXT CHAR
D1BF B7CC1E           (     flx29ccp.asm):01200 [5]             STA     TADR                              ;SET TRANSFER ADR
D1C2 8D2E             (     flx29ccp.asm):01201 [7]             BSR     DOFMS                             ;GET LSB
D1C4 B7CC1F           (     flx29ccp.asm):01202 [5]             STA     TADR+1                            ;SAVE IT
D1C7 8601             (     flx29ccp.asm):01203 [2]             LDA     #1                                ;SET NON ZERO
D1C9 B7CC1D           (     flx29ccp.asm):01204 [5]             STA     XFR                               ;SET TRANSFER FLAG
D1CC 20E5             (     flx29ccp.asm):01205 [3]             BRA     LOAD2                             ;REPEAT
                      (     flx29ccp.asm):01206                                                           ;
D1CE                  (     flx29ccp.asm):01207         LOAD4
D1CE 8D22             (     flx29ccp.asm):01208 [7]             BSR     DOFMS                             ;GET NEXT CHAR
D1D0 1F89             (     flx29ccp.asm):01209 [6]             TFR     a,b                               ;SAVE IT
D1D2 8D1E             (     flx29ccp.asm):01210 [7]             BSR     DOFMS                             ;GET REST
D1D4 1E89             (     flx29ccp.asm):01211 [8]             EXG     a,b                               ;PUT IN ORDER
D1D6 F3CC1B           (     flx29ccp.asm):01212 [7]             ADDD    OFFSET                            ;OFFSET + ADDRESS
D1D9 FDCC3D           (     flx29ccp.asm):01213 [6]             STD     INDEX                             ;SAVE POINTER
D1DC 8D14             (     flx29ccp.asm):01214 [7]             BSR     DOFMS                             ;GET DATA COUNT
D1DE 1F89             (     flx29ccp.asm):01215 [6]             TFR     a,b                               ;MOVE TO B
D1E0 4D               (     flx29ccp.asm):01216 [2]             TSTA                                      ;ZERO COUNT?
D1E1 27D0             (     flx29ccp.asm):01217 [3]             BEQ     LOAD2                             ;YES -
                      (     flx29ccp.asm):01218                                                           ;
D1E3                  (     flx29ccp.asm):01219         LOAD6
D1E3 8D0D             (     flx29ccp.asm):01220 [7]             BSR     DOFMS                             ;GET CHARACTER
D1E5 BECC3D           (     flx29ccp.asm):01221 [6]             LDX     INDEX                             ;GET POINTER
D1E8 A780             (     flx29ccp.asm):01222 [4+2]           STA     ,x+                               ;SAVE IN MEMORY
D1EA BFCC3D           (     flx29ccp.asm):01223 [6]             STX     INDEX                             ;SAVE POINTER
D1ED 5A               (     flx29ccp.asm):01224 [2]             DECB                                      ;DEC THE COUNT
D1EE 26F3             (     flx29ccp.asm):01225 [3]             BNE     LOAD6                             ;FINISHED?
D1F0 20C1             (     flx29ccp.asm):01226 [3]             BRA     LOAD2                             ;REPEAT
                      (     flx29ccp.asm):01227         
                      (     flx29ccp.asm):01228         ;* DOFMS
                      (     flx29ccp.asm):01229         ;*
                      (     flx29ccp.asm):01230         ;* DOFMS does AN IO TRANSFER TO THE
                      (     flx29ccp.asm):01231         ;* FILE Mgmnt SYSTEM.
                      (     flx29ccp.asm):01232         ;*
                      (     flx29ccp.asm):01233         ;*   ENTRy: noNE
                      (     flx29ccp.asm):01234         ;*   EXIT:  saME AS FMS COMMAND
                      (     flx29ccp.asm):01235         
D1F2                  (     flx29ccp.asm):01236         DOFMS
D1F2 8EC840           (     flx29ccp.asm):01237 [3]             LDX     #SYSFCB                           ;POINT TO FCB
D1F5 BDD406           (     flx29ccp.asm):01238 [8]             JSR     FMS                               ;DO COMMAND
D1F8 2711             (     flx29ccp.asm):01239 [3]             BEQ     LD20B                             ;ERROR?
                      (     flx29ccp.asm):01240                                                           ;
D1FA A601             (     flx29ccp.asm):01241 [4+1]           LDA     1,x                               ;GET ERROR CODE
D1FC 8108             (     flx29ccp.asm):01242 [2]             CMPA    #8                                ;IS IT EOF?
D1FE 260E             (     flx29ccp.asm):01243 [3]             BNE     DOFMS4                            ;
                      (     flx29ccp.asm):01244                                                           ;
D200 3262             (     flx29ccp.asm):01245 [4+1]           LEAS    2,s                               ;FIX STACK
D202 8604             (     flx29ccp.asm):01246 [2]             LDA     #4                                ;SET CMND
D204 A784             (     flx29ccp.asm):01247 [4+0]           STA     ,x                                ;
D206 BDD406           (     flx29ccp.asm):01248 [8]             JSR     FMS                               ;CALL FMS
D209 260A             (     flx29ccp.asm):01249 [3]             BNE     DOFMS6                            ;ERROR?
                      (     flx29ccp.asm):01250                                                           ;
D20B                  (     flx29ccp.asm):01251         LD20B
D20B 1CFE             (     flx29ccp.asm):01252 [3]             ANDCC   #$FE                              ;CLC  CLEAR ERROR
D20D 39               (     flx29ccp.asm):01253 [5]             RTS                                       ;
                      (     flx29ccp.asm):01254                                                           ;
D20E                  (     flx29ccp.asm):01255         DOFMS4
D20E B7CC20           (     flx29ccp.asm):01256 [5]             STA     ERRTYP                            ;SET TYPE
D211 8104             (     flx29ccp.asm):01257 [2]             CMPA    #4                                ;NO FILE ERROR?
D213 2772             (     flx29ccp.asm):01258 [3]             BEQ     LD287                             ;YES -
                      (     flx29ccp.asm):01259                                                           ;
D215                  (     flx29ccp.asm):01260         DOFMS6
D215 8D73             (     flx29ccp.asm):01261 [7]             BSR     RPTERR                            ;REPORT ERROR
D217 7ECDDE           (     flx29ccp.asm):01262 [4]             JMP     NFERR4                            ;DO WARM START
                      (     flx29ccp.asm):01263         
                      (     flx29ccp.asm):01264         ;* GET
                      (     flx29ccp.asm):01265         ;*
                      (     flx29ccp.asm):01266         ;* GET IS the DOS COMMAND USED TO
                      (     flx29ccp.asm):01267         ;* LOAD Binary FILES INTO MEMORY.
                      (     flx29ccp.asm):01268         ;*
                      (     flx29ccp.asm):01269         ;*   ENTRy: noNE
                      (     flx29ccp.asm):01270         ;*   EXIT:  alL REGISTERS CHANGED
                      (     flx29ccp.asm):01271         
D21A                  (     flx29ccp.asm):01272         GET
D21A 8600             (     flx29ccp.asm):01273 [2]             LDA     #0                                ;SET DEFAULT CODE
D21C 8D35             (     flx29ccp.asm):01274 [7]             BSR     GETOPN                            ;GET & OPEN FILE
D21E 250F             (     flx29ccp.asm):01275 [3]             BCS     TSTNAM                            ;NO NAME?
D220 8D07             (     flx29ccp.asm):01276 [7]             BSR     CLROFS                            ;CLEAR OFFSET
D222 7CCC4C           (     flx29ccp.asm):01277 [7]             INC     GOTFIL                            ;SET FILE INDIC.
D225 8D89             (     flx29ccp.asm):01278 [7]             BSR     LOAD                              ;GO DO LOAD
D227 20F1             (     flx29ccp.asm):01279 [3]             BRA     GET                               ;REPEAT PROCESS
                      (     flx29ccp.asm):01280         
                      (     flx29ccp.asm):01281         ;* CLROFS
                      (     flx29ccp.asm):01282         ;*
                      (     flx29ccp.asm):01283         ;* CLEARS storAGE LOC. OFFSET
                      (     flx29ccp.asm):01284         
D229                  (     flx29ccp.asm):01285         CLROFS
D229 4F               (     flx29ccp.asm):01286 [2]             CLRA
D22A 5F               (     flx29ccp.asm):01287 [2]             CLRB
D22B FDCC1B           (     flx29ccp.asm):01288 [6]             STD     OFFSET
D22E 39               (     flx29ccp.asm):01289 [5]             RTS
                      (     flx29ccp.asm):01290         
                      (     flx29ccp.asm):01291         ;* TSTNAM
                      (     flx29ccp.asm):01292         ;*
                      (     flx29ccp.asm):01293         ;* TSTNAM testS TO SEE IF ANY NAMES HAVE
                      (     flx29ccp.asm):01294         ;* BEEN ProcesSED YET.
                      (     flx29ccp.asm):01295         
D22F                  (     flx29ccp.asm):01296         TSTNAM
D22F F6CC4C           (     flx29ccp.asm):01297 [5]             LDB     GOTFIL                            ;CHECK FLAG
D232 1027FB9D         (     flx29ccp.asm):01298 [5+?]           LBEQ    NFERR                             ;REPORT ERROR
D236 7ECD03           (     flx29ccp.asm):01299 [4]             JMP     WARMS                             ;ALL DONE
                      (     flx29ccp.asm):01300         
                      (     flx29ccp.asm):01301         ;* LGO
                      (     flx29ccp.asm):01302         ;*
                      (     flx29ccp.asm):01303         ;* LGO IS the SYSTEM LOAD AND GO MODULE.
                      (     flx29ccp.asm):01304         ;*
                      (     flx29ccp.asm):01305         ;*   ENTRy: noNE
                      (     flx29ccp.asm):01306         ;*   EXIT:  alL CHANGED
                      (     flx29ccp.asm):01307         
D239                  (     flx29ccp.asm):01308         LGO
D239 8602             (     flx29ccp.asm):01309 [2]             LDA     #2                                ;SET DEFAULT CODE
D23B 8D22             (     flx29ccp.asm):01310 [7]             BSR     GETOP2                            ;OPEN FILE
D23D 8DEA             (     flx29ccp.asm):01311 [7]             BSR     CLROFS                            ;CLEAR OFFSET
D23F BDD1B0           (     flx29ccp.asm):01312 [8]             JSR     LOAD                              ;GO DO LOAD
                      (     flx29ccp.asm):01313         ;                    ;
D242 F6CC1D           (     flx29ccp.asm):01314 [5]             LDB     XFR                               ;CHECK FOR TRANSFER ADR
D245 2704             (     flx29ccp.asm):01315 [3]             BEQ     LGO2                              ;
D247 6E9FCC1E         (     flx29ccp.asm):01316 [3+5]           JMP     [TADR]                            ;JUMP TO XFR ADR
                      (     flx29ccp.asm):01317                                                           ;
D24B                  (     flx29ccp.asm):01318         LGO2
D24B 8ECC56           (     flx29ccp.asm):01319 [3]             LDX     #NOTRST                           ;POINT TO STRING
D24E 8681             (     flx29ccp.asm):01320 [2]             LDA     #$81                              ;SET TYPE
D250 7ECDD8           (     flx29ccp.asm):01321 [4]             JMP     NFERR1                            ;REPORT
                      (     flx29ccp.asm):01322         
                      (     flx29ccp.asm):01323         ;* GETOPN
                      (     flx29ccp.asm):01324         ;*
                      (     flx29ccp.asm):01325         ;* GETOPN gets THE FILES NAME FROM
                      (     flx29ccp.asm):01326         ;* THE INput bUFFER AND OPENS THE FILE
                      (     flx29ccp.asm):01327         ;*
                      (     flx29ccp.asm):01328         ;*   ENTRy: a HAS DEFAULT CODE
                      (     flx29ccp.asm):01329         ;*   EXIT:  alL CHANGED
                      (     flx29ccp.asm):01330         
D253                  (     flx29ccp.asm):01331         GETOPN
D253 3402             (     flx29ccp.asm):01332 [5+1]           PSHS    a                                 ;SAVE CODE
D255 8EC840           (     flx29ccp.asm):01333 [3]             LDX     #SYSFCB                           ;POINT TO FCB
D258 BDD032           (     flx29ccp.asm):01334 [8]             JSR     GETFIL                            ;GET FILE SPEC
D25B 3502             (     flx29ccp.asm):01335 [5+1]           PULS    a                                 ;RESTORE CODE
D25D 251A             (     flx29ccp.asm):01336 [3]             BCS     GETOP4                            ;ERROR?
                      (     flx29ccp.asm):01337                                                           ;
D25F                  (     flx29ccp.asm):01338         GETOP2
D25F 8EC840           (     flx29ccp.asm):01339 [3]             LDX     #SYSFCB                           ;POINT TO FCB
D262 BDD0E7           (     flx29ccp.asm):01340 [8]             JSR     SETEXT                            ;SET EXTENSION
D265 8EC840           (     flx29ccp.asm):01341 [3]             LDX     #SYSFCB                           ;POINT TO FCB
D268 8601             (     flx29ccp.asm):01342 [2]             LDA     #1                                ;SET OPEN CODE
D26A A784             (     flx29ccp.asm):01343 [4+0]           STA     ,x                                ;SET COMMAND
D26C BDD1F2           (     flx29ccp.asm):01344 [8]             JSR     DOFMS                             ;GO DO FMS
D26F 102500BB         (     flx29ccp.asm):01345 [5+?]           LBCS    NONMER                            ;REPORT ANY ERROR
D273 86FF             (     flx29ccp.asm):01346 [2]             LDA     #$FF                              ;SET NEG
D275 A7883B           (     flx29ccp.asm):01347 [4+1]           STA     59,x                              ;SET FOR NO SPC COMP
D278 39               (     flx29ccp.asm):01348 [5]             RTS                                       ;
                      (     flx29ccp.asm):01349                                                           ;
D279                  (     flx29ccp.asm):01350         GETOP4
D279 B6CC11           (     flx29ccp.asm):01351 [5]             LDA     LSTTRM                            ;GET TERM
D27C 810D             (     flx29ccp.asm):01352 [2]             CMPA    #$0D                              ;IS TERM CR?
D27E 2707             (     flx29ccp.asm):01353 [3]             BEQ     LD287                             ;YES -
                      (     flx29ccp.asm):01354                                                           ;
D280 B1CC02           (     flx29ccp.asm):01355 [5]             CMPA    TTYEOL                            ;IS IT EOL?
D283 1026FB4C         (     flx29ccp.asm):01356 [5+?]           LBNE    NFERR                             ;ERROR IF NEITHER
                      (     flx29ccp.asm):01357                                                           ;
D287                  (     flx29ccp.asm):01358         LD287
D287 1A01             (     flx29ccp.asm):01359 [3]             ORCC    #1                                ;SEC  SET TERM INDICATOR
D289 39               (     flx29ccp.asm):01360 [5]             RTS
                      (     flx29ccp.asm):01361         
                      (     flx29ccp.asm):01362         ;* RPTERR
                      (     flx29ccp.asm):01363         ;*
                      (     flx29ccp.asm):01364         ;* RPTERR repoRTS FMS ERRORS
                      (     flx29ccp.asm):01365         
D28A                  (     flx29ccp.asm):01366         RPTERR
D28A 3430             (     flx29ccp.asm):01367 [5+4]           PSHS    x,y                               ;SAVE REGISTERS
D28C A601             (     flx29ccp.asm):01368 [4+1]           LDA     1,x                               ;GET ERR NUM
D28E B7CC20           (     flx29ccp.asm):01369 [5]             STA     ERRTYP                            ;SAVE IT
D291 2763             (     flx29ccp.asm):01370 [3]             BEQ     RPTE44                            ;
D293 BDCDE4           (     flx29ccp.asm):01371 [8]             JSR     RESTIO                            ;RESTORE IO
D296 10BECC2D         (     flx29ccp.asm):01372 [7]             LDY     ERRVEC                            ;GET ERR VECTOR
D29A 2608             (     flx29ccp.asm):01373 [3]             BNE     RPTER1                            ;
D29C 8110             (     flx29ccp.asm):01374 [2]             CMPA    #$10                              ;NOT READY ERROR
D29E 2758             (     flx29ccp.asm):01375 [3]             BEQ     RPTER6                            ;
D2A0 108ECCA1         (     flx29ccp.asm):01376 [4]             LDY     #ERNM                             ;POINT TO STRING
                      (     flx29ccp.asm):01377                                                           ;
D2A4                  (     flx29ccp.asm):01378         RPTER1
D2A4 8EC840           (     flx29ccp.asm):01379 [3]             LDX     #SYSFCB                           ;POINT TO FCB
D2A7 6D02             (     flx29ccp.asm):01380 [6+1]           TST     2,x                               ;
D2A9 2709             (     flx29ccp.asm):01381 [3]             BEQ     RPTER2                            ;
                      (     flx29ccp.asm):01382                                                           ;
D2AB 8604             (     flx29ccp.asm):01383 [2]             LDA     #4                                ;CLOSE FILE IN FCB
D2AD A784             (     flx29ccp.asm):01384 [4+0]           STA     ,x                                ;
D2AF BDD406           (     flx29ccp.asm):01385 [8]             JSR     FMS                               ;CALL FMS
D2B2 262E             (     flx29ccp.asm):01386 [3]             BNE     RPTER4                            ;
                      (     flx29ccp.asm):01387                                                           ;
D2B4                  (     flx29ccp.asm):01388         RPTER2
D2B4 8EC838           (     flx29ccp.asm):01389 [3]             LDX     #SYSFCB-8                         ;SET TO FCB
D2B7 C60B             (     flx29ccp.asm):01390 [2]             LDB     #$0B                              ;SET COUNT
D2B9 8D6E             (     flx29ccp.asm):01391 [7]             BSR     RPTER9                            ;COPY NAME TO FCB
D2BB 8EC840           (     flx29ccp.asm):01392 [3]             LDX     #SYSFCB                           ;
D2BE B6CC0B           (     flx29ccp.asm):01393 [5]             LDA     SYSDRV                            ;SET ALL DRIVES ;** CHANGED TO SYS ;** 2-25-79
D2C1 A703             (     flx29ccp.asm):01394 [4+1]           STA     3,x                               ;
D2C3 8601             (     flx29ccp.asm):01395 [2]             LDA     #1                                ;SET EXTENSION
D2C5 A784             (     flx29ccp.asm):01396 [4+0]           STA     ,x                                ;OPEN FOR READ
D2C7 BDD406           (     flx29ccp.asm):01397 [8]             JSR     FMS                               ;
D2CA 2616             (     flx29ccp.asm):01398 [3]             BNE     RPTER4                            ;ERROR?
                      (     flx29ccp.asm):01399                                                           ;
D2CC B6CC20           (     flx29ccp.asm):01400 [5]             LDA     ERRTYP                            ;GET ERROR NUM
D2CF 4A               (     flx29ccp.asm):01401 [2]             DECA                                      ;CALCULATE REC NUM
D2D0 47               (     flx29ccp.asm):01402 [2]             ASRA                                      ;
D2D1 47               (     flx29ccp.asm):01403 [2]             ASRA                                      ;
D2D2 4C               (     flx29ccp.asm):01404 [2]             INCA                                      ;
D2D3 6F8820           (     flx29ccp.asm):01405 [6+1]           CLR     32,x                              ;SET LRN IN FCB
D2D6 A78821           (     flx29ccp.asm):01406 [4+1]           STA     33,x                              ;
D2D9 8615             (     flx29ccp.asm):01407 [2]             LDA     #21                               ;
D2DB A784             (     flx29ccp.asm):01408 [4+0]           STA     ,x                                ;DO POSITION
D2DD BDD406           (     flx29ccp.asm):01409 [8]             JSR     FMS                               ;
D2E0 271E             (     flx29ccp.asm):01410 [3]             BEQ     RPTER7                            ;
                      (     flx29ccp.asm):01411                                                           ;
D2E2                  (     flx29ccp.asm):01412         RPTER4
D2E2 8ECC6F           (     flx29ccp.asm):01413 [3]             LDX     #DSKERS                           ;POINT TO STRING
D2E5 BDCE79           (     flx29ccp.asm):01414 [8]             JSR     PSTRNG                            ;OUTPUT IT
D2E8 BECC3F           (     flx29ccp.asm):01415 [6]             LDX     CRSAVE                            ;RESTORE TO FCB
D2EB B6CC20           (     flx29ccp.asm):01416 [5]             LDA     ERRTYP                            ;GET ERR NUM
D2EE A701             (     flx29ccp.asm):01417 [4+1]           STA     1,x                               ;
D2F0 6F84             (     flx29ccp.asm):01418 [6+0]           CLR     ,x                                ;
D2F2 5F               (     flx29ccp.asm):01419 [2]             CLRB                                      ;
D2F3 BDCF82           (     flx29ccp.asm):01420 [8]             JSR     OUTDEC                            ;OUTPUT NUMBER
                      (     flx29ccp.asm):01421                                                           ;
D2F6                  (     flx29ccp.asm):01422         RPTE44
D2F6 35B0             (     flx29ccp.asm):01423 [5+6]           PULS    x,y,pc                            ;RESTORE REGS. & RETURN
                      (     flx29ccp.asm):01424                                                           ;
D2F8                  (     flx29ccp.asm):01425         RPTER6
D2F8 8ECC7C           (     flx29ccp.asm):01426 [3]             LDX     #NTRST                            ;POINT TO STRING
D2FB BDCE79           (     flx29ccp.asm):01427 [8]             JSR     PSTRNG                            ;OUTPUT IT
D2FE 20F6             (     flx29ccp.asm):01428 [3]             BRA     RPTE44                            ;
                      (     flx29ccp.asm):01429                                                           ;
D300                  (     flx29ccp.asm):01430         RPTER7
D300 BDCEB1           (     flx29ccp.asm):01431 [8]             JSR     PCRLF                             ;OUTPUT CR & LF
D303 8EC840           (     flx29ccp.asm):01432 [3]             LDX     #SYSFCB                           ;SET TO FCB
D306 B6CC20           (     flx29ccp.asm):01433 [5]             LDA     ERRTYP                            ;GET ERROR
D309 4A               (     flx29ccp.asm):01434 [2]             DECA                                      ;FIND RECORD IN FCB
D30A 8403             (     flx29ccp.asm):01435 [2]             ANDA    #3                                ;MASK NUMBER
D30C C63F             (     flx29ccp.asm):01436 [2]             LDB     #63                               ;GET MESSAGE LENGTH
D30E 3D               (     flx29ccp.asm):01437 [11]            MUL                                       ;GET TO DESIRED MESSAGE
D30F CB04             (     flx29ccp.asm):01438 [2]             ADDB    #4                                ;ADD IN BIAS
D311 E78822           (     flx29ccp.asm):01439 [4+1]           STB     34,x                              ;SET FDI IN FCB
                      (     flx29ccp.asm):01440                                                           ;
D314                  (     flx29ccp.asm):01441         RPTE85
D314 BDD406           (     flx29ccp.asm):01442 [8]             JSR     FMS                               ;GET CHARACTER
D317 26C9             (     flx29ccp.asm):01443 [3]             BNE     RPTER4                            ;ERROR?
D319 BDCF3D           (     flx29ccp.asm):01444 [8]             JSR     PUTCHR                            ;OUTPUT CHARACTER
D31C 810D             (     flx29ccp.asm):01445 [2]             CMPA    #$0D                              ;IS IT CR?
D31E 26F4             (     flx29ccp.asm):01446 [3]             BNE     RPTE85                            ;REPEAT
                      (     flx29ccp.asm):01447                                                           ;
D320 8604             (     flx29ccp.asm):01448 [2]             LDA     #4                                ;CLOSE FILE
D322 A784             (     flx29ccp.asm):01449 [4+0]           STA     ,x                                ;
D324 BDD406           (     flx29ccp.asm):01450 [8]             JSR     FMS                               ;CALL FMS
D327 20CD             (     flx29ccp.asm):01451 [3]             BRA     RPTE44                            ;EXIT
                      (     flx29ccp.asm):01452                                                           ;
D329                  (     flx29ccp.asm):01453         RPTER9
D329 3430             (     flx29ccp.asm):01454 [5+4]           PSHS    x,y                               ;SAVE REGISTERS
D32B 7ED0FB           (     flx29ccp.asm):01455 [4]             JMP     SETEX4                            ;GO COPY
                      (     flx29ccp.asm):01456         
                      (     flx29ccp.asm):01457         ;* NONMER
                      (     flx29ccp.asm):01458         ;*
                      (     flx29ccp.asm):01459         ;* REPORT no nAME ERROR
                      (     flx29ccp.asm):01460         
D32E                  (     flx29ccp.asm):01461         NONMER
D32E 8ECC65           (     flx29ccp.asm):01462 [3]             LDX     #NONMST                           ;POINT TO STRING
D331 7ECDDB           (     flx29ccp.asm):01463 [4]             JMP     NFERR2                            ;REPORT IT
                      (     flx29ccp.asm):01464         
                      (     flx29ccp.asm):01465         ;* DOCMD
                      (     flx29ccp.asm):01466         ;*
                      (     flx29ccp.asm):01467         ;* DO COMmand LINE
                      (     flx29ccp.asm):01468         
D334                  (     flx29ccp.asm):01469         DOCMD
D334 3506             (     flx29ccp.asm):01470 [5+2]           PULS    a,b                               ;GET RET ADR
D336 FDCC43           (     flx29ccp.asm):01471 [6]             STD     RETADR                            ;SAVE ADDRESS
D339 10FFCC45         (     flx29ccp.asm):01472 [7]             STS     STKSTR                            ;SAVE STACK PNTR
D33D 7FCC20           (     flx29ccp.asm):01473 [7]             CLR     ERRTYP                            ;CLEAR FLAG
D340 7CCC28           (     flx29ccp.asm):01474 [7]             INC     CMFLG                             ;SET MODE
D343 7ECDB2           (     flx29ccp.asm):01475 [4]             JMP     DOS4                              ;GO DO LINE
                      (     flx29ccp.asm):01476         
                      (     flx29ccp.asm):01477         ;* RETRN
                      (     flx29ccp.asm):01478         ;*
                      (     flx29ccp.asm):01479         ;* RETRN returNS FROM DOCMD
                      (     flx29ccp.asm):01480         
D346                  (     flx29ccp.asm):01481         RETRN
D346 7FCC28           (     flx29ccp.asm):01482 [7]             CLR     CMFLG                             ;CLEAR MODE
D349 10FECC45         (     flx29ccp.asm):01483 [7]             LDS     STKSTR                            ;RESTORE STACK
D34D F6CC20           (     flx29ccp.asm):01484 [5]             LDB     ERRTYP                            ;GET STATUS
D350 6E9FCC43         (     flx29ccp.asm):01485 [3+5]           JMP     [RETADR]                          ;DO RETURN
                      (     flx29ccp.asm):01486         
                      (     flx29ccp.asm):01487         ;* ADDBX
                      (     flx29ccp.asm):01488         ;* ADDS ContenTS OF B TO X
                      (     flx29ccp.asm):01489         
D354                  (     flx29ccp.asm):01490         ADDBX
D354 3A               (     flx29ccp.asm):01491 [3]             ABX
D355 39               (     flx29ccp.asm):01492 [5]             RTS
                      (     flx29ccp.asm):01493         
                      (     flx29ccp.asm):01494         ;* MEXIT
                      (     flx29ccp.asm):01495         ;*
                      (     flx29ccp.asm):01496         ;* MONITOr exiT CHECK
                      (     flx29ccp.asm):01497         
D356                  (     flx29ccp.asm):01498         MEXIT
D356 7DCCFC           (     flx29ccp.asm):01499 [7]             TST     PR1                               ;CHECK PROCESS 1
D359 2604             (     flx29ccp.asm):01500 [3]             BNE     MEXIT2                            ;
D35B 6E9FD3F3         (     flx29ccp.asm):01501 [3+5]           JMP     [MONITRP]                         ;JUMP TO MONITOR
                      (     flx29ccp.asm):01502         ;
D35F                  (     flx29ccp.asm):01503         MEXIT2
D35F 8EC840           (     flx29ccp.asm):01504 [3]             LDX     #SYSFCB                           ;POINT TO FCB
D362 861B             (     flx29ccp.asm):01505 [2]             LDA     #27                               ;
D364 A701             (     flx29ccp.asm):01506 [4+1]           STA     1,x                               ;SET ERROR
D366 BDD28A           (     flx29ccp.asm):01507 [8]             JSR     RPTERR                            ;REPORT ERROR
D369 7ECD67           (     flx29ccp.asm):01508 [4]             JMP     ENTRY                             ;GO BACK
                      (        flex9.asm):00010                 INCLUDE "flx29fms.asm"
                      (     flx29fms.asm):00001                 OPT     PAG
                      (     flx29fms.asm):00002                 TTL     6809 FILE MANAGEMENT SYSTEM
                      (     flx29fms.asm):00003                 PAG
                      (     flx29fms.asm):00004                 PRAGMA  CD
                      (     flx29fms.asm):00005         ;*
                      (     flx29fms.asm):00006         ;* TSC 6809 DISK FILE MANAGEMENT SYSTEM
                      (     flx29fms.asm):00007         ;*
                      (     flx29fms.asm):00008         ;* COPYRIGHT (C) 1979 BY
                      (     flx29fms.asm):00009         ;*
                      (     flx29fms.asm):00010         ;* TECHNICAL SYSTEMS CONSULTANTS, INC.
                      (     flx29fms.asm):00011         ;* BOX 2574
                      (     flx29fms.asm):00012         ;* WEST LAFAYETTE, INDIANA 47906
                      (     flx29fms.asm):00013         ;* (317) 463-2502
                      (     flx29fms.asm):00014         ;*
                      (     flx29fms.asm):00015         ;* NOTE:
                      (     flx29fms.asm):00016         ;* AS OF 11/79 THE POINTS IN FMS WHICH LOAD A REGISTER
                      (     flx29fms.asm):00017         ;* WITH THE SECTOR LENGTH HAVE BEEN CHANGED TO SIMPLY
                      (     flx29fms.asm):00018         ;* CLEAR THE REGISTER (SINCE LDB #256 = LDB #0).
                      (     flx29fms.asm):00019         ;* ALL POINTS AFFECTED BY THIS CHANGE ARE FLAGGED WITH
                      (     flx29fms.asm):00020         ;* FOUR BACKSLASHES IN THE COMMENT FIELD (\\\\).
                      (     flx29fms.asm):00021         ;*
                      (     flx29fms.asm):00022         ;* CORRECTED WRITE FILE SECTOR MAP ROUTINE (WTFSM) 2/4/80.
                      (     flx29fms.asm):00023         
                      (     flx29fms.asm):00024         ;*
                      (     flx29fms.asm):00025         ;* THE FILE MANAGEMENT SYSTEM (FMS) RELIES
                      (     flx29fms.asm):00026         ;* ON THE USER DEFINITIONS OF FILE CONTROL
                      (     flx29fms.asm):00027         ;* BLOCKS (FCB) FOR EACH FILE OPENED.
                      (     flx29fms.asm):00028         ;* THE FCB STRUCTURE IS AS FOLLOWS:
                      (     flx29fms.asm):00029         ;*
                      (     flx29fms.asm):00030         ;* EACH FCB CONSUMES 320 BYTES OF RAM.
                      (     flx29fms.asm):00031         ;* EACH BYTE IS USED AS FOLLOWS:
                      (     flx29fms.asm):00032         ;*
                      (     flx29fms.asm):00033         ;* NAME  OFFSET FUNCTION
                      (     flx29fms.asm):00034         ;* ----  ------ --------
                      (     flx29fms.asm):00035         
     0000             (     flx29fms.asm):00036         FFC             EQU 0                             ;FUNCTION OP CODE
     0001             (     flx29fms.asm):00037         FES             EQU 1                             ;ERROR STATUS BYTE
     0002             (     flx29fms.asm):00038         FAS             EQU 2                             ;ACTIVITY STATUS
     0003             (     flx29fms.asm):00039         FDN             EQU 3                             ;DRIVE NUMBER
     0004             (     flx29fms.asm):00040         FFN             EQU 4                             ;- 11 FILE NAME
     000C             (     flx29fms.asm):00041         FNE             EQU 12                            ;- 14 NAME EXTENSION
     000F             (     flx29fms.asm):00042         FID             EQU 15                            ;IDENTIFIER BYTE
     0010             (     flx29fms.asm):00043         FNU             EQU 16                            ;FILE NUMBER
     0011             (     flx29fms.asm):00044         FSA             EQU 17                            ;- 18 START DISK ADR.
     0013             (     flx29fms.asm):00045         FEA             EQU 19                            ;- 20 END DISK ADDRESS
     0015             (     flx29fms.asm):00046         FSZ             EQU 21                            ;- 22 FILE SIZE
     0017             (     flx29fms.asm):00047         FMP             EQU 23                            ;- 24 FILE SECTOR MAP
     0019             (     flx29fms.asm):00048         FDT             EQU 25                            ;- 27 CREATION DATE
     001C             (     flx29fms.asm):00049         FLP             EQU 28                            ;- 29 FCB LIST POINTER
     001E             (     flx29fms.asm):00050         FCS             EQU 30                            ;- 31 CURRENT SECTOR
     0020             (     flx29fms.asm):00051         FRN             EQU 32                            ;- 33 RECORD NUMBER
     0022             (     flx29fms.asm):00052         FDI             EQU 34                            ;DATA INDEX
     0023             (     flx29fms.asm):00053         FRI             EQU 35                            ;RANDOM INDEX
     0024             (     flx29fms.asm):00054         FWB             EQU 36                            ;- 46 NAME WORK BUFFER
     002F             (     flx29fms.asm):00055         FCD             EQU 47                            ;- 49 CURRENT DIR. ADR.
     0032             (     flx29fms.asm):00056         FFD             EQU 50                            ;- 52 FIRST DELETED DIR.
     0035             (     flx29fms.asm):00057         FLR             EQU 53                            ;- 55 LAST RECORD PNTR
     0038             (     flx29fms.asm):00058         FNK             EQU 56                            ;- 58 NEXT KEY POINTER
     003B             (     flx29fms.asm):00059         FSC             EQU 59                            ;SPACE COMP. CNTR
     003C             (     flx29fms.asm):00060         FSP             EQU 60                            ;- 63 SPARE BYTES
     0040             (     flx29fms.asm):00061         FSB             EQU 64                            ;- 319 SECTOR BUFFER
                      (     flx29fms.asm):00062         
     003C             (     flx29fms.asm):00063         FMX             EQU FSP                           ;MAX SECTOR NUMBER
     0037             (     flx29fms.asm):00064         SBC             EQU FLR+2                         ;SEQ. BLOCK COUNT
                      (     flx29fms.asm):00065         
                      (     flx29fms.asm):00066         ;*
                      (     flx29fms.asm):00067         ;* ALL DRIVER ROUTINES ARE REFERENCED
                      (     flx29fms.asm):00068         ;* THROUGH THIS TABLE.
                      (     flx29fms.asm):00069         
                      (     flx29fms.asm):00070         ;DREAD   equ     $DE00       ;DISK READ ROUTINE
                      (     flx29fms.asm):00071         ;DWRITE  equ     $DE03       ;DISK WRITE ROUTINE
                      (     flx29fms.asm):00072         ;RESTOR  equ     $DE09       ;HEAD RESTORE ROUTINE
                      (     flx29fms.asm):00073         ;VERIFY  equ     $DE06       ;WRITE VERIFY ROUTINE
                      (     flx29fms.asm):00074         ;DRIVE   equ     $DE0C       ;DRIVE SELECT
                      (     flx29fms.asm):00075         ;CHECK   equ     $DE0F       ;CHECK READY
                      (     flx29fms.asm):00076         ;QUKCHK  equ     $DE12       ;QUICK READY CHECK
                      (     flx29fms.asm):00077         ;DINIT   equ     $DE15       ;INITIALIZE DRIVERS
                      (     flx29fms.asm):00078         ;DWARM   equ     $DE18       ;USER WARMSTART ROUTINE
                      (     flx29fms.asm):00079         ;DSEEK   equ     $DE1B       ;SEEK TO TRACK ROUTINE
                      (     flx29fms.asm):00080         
                      (     flx29fms.asm):00081         ;* ALL LOW LEVEL SYSTEM VARIABLES
                      (     flx29fms.asm):00082         ;* AND CONSTANTS ARE IN THIS AREA.
                      (     flx29fms.asm):00083         ;*
                      (     flx29fms.asm):00084         ;* SYSTEM CONSTANTS
                      (     flx29fms.asm):00085         
     0100             (     flx29fms.asm):00086         SL              EQU 256                           ;SECTOR LENGTH
     000B             (     flx29fms.asm):00087         NL              EQU 11                            ;NAME LENGTH
     0005             (     flx29fms.asm):00088         RTC             EQU 5                             ;RETRY COUNT
     0007             (     flx29fms.asm):00089         RSC             EQU 7                             ;SEEK RETRY COUNT
     0004             (     flx29fms.asm):00090         RS              EQU 4                             ;RECORD START
     0010             (     flx29fms.asm):00091         IRS             EQU 16                            ;INFO RECORD START
     0018             (     flx29fms.asm):00092         IRL             EQU 24                            ;INFO RECORD LENGTH
     0004             (     flx29fms.asm):00093         IRFAS           EQU $04                           ;INFO MASK
     0016             (     flx29fms.asm):00094         LSTFC           EQU 22                            ;LAST FUNCTION CODE
     007F             (     flx29fms.asm):00095         MAXSP           EQU $7F                           ;MAX SPACE COUNT
     0020             (     flx29fms.asm):00096         SPC             EQU $20                           ;ASCII SPACE
     0009             (     flx29fms.asm):00097         SCC             EQU 9                             ;SPACE COMPRESSION CHAR.
     0018             (     flx29fms.asm):00098         DELC            EQU $18                           ;DELETE CHARACTER
     0004             (     flx29fms.asm):00099         NODR            EQU 4                             ;NUMBER OF DRIVES
     0000             (     flx29fms.asm):00100         DTRK            EQU 0                             ;DIRECTORY START TRACK
     0005             (     flx29fms.asm):00101         DSEC            EQU 5                             ;DIR. START SECTOR
     0003             (     flx29fms.asm):00102         ISEC            EQU 3                             ;INFO SECTOR NUMBER
     007F             (     flx29fms.asm):00103         TRMSK           EQU $7F                           ;TRACK MASK
     007F             (     flx29fms.asm):00104         SCMSK           EQU $7F                           ;SECTOR MASK
     004C             (     flx29fms.asm):00105         LSTTRK          EQU 76                            ;LAST TRACK NUMBER
     000F             (     flx29fms.asm):00106         LSTSEC          EQU 15                            ;LAST SECTOR NUMBER
     0010             (     flx29fms.asm):00107         RNFMSK          EQU $10                           ;REC NOT FOUND MASK
     0005             (     flx29fms.asm):00108         MAIND           EQU $0005                         ;MAIN DIRECTORY ADDRESS
                      (     flx29fms.asm):00109         
                      (     flx29fms.asm):00110         ;* DOS CONSTANTS
                      (     flx29fms.asm):00111         
     CC0E             (     flx29fms.asm):00112         DATE            EQU $CC0E                         ;SYSTEM DATA
     C709             (     flx29fms.asm):00113         LOCK            EQU $C709                         ;LOCK FMS
     C70C             (     flx29fms.asm):00114         UNLOCK          EQU $C70C                         ;UNLOCK FMS
                      (     flx29fms.asm):00115         ;PR1     equ     $CCFC       ;PROCESS 1 REGISTER
                      (     flx29fms.asm):00116         
                      (     flx29fms.asm):00117         ;* SYSTEM ERROR NUMBER DEFINITIONS
                      (     flx29fms.asm):00118         ;*
                      (     flx29fms.asm):00119         ;* NAME  NUMBER MEANING
                      (     flx29fms.asm):00120         ;* ----  ------ -------
                      (     flx29fms.asm):00121         
     0000             (     flx29fms.asm):00122         NOER            EQU 0                             ;NO ERROR
     0001             (     flx29fms.asm):00123         ICER            EQU 1                             ;ILLEGAL FUNCTION CODE
     0002             (     flx29fms.asm):00124         FBER            EQU 2                             ;FILE BUSY
     0003             (     flx29fms.asm):00125         FEER            EQU 3                             ;FILE EXISTS
     0004             (     flx29fms.asm):00126         NFER            EQU 4                             ;NO SUCH FILE
     0005             (     flx29fms.asm):00127         DRER            EQU 5                             ;DIRECTORY ERROR
     0006             (     flx29fms.asm):00128         TMER            EQU 6                             ;TOO MANY FILES
     0007             (     flx29fms.asm):00129         DFER            EQU 7                             ;DISK FULL
     0008             (     flx29fms.asm):00130         EFER            EQU 8                             ;END OF FILE
     0009             (     flx29fms.asm):00131         RDER            EQU 9                             ;READ ERROR (CRC)
     000A             (     flx29fms.asm):00132         WTER            EQU 10                            ;WRITE ERROR (CRC)
     000B             (     flx29fms.asm):00133         WPER            EQU 11                            ;WRITE PROTECTED
     000C             (     flx29fms.asm):00134         DPER            EQU 12                            ;DELETE PROTECTED
     000D             (     flx29fms.asm):00135         IFER            EQU 13                            ;ILLEGAL FCB
     000E             (     flx29fms.asm):00136         DAER            EQU 14                            ;ILLEGAL DISK ADDRESS
     000F             (     flx29fms.asm):00137         DNER            EQU 15                            ;DRIVE NUMBER ERROR
     0010             (     flx29fms.asm):00138         NRER            EQU 16                            ;NOT READY
     0011             (     flx29fms.asm):00139         ADER            EQU 17                            ;ACCESS DENIED
     0012             (     flx29fms.asm):00140         STER            EQU 18                            ;STATUS ERROR
     0013             (     flx29fms.asm):00141         IRER            EQU 19                            ;INDEX RANGE ERROR
     0014             (     flx29fms.asm):00142         FIER            EQU 20                            ;FMS INACTIVE
     0015             (     flx29fms.asm):00143         INER            EQU 21                            ;ILLEGAL FILE NAME
     0016             (     flx29fms.asm):00144         CLER            EQU 22                            ;CLOSE ERROR
     0017             (     flx29fms.asm):00145         FSER            EQU 23                            ;FSM OVERFLOW ERROR
     0018             (     flx29fms.asm):00146         RRER            EQU 24                            ;RECORD RANGE ERROR
     0019             (     flx29fms.asm):00147         RMER            EQU 25                            ;RECORD MATCH ERROR
                      (     flx29fms.asm):00148         
                      (     flx29fms.asm):00149         ;
                      (     flx29fms.asm):00150         ; CONSOLE I/O DRIVER VECTOR TABLE
                      (     flx29fms.asm):00151         ;_____________________________________________________________________________________________________
                      (     flx29fms.asm):00152                 ORG     $D3E1                             ; TABLE STARTS AT $D3E1
                      (     flx29fms.asm):00153         
D3E1                  (     flx29fms.asm):00154         LD3E1
D3E1 DE8E             (     flx29fms.asm):00155                 FDB     ADDDEV                            ; add an IRQ handler to table
D3E3 DE9A             (     flx29fms.asm):00156                 FDB     DELDEV                            ; delete an IRQ handler from table
                      (     flx29fms.asm):00157         
D3E5                  (     flx29fms.asm):00158         INCHNEP
D3E5 DE6D             (     flx29fms.asm):00159                 FDB     INCHNE                            ; INPUT CHARACTER W/O ECHO
D3E7                  (     flx29fms.asm):00160         IHNDLRP
D3E7 DE7A             (     flx29fms.asm):00161                 FDB     IHNDLR                            ; IRQ INTERRUPT HANDLER
D3E9                  (     flx29fms.asm):00162         SWIVECP
D3E9 FDAB             (     flx29fms.asm):00163                 FDB     SWIVEC                            ; SWI3 VECTOR LOCATION
D3EB                  (     flx29fms.asm):00164         IRQVECP
D3EB FDAB             (     flx29fms.asm):00165                 FDB     IRQVEC                            ; IRQ VECTOR LOCATION
D3ED DE3E             (     flx29fms.asm):00166                 FDB     TMOFF                             ; TIMER OFF ROUTINE
D3EF DE3E             (     flx29fms.asm):00167                 FDB     TMON                              ; TIMER ON ROUTINE
D3F1 DE3E             (     flx29fms.asm):00168                 FDB     TMINT                             ; TIMER INITIALIZATION
D3F3                  (     flx29fms.asm):00169         MONITRP
D3F3 DE33             (     flx29fms.asm):00170                 FDB     MONITR                            ; MONITOR ENTRY ADDRESS
D3F5                  (     flx29fms.asm):00171         TINITP
D3F5 DE3F             (     flx29fms.asm):00172                 FDB     TINIT                             ; TERMINAL INITIALIZATION
D3F7 DE5D             (     flx29fms.asm):00173                 FDB     STAT                              ; CHECK TERMINAL STATUS
D3F9 DE4C             (     flx29fms.asm):00174                 FDB     VOUTCH                            ; OUTPUT CHARACTER
D3FB DE43             (     flx29fms.asm):00175                 FDB     VINCH                             ; INPUT CHARACTER W/ ECHO
                      (     flx29fms.asm):00176         
                      (     flx29fms.asm):00177         
                      (     flx29fms.asm):00178                 ORG     $D3FD
D3FD                  (     flx29fms.asm):00179         TSTSTR
D3FD 7EC400           (     flx29fms.asm):00180 [4]             JMP     STAR
                      (     flx29fms.asm):00181         
                      (     flx29fms.asm):00182                 ORG     $D400
                      (     flx29fms.asm):00183         
                      (     flx29fms.asm):00184         ;* FMS JUMP TABLES
                      (     flx29fms.asm):00185         ;*
                      (     flx29fms.asm):00186         ;* ALL CALLS TO THE FMS SHOULD ENTER
                      (     flx29fms.asm):00187         ;* THROUGH ONE OF THESE THREE POINTS.
                      (     flx29fms.asm):00188         
D400                  (     flx29fms.asm):00189         FMSINT
D400 7ED43A           (     flx29fms.asm):00190 [4]             JMP     INIT                              ;FMS INITIALIZATION  $D400
D403                  (     flx29fms.asm):00191         FMSCLS
D403 7ED45D           (     flx29fms.asm):00192 [4]             JMP     EXCLS                             ;FMS CLOSURE         $D403
D406                  (     flx29fms.asm):00193         FMS
D406 7ED47F           (     flx29fms.asm):00194 [4]             JMP     CMND                              ;FMS COMMAND ENTRY   $D406
                      (     flx29fms.asm):00195         
                      (     flx29fms.asm):00196         ;* GLOBAL VARIABLE STORAGE
                      (     flx29fms.asm):00197         
D409                  (     flx29fms.asm):00198         FCBBAS
D409                  (     flx29fms.asm):00199                 RMB     2                                 ;FCB BASE POINTER        $D409
D40B                  (     flx29fms.asm):00200         FCBSTR
D40B                  (     flx29fms.asm):00201                 RMB     2                                 ;CURRENT FCB             $D40B
D40D                  (     flx29fms.asm):00202         TEMP
D40D                  (     flx29fms.asm):00203                 RMB     2                                 ;TEMPORARY INDEX         $D40D
D40F                  (     flx29fms.asm):00204         DATAPT
D40F                  (     flx29fms.asm):00205                 RMB     2                                 ;DATA POINTER            $D40F
D411                  (     flx29fms.asm):00206         ETRIES
D411                  (     flx29fms.asm):00207                 RMB     1                                 ;ERROR TRY COUNT         $D411
D412                  (     flx29fms.asm):00208         STRIES
D412                  (     flx29fms.asm):00209                 RMB     1                                 ;SEEK TRY COUNT          $D412
D413                  (     flx29fms.asm):00210         CLD
D413                  (     flx29fms.asm):00211                 RMB     2                                 ;CURRENT LOOK UP DIR     $D413
D415                  (     flx29fms.asm):00212         CUD
D415                  (     flx29fms.asm):00213                 RMB     2                                 ;CURRENT USER DIR        $D415
D417                  (     flx29fms.asm):00214         DIRDN
D417                  (     flx29fms.asm):00215                 RMB     1                                 ;DIRECTORY DRIVE NUM     $D417
D418                  (     flx29fms.asm):00216         BKLN
D418                  (     flx29fms.asm):00217                 RMB     2                                 ;BACK LINK               $D418
D41A                  (     flx29fms.asm):00218         SINDIR
D41A                  (     flx29fms.asm):00219                 RMB     1                                 ;SINGLE DIR SEARCH       $D41A
D41B                  (     flx29fms.asm):00220         AVLPNT
D41B                  (     flx29fms.asm):00221                 RMB     2                                 ;AVAIL POINTER           $D41B
D41D                  (     flx29fms.asm):00222         SECMAP
D41D                  (     flx29fms.asm):00223                 RMB     NODR                              ;*6      ;SECTOR MAPS             $D41D
                      (     flx29fms.asm):00224         
                      (     flx29fms.asm):00225                 ORG     $D435
                      (     flx29fms.asm):00226         
D435                  (     flx29fms.asm):00227         VRFYFG
D435 FF               (     flx29fms.asm):00228                 FCB     $FF                               ;VERIFY FLAG
                      (     flx29fms.asm):00229         
D436                  (     flx29fms.asm):00230         DRVINFO
D436 00000000         (     flx29fms.asm):00231                 FCB     $00,$00,$00,$00
                      (     flx29fms.asm):00232         
                      (     flx29fms.asm):00233         ;* SYSTEM ENTRY ROUTINES
                      (     flx29fms.asm):00234         ;*
                      (     flx29fms.asm):00235         ;* THE FOLLOWING THREE ROUTINES SHOULD
                      (     flx29fms.asm):00236         ;* BE ACCESSED THROUGH THE SYSTEM JUMP
                      (     flx29fms.asm):00237         ;* TABLE.
                      (     flx29fms.asm):00238         
                      (     flx29fms.asm):00239         ;* INIT
                      (     flx29fms.asm):00240         ;*
                      (     flx29fms.asm):00241         ;* INIT IS THE FMS INITIALIZATION ROUTINE.
                      (     flx29fms.asm):00242         ;* NO ERRORS CAN OCCUR FROM THIS ROUTINE
                      (     flx29fms.asm):00243         ;* AND THE SYSTEM ASSUMES NO FILES ARE OPEN.
                      (     flx29fms.asm):00244         
D43A                  (     flx29fms.asm):00245         INIT
D43A BDDE15           (     flx29fms.asm):00246 [8]             JSR     CINIT                             ;INITIALIZE DRIVERS
D43D 8ED409           (     flx29fms.asm):00247 [3]             LDX     #FCBBAS                           ;SET POINTER
D440 C60A             (     flx29fms.asm):00248 [2]             LDB     #10                               ;SET COUNT
D442 8D11             (     flx29fms.asm):00249 [7]             BSR     INIT4                             ;CLEAR SPACE
D444 8E0005           (     flx29fms.asm):00250 [3]             LDX     #MAIND                            ;SET MAIN DIRECTORY
D447 BFD413           (     flx29fms.asm):00251 [6]             STX     CLD                               ;
D44A BFD415           (     flx29fms.asm):00252 [6]             STX     CUD                               ;
D44D 7FD41A           (     flx29fms.asm):00253 [7]             CLR     SINDIR                            ;CLEAR SINGLE DIR
                      (     flx29fms.asm):00254                                                           ;
D450                  (     flx29fms.asm):00255         INIT2
D450 8ED41B           (     flx29fms.asm):00256 [3]             LDX     #AVLPNT                           ;POINT TO FMS SPC
D453 C61A             (     flx29fms.asm):00257 [2]             LDB     #26                               ;SET COUNTER
                      (     flx29fms.asm):00258                                                           ;
D455                  (     flx29fms.asm):00259         INIT4
D455 6F80             (     flx29fms.asm):00260 [6+2]           CLR     ,x+                               ;CLEAR BYTE
D457 5A               (     flx29fms.asm):00261 [2]             DECB                                      ;DEC THE COUNT
D458 26FB             (     flx29fms.asm):00262 [3]             BNE     INIT4                             ;REPEAT?
D45A 7EC70C           (     flx29fms.asm):00263 [4]             JMP     UNLOCK
                      (     flx29fms.asm):00264         
                      (     flx29fms.asm):00265         ;* EXCLS
                      (     flx29fms.asm):00266         ;*
                      (     flx29fms.asm):00267         ;* EXCLS IS THE FMS EXIT ROUTINE.
                      (     flx29fms.asm):00268         ;* EXECUTION OF THIS ROUTINE TELLS THE
                      (     flx29fms.asm):00269         ;* SYSTEM TO CLOSE ALL OPEN FILES.
                      (     flx29fms.asm):00270         
D45D                  (     flx29fms.asm):00271         EXCLS
D45D BDC709           (     flx29fms.asm):00272 [8]             JSR     LOCK                              ;LOCK FMS
D460                  (     flx29fms.asm):00273         EXCLS1
D460 BED409           (     flx29fms.asm):00274 [6]             LDX     FCBBAS                            ;GET LINK BASE
D463 27EB             (     flx29fms.asm):00275 [3]             BEQ     INIT2                             ;ANY FCBS LEFT?
D465 3088E4           (     flx29fms.asm):00276 [4+1]           LEAX    -FLP,x                            ;
D468 BFD40B           (     flx29fms.asm):00277 [6]             STX     FCBSTR                            ;SET ACT. FCB
D46B 3420             (     flx29fms.asm):00278 [5+2]           PSHS    y                                 ;SAVE REGISTER
D46D BDDADA           (     flx29fms.asm):00279 [8]             JSR     CLOSE                             ;GO CLOSE FILE
D470 3520             (     flx29fms.asm):00280 [5+2]           PULS    y                                 ;RESTORE REGISTER
D472 24EC             (     flx29fms.asm):00281 [3]             BCC     EXCLS1                            ;REPEAT
                      (     flx29fms.asm):00282                                                           ;
D474 BED40B           (     flx29fms.asm):00283 [6]             LDX     FCBSTR                            ;SET TO FCB
D477 6F02             (     flx29fms.asm):00284 [6+1]           CLR     2,x                               ;CLEAR FAS
D479 BDC70C           (     flx29fms.asm):00285 [8]             JSR     UNLOCK                            ;UNLOCK FMS
D47C C6FF             (     flx29fms.asm):00286 [2]             LDB     #$FF                              ;SET ERROR
D47E 39               (     flx29fms.asm):00287 [5]             RTS
                      (     flx29fms.asm):00288         
                      (     flx29fms.asm):00289         ;* CMND
                      (     flx29fms.asm):00290         ;*
                      (     flx29fms.asm):00291         ;* CMND IS THE FMS COMMAND INTERPRETER.
                      (     flx29fms.asm):00292         ;* ALL COMMAND CALLS TO FMS SHOULD BE
                      (     flx29fms.asm):00293         ;* THROUGH THIS ROUTINE.
                      (     flx29fms.asm):00294         
D47F                  (     flx29fms.asm):00295         CMND
D47F 7DCCFC           (     flx29fms.asm):00296 [7]             TST     PR1                               ;PROCESS ACTIVE?
D482 2703             (     flx29fms.asm):00297 [3]             BEQ     CMND1                             ;
D484 BDC709           (     flx29fms.asm):00298 [8]             JSR     LOCK                              ;LOCK FMS
                      (     flx29fms.asm):00299                                                           ;
D487                  (     flx29fms.asm):00300         CMND1
D487 3424             (     flx29fms.asm):00301 [5+3]           PSHS    b,y                               ;SAVE REGISTERS
D489 BFD40B           (     flx29fms.asm):00302 [6]             STX     FCBSTR                            ;SET FCB STORAGE
D48C 6F01             (     flx29fms.asm):00303 [6+1]           CLR     FES,x                             ;CLEAR ERRORS
D48E E684             (     flx29fms.asm):00304 [4+0]           LDB     FFC,x                             ;GET FUNCTION CODE
D490 2622             (     flx29fms.asm):00305 [3]             BNE     CMND4                             ;IO CODE?
                      (     flx29fms.asm):00306                                                           ;
D492 E602             (     flx29fms.asm):00307 [4+1]           LDB     FAS,x                             ;GET ACTIVITY BYTE
D494 271A             (     flx29fms.asm):00308 [3]             BEQ     CMND3                             ;
                      (     flx29fms.asm):00309                                                           ;
D496 C102             (     flx29fms.asm):00310 [2]             CMPB    #2                                ;IS IT WRITE?
D498 2711             (     flx29fms.asm):00311 [3]             BEQ     CMND2                             ;
D49A BDD5BC           (     flx29fms.asm):00312 [8]             JSR     SRDSEQ                            ;GO DO READ
D49D                  (     flx29fms.asm):00313         CMND15
D49D BED40B           (     flx29fms.asm):00314 [6]             LDX     FCBSTR                            ;RESTORE X
D4A0 2526             (     flx29fms.asm):00315 [3]             BCS     CMND7                             ;ERROR?
D4A2 7DCCFC           (     flx29fms.asm):00316 [7]             TST     PR1                               ;PR 1 ACTIVE?
D4A5 2623             (     flx29fms.asm):00317 [3]             BNE     CMND8                             ;
D4A7 5F               (     flx29fms.asm):00318 [2]             CLRB                                      ;CLEAR ERRORS
D4A8 3524             (     flx29fms.asm):00319 [5+3]           PULS    b,y                               ;RESTORE REGISTERS
D4AA 39               (     flx29fms.asm):00320 [5]             RTS                                       ;
                      (     flx29fms.asm):00321                                                           ;jmp  $f82a
                      (     flx29fms.asm):00322         
D4AB                  (     flx29fms.asm):00323         CMND2
D4AB BDD6D7           (     flx29fms.asm):00324 [8]             JSR     SWTSEQ                            ;GO DO WRITE
D4AE 20ED             (     flx29fms.asm):00325 [3]             BRA     CMND15                            ;
                      (     flx29fms.asm):00326                                                           ;
D4B0                  (     flx29fms.asm):00327         CMND3
D4B0 C612             (     flx29fms.asm):00328 [2]             LDB     #STER                             ;SET STATUS ERROR
D4B2 2014             (     flx29fms.asm):00329 [3]             BRA     CMND7                             ;REPORT ERROR
                      (     flx29fms.asm):00330                                                           ;
D4B4                  (     flx29fms.asm):00331         CMND4
D4B4 C116             (     flx29fms.asm):00332 [2]             CMPB    #LSTFC                            ;CHECK CODE
D4B6 2304             (     flx29fms.asm):00333 [3]             BLS     CMND5                             ;
D4B8 C601             (     flx29fms.asm):00334 [2]             LDB     #ICER                             ;SET CODE ERROR
D4BA 200C             (     flx29fms.asm):00335 [3]             BRA     CMND7                             ;REPORT IT
                      (     flx29fms.asm):00336                                                           ;
D4BC                  (     flx29fms.asm):00337         CMND5
D4BC 5A               (     flx29fms.asm):00338 [2]             DECB                                      ;DEC THE CODE
D4BD 58               (     flx29fms.asm):00339 [2]             ASLB                                      ;CODE TIMES 2
D4BE 8ED4D2           (     flx29fms.asm):00340 [3]             LDX     #CODTBL                           ;POINT TO TABLE
D4C1 AD95             (     flx29fms.asm):00341 [7+4]           JSR     [b,x]                             ;GO DO ROUTINE
D4C3 BED40B           (     flx29fms.asm):00342 [6]             LDX     FCBSTR                            ;RESTORE FCB PNTR
D4C6 2402             (     flx29fms.asm):00343 [3]             BCC     CMND8                             ;ERRORS?
                      (     flx29fms.asm):00344                                                           ;
D4C8                  (     flx29fms.asm):00345         CMND7
D4C8 E701             (     flx29fms.asm):00346 [4+1]           STB     FES,x                             ;SET ERROR
                      (     flx29fms.asm):00347                                                           ;
D4CA                  (     flx29fms.asm):00348         CMND8
D4CA BDC70C           (     flx29fms.asm):00349 [8]             JSR     UNLOCK                            ;
D4CD 6D01             (     flx29fms.asm):00350 [6+1]           TST     FES,x                             ;TEST FOR ERROR
D4CF 3524             (     flx29fms.asm):00351 [5+3]           PULS    b,y                               ;RESTORE REGISTERS
D4D1 39               (     flx29fms.asm):00352 [5]             RTS
                      (     flx29fms.asm):00353         
                      (     flx29fms.asm):00354         ;* CODTBL
                      (     flx29fms.asm):00355         ;*
                      (     flx29fms.asm):00356         ;* CODTBL IS THE SYSTEM TABLE OF
                      (     flx29fms.asm):00357         ;* FUNCTION CODE ROUTINE ADDRESSES.
                      (     flx29fms.asm):00358         
D4D2                  (     flx29fms.asm):00359         CODTBL
D4D2 D98F             (     flx29fms.asm):00360                 FDB     OPNRD                             ;OPNRD   OPEN FOR READ
D4D4 D9E2             (     flx29fms.asm):00361                 FDB     OPNWT                             ;OPNWT   OPEN FOR WRITE
D4D6 DB10             (     flx29fms.asm):00362                 FDB     OPNRW                             ;OPNRW   OPEN FOR READ WRITE
D4D8 DADA             (     flx29fms.asm):00363                 FDB     CLOSE                             ;CLOSE   CLOSE FILE
D4DA D5EA             (     flx29fms.asm):00364                 FDB     REWIND                            ;REWIND  REWIND FILE
D4DC D825             (     flx29fms.asm):00365                 FDB     OPNDIR                            ;OPNDIR  OPEN DIRECTORY
D4DE D840             (     flx29fms.asm):00366                 FDB     GETIR                             ;GETIR   GET INFO RECORD
D4E0 D87F             (     flx29fms.asm):00367                 FDB     PUTIR                             ;PUTIR   PUT INFO RECORD
D4E2 D649             (     flx29fms.asm):00368                 FDB     READSS                            ;READSS  READ SINGLE SECTOR
D4E4 D6A7             (     flx29fms.asm):00369                 FDB     WRITSS                            ;WRITSS  WRITE SINGLE SECTOR
D4E6 D972             (     flx29fms.asm):00370                 FDB     WRTDIR                            ;WRTDIR  WRITE DIRECTORY
D4E8 DBED             (     flx29fms.asm):00371                 FDB     DELETE                            ;DELETE  DELETE FILE
D4EA DB43             (     flx29fms.asm):00372                 FDB     RENAME                            ;RENAME  RENAME FILE
D4EC D6A1             (     flx29fms.asm):00373                 FDB     RETRY4                            ;RETRY4  APPEND FILES
D4EE DA9E             (     flx29fms.asm):00374                 FDB     NEXTS                             ;NEXTS   NEXT SEQU. SECTOR
D4F0 D818             (     flx29fms.asm):00375                 FDB     OPNSIR                            ;OPNSIR  OPEN SYSTEM INFO
D4F2 D577             (     flx29fms.asm):00376                 FDB     GETRAN                            ;GETRAN  GET RANDOM CHARACTER
D4F4 D598             (     flx29fms.asm):00377                 FDB     PUTRAN                            ;PUTRAN  WRITE RANDOM CHARACTER
D4F6 DB1E             (     flx29fms.asm):00378                 FDB     WTAPP                             ;WTAPP   OPEN WRITE APPEND
D4F8 DDD5             (     flx29fms.asm):00379                 FDB     NXTRDY                            ;NXTRDY  FIND NEXT READY DRIVE
D4FA DD13             (     flx29fms.asm):00380                 FDB     POSIT                             ;POSIT   POSITION TO RECORD N
D4FC DCFD             (     flx29fms.asm):00381                 FDB     BKREC                             ;BKREC   BACKUP ONE RECORD
                      (     flx29fms.asm):00382         
                      (     flx29fms.asm):00383         ;*
                      (     flx29fms.asm):00384         ;* THE FOLLOWING ROUTINES ARE THE SYSTEM
                      (     flx29fms.asm):00385         ;* LEVEL ROUTINES USED BY THE FMS.
                      (     flx29fms.asm):00386         
                      (     flx29fms.asm):00387         ;* SETFCB
                      (     flx29fms.asm):00388         ;*
                      (     flx29fms.asm):00389         ;* SETFCB IS USED TO TELL THE SYSTEM
                      (     flx29fms.asm):00390         ;* WHERE THE NEW FCB IS LOCATED.
                      (     flx29fms.asm):00391         ;* IT SETS UP A CHAINED STRUCTURE
                      (     flx29fms.asm):00392         ;* WITH FCBBAS AS THE BASE OF THE CHAIN.
                      (     flx29fms.asm):00393         ;*
                      (     flx29fms.asm):00394         ;*   ENTRY: NONE
                      (     flx29fms.asm):00395         ;*   EXIT:  CS IF FCB EXISTS
                      (     flx29fms.asm):00396         ;*          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00397         
D4FE                  (     flx29fms.asm):00398         SETFCB
D4FE 8D20             (     flx29fms.asm):00399 [7]             BSR     FNDFCB                            ;FIND FCB
D500 2605             (     flx29fms.asm):00400 [3]             BNE     SETFC2                            ;ERROR?
D502 C602             (     flx29fms.asm):00401 [2]             LDB     #FBER                             ;FILE BUSY
D504 1A01             (     flx29fms.asm):00402 [3]             ORCC    #1                                ;SEC SHOW ERROR
D506 39               (     flx29fms.asm):00403 [5]             RTS                                       ;
                      (     flx29fms.asm):00404                                                           ;
D507                  (     flx29fms.asm):00405         SETFC2
D507 ED84             (     flx29fms.asm):00406 [5+0]           STD     ,x                                ;SET FCB
D509 AE84             (     flx29fms.asm):00407 [5+0]           LDX     ,x                                ;GET FCB POS
D50B 6F84             (     flx29fms.asm):00408 [6+0]           CLR     ,x                                ;CLEAR LAST LINK
D50D 6F01             (     flx29fms.asm):00409 [6+1]           CLR     1,x                               ;ALSO SHOWS NO ERROR
D50F 39               (     flx29fms.asm):00410 [5]             RTS
                      (     flx29fms.asm):00411         
                      (     flx29fms.asm):00412         ;* REMFCB
                      (     flx29fms.asm):00413         ;*
                      (     flx29fms.asm):00414         ;* REMFCB IS USED TO REMOVE AN ACTIVE
                      (     flx29fms.asm):00415         ;* FCB FROM THE SYSTEM FCB LIST.
                      (     flx29fms.asm):00416         ;*
                      (     flx29fms.asm):00417         ;*   ENTRY: NONE
                      (     flx29fms.asm):00418         ;*   EXIT:  CS IF FCB NOT FOUND
                      (     flx29fms.asm):00419         ;*          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00420         
D510                  (     flx29fms.asm):00421         REMFCB
D510 8D0E             (     flx29fms.asm):00422 [7]             BSR     FNDFCB                            ;FIND FCB
D512 2705             (     flx29fms.asm):00423 [3]             BEQ     REMFC2                            ;ERROR?
D514 C60D             (     flx29fms.asm):00424 [2]             LDB     #IFER                             ;SET ERROR CODE
D516 1A01             (     flx29fms.asm):00425 [3]             ORCC    #1                                ;SEC SHOW ERROR
D518 39               (     flx29fms.asm):00426 [5]             RTS                                       ;
                      (     flx29fms.asm):00427                                                           ;
D519                  (     flx29fms.asm):00428         REMFC2
D519 EC94             (     flx29fms.asm):00429 [5+3]           LDD     [,x]                              ;GET NEXT LINK
D51B ED84             (     flx29fms.asm):00430 [5+0]           STD     ,x                                ;SAVE NEW VALUE
D51D 1CFE             (     flx29fms.asm):00431 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D51F 39               (     flx29fms.asm):00432 [5]             RTS
                      (     flx29fms.asm):00433         
                      (     flx29fms.asm):00434         ;* FNDFCB
                      (     flx29fms.asm):00435         ;*
                      (     flx29fms.asm):00436         ;* FNDFCB TRIES TO FIND THE FCB IN
                      (     flx29fms.asm):00437         ;* FCBSTR IN THE SYSTEM TABLE.
                      (     flx29fms.asm):00438         ;*
                      (     flx29fms.asm):00439         ;*   ENTRY: NONE
                      (     flx29fms.asm):00440         ;*   EXIT:  NE IF NOT FOUND
                      (     flx29fms.asm):00441         ;*          A & B DESTROYED
                      (     flx29fms.asm):00442         ;*          X POINTS TO FCB
                      (     flx29fms.asm):00443         
D520                  (     flx29fms.asm):00444         FNDFCB
D520 FCD40B           (     flx29fms.asm):00445 [6]             LDD     FCBSTR                            ;PICKUP FCB
D523 C3001C           (     flx29fms.asm):00446 [4]             ADDD    #FLP                              ;SET TO LIST PNTR
D526 8ED409           (     flx29fms.asm):00447 [3]             LDX     #FCBBAS                           ;GET BASE LOC.
D529                  (     flx29fms.asm):00448         FNDFC3
D529 10AE84           (     flx29fms.asm):00449 [6+0]           LDY     ,x                                ;CHECK FOR LIST END
D52C 2603             (     flx29fms.asm):00450 [3]             BNE     FNDFC4                            ;
D52E 1CFB             (     flx29fms.asm):00451 [3]             ANDCC   #$FB                              ;SET NE BIT
D530 39               (     flx29fms.asm):00452 [5]             RTS                                       ;
                      (     flx29fms.asm):00453                                                           ;
D531                  (     flx29fms.asm):00454         FNDFC4
D531 10A384           (     flx29fms.asm):00455 [7+0]           CMPD    ,x                                ;COMPARE VALUE
D534 2601             (     flx29fms.asm):00456 [3]             BNE     FNDFC6                            ;
D536 39               (     flx29fms.asm):00457 [5]             RTS                                       ;RET WITH EQ
                      (     flx29fms.asm):00458                                                           ;
D537                  (     flx29fms.asm):00459         FNDFC6
D537 AE84             (     flx29fms.asm):00460 [5+0]           LDX     ,x                                ;MOVE TO NEXT FCB
D539 20EE             (     flx29fms.asm):00461 [3]             BRA     FNDFC3                            ;REPEAT
                      (     flx29fms.asm):00462         
                      (     flx29fms.asm):00463         ;* CLRFCB
                      (     flx29fms.asm):00464         ;*
                      (     flx29fms.asm):00465         ;* CLRFCB CLEARS SELECTED SECTIONS OF
                      (     flx29fms.asm):00466         ;* THE CURRENT FCB.
                      (     flx29fms.asm):00467         ;*
                      (     flx29fms.asm):00468         ;*   ENTRY: NONE
                      (     flx29fms.asm):00469         ;*   EXIT:  ALL REGISTERS CHANGED
                      (     flx29fms.asm):00470         
D53B                  (     flx29fms.asm):00471         CLRFCB
D53B BED40B           (     flx29fms.asm):00472 [6]             LDX     FCBSTR                            ;GET FCB
D53E 4F               (     flx29fms.asm):00473 [2]             CLRA                                      ;CLEAR A BYTE
D53F 5F               (     flx29fms.asm):00474 [2]             CLRB                                      ;GET SECTOR LENGTH \\\\
D540 8D02             (     flx29fms.asm):00475 [7]             BSR     CLRFC2                            ;CLEAR OUT
D542 C62F             (     flx29fms.asm):00476 [2]             LDB     #FSB-FSA                          ;
D544                  (     flx29fms.asm):00477         CLRFC2
D544 A78811           (     flx29fms.asm):00478 [4+1]           STA     FSA,x                             ;CLEAR BYTE
D547 3001             (     flx29fms.asm):00479 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
D549 5A               (     flx29fms.asm):00480 [2]             DECB                                      ;DEC THE COUNT
D54A 26F8             (     flx29fms.asm):00481 [3]             BNE     CLRFC2                            ;LOOP TIL DONE
D54C 39               (     flx29fms.asm):00482 [5]             RTS
                      (     flx29fms.asm):00483         
                      (     flx29fms.asm):00484         ;* COPNAM
                      (     flx29fms.asm):00485         ;*
                      (     flx29fms.asm):00486         ;* COPNAM WILL COPY THE NAME (NL BYTES)
                      (     flx29fms.asm):00487         ;* FROM FCB AREA FFN (FILE NAME) TO THE
                      (     flx29fms.asm):00488         ;* AREA FWB (WORK BUFFER).
                      (     flx29fms.asm):00489         ;*
                      (     flx29fms.asm):00490         ;*   ENTRY: NONE
                      (     flx29fms.asm):00491         ;*   EXIT:  ALL REGISTERS CHANGED
                      (     flx29fms.asm):00492         
D54D                  (     flx29fms.asm):00493         COPNAM
D54D BED40B           (     flx29fms.asm):00494 [6]             LDX     FCBSTR                            ;PICKUP FCB
D550 C60B             (     flx29fms.asm):00495 [2]             LDB     #NL                               ;SET NAME LENGTH
D552                  (     flx29fms.asm):00496         COPNA2
D552 A604             (     flx29fms.asm):00497 [4+1]           LDA     FFN,x                             ;GET CHARACTER
D554 A78824           (     flx29fms.asm):00498 [4+1]           STA     FWB,x                             ;MOVE IT
D557 3001             (     flx29fms.asm):00499 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
D559 5A               (     flx29fms.asm):00500 [2]             DECB                                      ;DEC THE COUNTER
D55A 26F6             (     flx29fms.asm):00501 [3]             BNE     COPNA2
D55C 39               (     flx29fms.asm):00502 [5]             RTS
                      (     flx29fms.asm):00503         
                      (     flx29fms.asm):00504         ;* CMPNAM
                      (     flx29fms.asm):00505         ;*
                      (     flx29fms.asm):00506         ;* CMPNAM WILL COMPARE THE NAME (NL
                      (     flx29fms.asm):00507         ;* BYTES LONG) IN THE FCB AREA FWB
                      (     flx29fms.asm):00508         ;* (WORK BUFFER) TO THE CONTENTS OF
                      (     flx29fms.asm):00509         ;* FCB AREA FFN (FILE NAME).
                      (     flx29fms.asm):00510         ;*
                      (     flx29fms.asm):00511         ;*   ENTRY: NONE
                      (     flx29fms.asm):00512         ;*   EXIT:  NE IF NOT EQUAL
                      (     flx29fms.asm):00513         ;*          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00514         
D55D                  (     flx29fms.asm):00515         CMPNAM
D55D BED40B           (     flx29fms.asm):00516 [6]             LDX     FCBSTR                            ;PICKUP FCB
D560 C60B             (     flx29fms.asm):00517 [2]             LDB     #NL                               ;SET LENGTH
                      (     flx29fms.asm):00518                                                           ;
D562                  (     flx29fms.asm):00519         CMPNA1
D562 A604             (     flx29fms.asm):00520 [4+1]           LDA     FFN,x                             ;GET CHARACTER
D564 8A20             (     flx29fms.asm):00521 [2]             ORA     #$20                              ;MAKE LOWERCASE
D566 3402             (     flx29fms.asm):00522 [5+1]           PSHS    a                                 ;
D568 A68824           (     flx29fms.asm):00523 [4+1]           LDA     FWB,x                             ;GET 2ND CHARACTER
D56B 8A20             (     flx29fms.asm):00524 [2]             ORA     #$20                              ;MAKE LOWERCASE
D56D A1E0             (     flx29fms.asm):00525 [4+2]           CMPA    ,s+                               ;COMPARE THEM
D56F 2605             (     flx29fms.asm):00526 [3]             BNE     CMPNA4                            ;NOT EQUAL?
                      (     flx29fms.asm):00527                                                           ;
D571 3001             (     flx29fms.asm):00528 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
D573 5A               (     flx29fms.asm):00529 [2]             DECB                                      ;DEC THE COUNTER
D574 26EC             (     flx29fms.asm):00530 [3]             BNE     CMPNA1                            ;REPEAT
D576                  (     flx29fms.asm):00531         CMPNA4
D576 39               (     flx29fms.asm):00532 [5]             RTS
                      (     flx29fms.asm):00533         
                      (     flx29fms.asm):00534         ;* GETRAN   ;* FFC #17 ;*
                      (     flx29fms.asm):00535         ;*
                      (     flx29fms.asm):00536         ;* GETRAN GETS A RANDOM CHARACTER FROM
                      (     flx29fms.asm):00537         ;* THE CURRENT FSB.
                      (     flx29fms.asm):00538         ;*
                      (     flx29fms.asm):00539         ;*   ENTRY: FRI CONTAINS DESIRED INDEX
                      (     flx29fms.asm):00540         ;*   EXIT:  CS IF FRI OUT OF RANGE
                      (     flx29fms.asm):00541         ;*          A CONTAINS CHARACTER
                      (     flx29fms.asm):00542         ;*          B & X CHANGED
                      (     flx29fms.asm):00543         
D577                  (     flx29fms.asm):00544         GETRAN
D577 BED40B           (     flx29fms.asm):00545 [6]             LDX     FCBSTR                            ;GET FCB
D57A E602             (     flx29fms.asm):00546 [4+1]           LDB     FAS,x                             ;GET STATUS
D57C 54               (     flx29fms.asm):00547 [2]             LSRB                                      ;CHECK IF R OR RW
D57D 2479             (     flx29fms.asm):00548 [3]             BCC     REWIN2                            ;GO SET ERROR
D57F E68823           (     flx29fms.asm):00549 [4+1]           LDB     FRI,x                             ;GET RANDOM INDEX
D582 7ED608           (     flx29fms.asm):00550 [4]             JMP     RDSEQ0
                      (     flx29fms.asm):00551         
                      (     flx29fms.asm):00552         ;* PUTNXT
                      (     flx29fms.asm):00553         ;*
                      (     flx29fms.asm):00554         ;* PUTNXT PUTS THE CHARACTER IN A INTO
                      (     flx29fms.asm):00555         ;* THE NEXT AVAILABLE FSB LOCATION
                      (     flx29fms.asm):00556         ;* POINTED TO BY THE FDI.
                      (     flx29fms.asm):00557         ;*
                      (     flx29fms.asm):00558         ;*   ENTRY: A CONTAINS CHARACTER
                      (     flx29fms.asm):00559         ;*   EXIT:  CS IF LAST FSB POS. USED
                      (     flx29fms.asm):00560         ;*          B & X CHANGED
                      (     flx29fms.asm):00561         
D585                  (     flx29fms.asm):00562         PUTNXT
D585 BED40B           (     flx29fms.asm):00563 [6]             LDX     FCBSTR                            ;PICKUP FCB
D588 E68822           (     flx29fms.asm):00564 [4+1]           LDB     FDI,x                             ;GET DATA INDEX
D58B 6C8822           (     flx29fms.asm):00565 [6+1]           INC     FDI,x                             ;BUMP FDI
D58E 3A               (     flx29fms.asm):00566 [3]             ABX                                       ;ADD IN INDEX
D58F A78840           (     flx29fms.asm):00567 [4+1]           STA     FSB,x                             ;PUT THE CHARACTER
D592 5C               (     flx29fms.asm):00568 [2]             INCB                                      ;BUMP IT
D593 261F             (     flx29fms.asm):00569 [3]             BNE     PUTRA2                            ;OVER END OF FSB?
D595 1A01             (     flx29fms.asm):00570 [3]             ORCC    #1                                ;SEC OVER END!
D597 39               (     flx29fms.asm):00571 [5]             RTS
                      (     flx29fms.asm):00572         
                      (     flx29fms.asm):00573         ;* PUTRAN   ;* FFC #18 ;*
                      (     flx29fms.asm):00574         ;*
                      (     flx29fms.asm):00575         ;* PUTRAN PUTS THE CHARACTER IN A
                      (     flx29fms.asm):00576         ;* IN THE FSB LOCATION INDEXED BY
                      (     flx29fms.asm):00577         ;* THE FRI.
                      (     flx29fms.asm):00578         ;*
                      (     flx29fms.asm):00579         ;*   ENTRY: A CONTAINS CHARACTER
                      (     flx29fms.asm):00580         ;*          FRI CONTAINS INDEX
                      (     flx29fms.asm):00581         ;*   EXIT:  CS IF FRI OUT OF RANGE
                      (     flx29fms.asm):00582         ;*          B & X CHANGED
                      (     flx29fms.asm):00583         
D598                  (     flx29fms.asm):00584         PUTRAN
D598 BED40B           (     flx29fms.asm):00585 [6]             LDX     FCBSTR                            ;GET FCB
D59B E602             (     flx29fms.asm):00586 [4+1]           LDB     FAS,x                             ;CHECK IF RW
D59D C403             (     flx29fms.asm):00587 [2]             ANDB    #3                                ;MASK OFF
D59F C103             (     flx29fms.asm):00588 [2]             CMPB    #3                                ;IS IT RW?
D5A1 2655             (     flx29fms.asm):00589 [3]             BNE     REWIN2                            ;SKIP IF ERROR
D5A3 CA80             (     flx29fms.asm):00590 [2]             ORB     #$80                              ;SET UPDATE BIT
D5A5 E702             (     flx29fms.asm):00591 [4+1]           STB     FAS,x                             ;SAVE IT
D5A7 E60F             (     flx29fms.asm):00592 [4+1]           LDB     FID,x                             ;CHECK WP
D5A9 C580             (     flx29fms.asm):00593 [2]             BITB    #$80                              ;
D5AB 260A             (     flx29fms.asm):00594 [3]             BNE     PUTRA4                            ;
D5AD E68823           (     flx29fms.asm):00595 [4+1]           LDB     FRI,x                             ;GET RANDOM INDEX
D5B0 3A               (     flx29fms.asm):00596 [3]             ABX                                       ;ADD IN INDEX
D5B1 A78840           (     flx29fms.asm):00597 [4+1]           STA     64,x                              ;FSB,x PUT CHARACTER
                      (     flx29fms.asm):00598                                                           ;
D5B4                  (     flx29fms.asm):00599         PUTRA2
D5B4 1CFE             (     flx29fms.asm):00600 [3]             ANDCC   #$FE                              ;CLC CLEAR ERROR
D5B6 39               (     flx29fms.asm):00601 [5]             RTS                                       ;
                      (     flx29fms.asm):00602                                                           ;
D5B7                  (     flx29fms.asm):00603         PUTRA4
D5B7 C60B             (     flx29fms.asm):00604 [2]             LDB     #WPER                             ;SET WP ERROR
D5B9 1A01             (     flx29fms.asm):00605 [3]             ORCC    #1                                ;SEC SET ERROR
D5BB 39               (     flx29fms.asm):00606 [5]             RTS
                      (     flx29fms.asm):00607         
                      (     flx29fms.asm):00608         ;* SRDSEQ
                      (     flx29fms.asm):00609         ;*
                      (     flx29fms.asm):00610         ;* SRDSEQ IS THE HIGH LEVEL READ
                      (     flx29fms.asm):00611         ;* SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00612         ;* CONTROL CHARACTERS AND SPACE
                      (     flx29fms.asm):00613         ;* EXPANSION ARE HANDLED HERE UNLESS
                      (     flx29fms.asm):00614         ;* FSC IS NEGATIVE.
                      (     flx29fms.asm):00615         ;*
                      (     flx29fms.asm):00616         ;*   ENTRY: NONE
                      (     flx29fms.asm):00617         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00618         ;*          B HAS ERROR NUMBER
                      (     flx29fms.asm):00619         ;*          A & X CHANGED
                      (     flx29fms.asm):00620         
D5BC                  (     flx29fms.asm):00621         SRDSEQ
D5BC A6883B           (     flx29fms.asm):00622 [4+1]           LDA     FSC,x                             ;CHECK FOR SP. EXP.
D5BF 2B3C             (     flx29fms.asm):00623 [3]             BMI     RDSEQ                             ;CONTROL IGNORE?
D5C1 2707             (     flx29fms.asm):00624 [3]             BEQ     SRDSE2                            ;ACTIVE EXPANSION?
D5C3 6A883B           (     flx29fms.asm):00625 [6+1]           DEC     FSC,x                             ;DEC THE SPACE COUNT
D5C6 8620             (     flx29fms.asm):00626 [2]             LDA     #SPC                              ;SETUP SPACE
D5C8 201D             (     flx29fms.asm):00627 [3]             BRA     SRDSE7                            ;FINISH UP
                      (     flx29fms.asm):00628                                                           ;
D5CA                  (     flx29fms.asm):00629         SRDSE2
D5CA 8D31             (     flx29fms.asm):00630 [7]             BSR     RDSEQ                             ;READ NEXT CHAR
D5CC 251B             (     flx29fms.asm):00631 [3]             BCS     SRDSE8                            ;ERRORS?
D5CE 8118             (     flx29fms.asm):00632 [2]             CMPA    #DELC                             ;IS IT DELETED?
D5D0 2215             (     flx29fms.asm):00633 [3]             BHI     SRDSE7                            ;SKIP ALL SPECIALS
D5D2 27F6             (     flx29fms.asm):00634 [3]             BEQ     SRDSE2                            ;
D5D4 8109             (     flx29fms.asm):00635 [2]             CMPA    #SCC                              ;SPACE COMP CHAR?
D5D6 260C             (     flx29fms.asm):00636 [3]             BNE     SRDSE6                            ;
D5D8 8D23             (     flx29fms.asm):00637 [7]             BSR     RDSEQ                             ;GO GET COUNT
D5DA 250D             (     flx29fms.asm):00638 [3]             BCS     SRDSE8                            ;ERROR?
D5DC BED40B           (     flx29fms.asm):00639 [6]             LDX     FCBSTR                            ;RESTORE POINTER
D5DF A7883B           (     flx29fms.asm):00640 [4+1]           STA     FSC,x                             ;SAVE COUNT
D5E2 20D8             (     flx29fms.asm):00641 [3]             BRA     SRDSEQ                            ;REPEAT
                      (     flx29fms.asm):00642                                                           ;
D5E4                  (     flx29fms.asm):00643         SRDSE6
D5E4 4D               (     flx29fms.asm):00644 [2]             TSTA                                      ;IS CHAR NULL?
D5E5 27E3             (     flx29fms.asm):00645 [3]             BEQ     SRDSE2                            ;IGNORE IF SO
                      (     flx29fms.asm):00646                                                           ;
D5E7                  (     flx29fms.asm):00647         SRDSE7
D5E7 1CFE             (     flx29fms.asm):00648 [3]             ANDCC   #$FE                              ;CLC CLEAR ERROR
D5E9                  (     flx29fms.asm):00649         SRDSE8
D5E9 39               (     flx29fms.asm):00650 [5]             RTS
                      (     flx29fms.asm):00651         
                      (     flx29fms.asm):00652         ;* REWIND   ;* FFC #5 ;*
                      (     flx29fms.asm):00653         ;*
                      (     flx29fms.asm):00654         ;* REWIND WILL LOGICALLY REWIND THE
                      (     flx29fms.asm):00655         ;* FILE SPECIFIED IN THE FCB.
                      (     flx29fms.asm):00656         ;*
                      (     flx29fms.asm):00657         ;*   ENTRY: NONE
                      (     flx29fms.asm):00658         ;*   EXIT:  SAME AS RDNEXT
                      (     flx29fms.asm):00659         
D5EA                  (     flx29fms.asm):00660         REWIND
D5EA BDDAC8           (     flx29fms.asm):00661 [8]             JSR     DOSTAT                            ;CHECK STATUS
D5ED 2509             (     flx29fms.asm):00662 [3]             BCS     REWIN2                            ;ERROR?
D5EF 8501             (     flx29fms.asm):00663 [2]             BITA    #1                                ;CHECK FOR R BIT
D5F1 2705             (     flx29fms.asm):00664 [3]             BEQ     REWIN2                            ;ERROR?
D5F3 A784             (     flx29fms.asm):00665 [4+0]           STA     FFC,x                             ;SET FFC
D5F5 7ED9A9           (     flx29fms.asm):00666 [4]             JMP     OPNRD1                            ;GO SETUP FILE
                      (     flx29fms.asm):00667                                                           ;
D5F8                  (     flx29fms.asm):00668         REWIN2
D5F8 C612             (     flx29fms.asm):00669 [2]             LDB     #STER                             ;SET ERROR CODE
D5FA 1A01             (     flx29fms.asm):00670 [3]             ORCC    #1                                ;SEC SHOW ERROR
D5FC 39               (     flx29fms.asm):00671 [5]             RTS
                      (     flx29fms.asm):00672         
                      (     flx29fms.asm):00673         ;* RDSEQ
                      (     flx29fms.asm):00674         ;*
                      (     flx29fms.asm):00675         ;* RDSEQ IS THE LOW LEVEL GET
                      (     flx29fms.asm):00676         ;* SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00677         ;*
                      (     flx29fms.asm):00678         ;*   ENTRY: NONE
                      (     flx29fms.asm):00679         ;*   EXIT:  CHAR IN A
                      (     flx29fms.asm):00680         ;*          CS IF ERROR
                      (     flx29fms.asm):00681         ;*          B & X DESTROYED
                      (     flx29fms.asm):00682         
D5FD                  (     flx29fms.asm):00683         RDSEQ
D5FD BED40B           (     flx29fms.asm):00684 [6]             LDX     FCBSTR                            ;PICKUP FCB
D600 E68822           (     flx29fms.asm):00685 [4+1]           LDB     FDI,x                             ;GET DATA INDEX
D603 270A             (     flx29fms.asm):00686 [3]             BEQ     RDSEQ1                            ;
D605 6C8822           (     flx29fms.asm):00687 [6+1]           INC     FDI,x                             ;BUMP DATA INDEX
                      (     flx29fms.asm):00688                                                           ;
D608                  (     flx29fms.asm):00689         RDSEQ0
D608 3A               (     flx29fms.asm):00690 [3]             ABX                                       ;ADD IN OFFSET
D609 A68840           (     flx29fms.asm):00691 [4+1]           LDA     FSB,x                             ;GET CHARACTER
D60C 1CFE             (     flx29fms.asm):00692 [3]             ANDCC   #$FE                              ;CLC
D60E 39               (     flx29fms.asm):00693 [5]             RTS                                       ;
                      (     flx29fms.asm):00694                                                           ;
D60F                  (     flx29fms.asm):00695         RDSEQ1
D60F 8D03             (     flx29fms.asm):00696 [7]             BSR     RDNEXT                            ;GET NEXT RECORD
D611 24EA             (     flx29fms.asm):00697 [3]             BCC     RDSEQ                             ;ERRORS?
D613 39               (     flx29fms.asm):00698 [5]             RTS
                      (     flx29fms.asm):00699         
                      (     flx29fms.asm):00700         ;* RDNEXT
                      (     flx29fms.asm):00701         ;*
                      (     flx29fms.asm):00702         ;* RDNEXT READS THE NEXT SEQUENTIAL
                      (     flx29fms.asm):00703         ;* RECORD IF IT EXISTS.
                      (     flx29fms.asm):00704         ;*
                      (     flx29fms.asm):00705         ;*   ENTRY: NONE
                      (     flx29fms.asm):00706         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00707         ;*          B HAS ERROR NUMBER
                      (     flx29fms.asm):00708         ;*          A & X CHANGED
                      (     flx29fms.asm):00709         
D614                  (     flx29fms.asm):00710         RDNEXT
D614 BED40B           (     flx29fms.asm):00711 [6]             LDX     FCBSTR                            ;PICKUP FCB
D617 EC8840           (     flx29fms.asm):00712 [5+1]           LDD     FSB,x                             ;GET TRACK & SECTOR
D61A 6C8821           (     flx29fms.asm):00713 [6+1]           INC     FRN+1,x                           ;BUMP REC NUM
D61D 2603             (     flx29fms.asm):00714 [3]             BNE     RDNEX1                            ;
D61F 6C8820           (     flx29fms.asm):00715 [6+1]           INC     FRN,x                             ;
                      (     flx29fms.asm):00716                                                           ;
D622                  (     flx29fms.asm):00717         RDNEX1
D622 10830000         (     flx29fms.asm):00718 [5]             CMPD    #$0000                            ;TEST IF 0 LINK
D626 271C             (     flx29fms.asm):00719 [3]             BEQ     RDNEX4                            ;END OF FILE?
D628                  (     flx29fms.asm):00720         RDNEX2
D628 ED881E           (     flx29fms.asm):00721 [5+1]           STD     FCS,x                             ;SET CURRENT ADR.
D62B 3402             (     flx29fms.asm):00722 [5+1]           PSHS    a                                 ;
D62D 8604             (     flx29fms.asm):00723 [2]             LDA     #RS                               ;SET RECORD START
D62F A78822           (     flx29fms.asm):00724 [4+1]           STA     FDI,x                             ;SAVE IT
D632 3502             (     flx29fms.asm):00725 [5+1]           PULS    a                                 ;
D634 8D13             (     flx29fms.asm):00726 [7]             BSR     READSS                            ;GO DO READ
D636 2410             (     flx29fms.asm):00727 [3]             BCC     RDNEX8                            ;ERRORS?
D638 C580             (     flx29fms.asm):00728 [2]             BITB    #$80                              ;CHECK NOT READY
D63A 2704             (     flx29fms.asm):00729 [3]             BEQ     RDNEX3                            ;
D63C C610             (     flx29fms.asm):00730 [2]             LDB     #NRER                             ;SET ERROR
D63E 2006             (     flx29fms.asm):00731 [3]             BRA     RDNEX6                            ;
                      (     flx29fms.asm):00732                                                           ;
D640                  (     flx29fms.asm):00733         RDNEX3
D640 C609             (     flx29fms.asm):00734 [2]             LDB     #RDER                             ;SET READ ERROR
D642 2002             (     flx29fms.asm):00735 [3]             BRA     RDNEX6                            ;
                      (     flx29fms.asm):00736                                                           ;
D644                  (     flx29fms.asm):00737         RDNEX4
D644 C608             (     flx29fms.asm):00738 [2]             LDB     #EFER                             ;SET EOF ERROR
D646                  (     flx29fms.asm):00739         RDNEX6
D646 1A01             (     flx29fms.asm):00740 [3]             ORCC    #1                                ;SEC SHOW ERROR
D648                  (     flx29fms.asm):00741         RDNEX8
D648 39               (     flx29fms.asm):00742 [5]             RTS
                      (     flx29fms.asm):00743         
                      (     flx29fms.asm):00744         ;* READSS   ;* FFC #9 ;*
                      (     flx29fms.asm):00745         ;*
                      (     flx29fms.asm):00746         ;* READSS READS A SINGLE RECORD (SECTOR)
                      (     flx29fms.asm):00747         ;* FROM THE DISK.
                      (     flx29fms.asm):00748         ;*
                      (     flx29fms.asm):00749         ;*   ENTRY: NONE
                      (     flx29fms.asm):00750         ;*   EXIT:  CS IF READ ERROR
                      (     flx29fms.asm):00751         ;*          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00752         
D649                  (     flx29fms.asm):00753         READSS
D649 8D25             (     flx29fms.asm):00754 [7]             BSR     CLRTRY                            ;CLEAR TRY COUNTERS
D64B BED40B           (     flx29fms.asm):00755 [6]             LDX     FCBSTR                            ;SET POINTER
D64E BDDE0C           (     flx29fms.asm):00756 [8]             JSR     DRIVE                             ;DO DRIVE SEL
D651 2512             (     flx29fms.asm):00757 [3]             BCS     READS6                            ;
                      (     flx29fms.asm):00758                                                           ;
D653                  (     flx29fms.asm):00759         READS2
D653 8D11             (     flx29fms.asm):00760 [7]             BSR     GETCUR                            ;GET DISK ADDRESS
D655 BDDE00           (     flx29fms.asm):00761 [8]             JSR     READ                              ;GO READ RECORD
D658 2603             (     flx29fms.asm):00762 [3]             BNE     READS4                            ;ERRORS?
D65A 1CFE             (     flx29fms.asm):00763 [3]             ANDCC   #$FE                              ;CLC CLEAR ERROR
D65C 39               (     flx29fms.asm):00764 [5]             RTS                                       ;
                      (     flx29fms.asm):00765                                                           ;
D65D                  (     flx29fms.asm):00766         READS4
D65D 3404             (     flx29fms.asm):00767 [5+1]           PSHS    b                                 ;SAVE B
D65F 8D17             (     flx29fms.asm):00768 [7]             BSR     RETRY                             ;CHECK IF RETRY
D661 3504             (     flx29fms.asm):00769 [5+1]           PULS    b                                 ;RESTORE B
D663 24EE             (     flx29fms.asm):00770 [3]             BCC     READS2                            ;TRY AGAIN?
                      (     flx29fms.asm):00771         
D665                  (     flx29fms.asm):00772         READS6
D665 39               (     flx29fms.asm):00773 [5]             RTS
                      (     flx29fms.asm):00774         
                      (     flx29fms.asm):00775         ;* GETCUR
                      (     flx29fms.asm):00776         ;*
                      (     flx29fms.asm):00777         ;* GETCUR GETS THE CURRENT RECORD ADDRESS
                      (     flx29fms.asm):00778         ;* (TRACK AND SECTOR) INTO A & B.
                      (     flx29fms.asm):00779         ;* IF ILLEGAL ADDRESS, CARRY IS SET.
                      (     flx29fms.asm):00780         ;*
                      (     flx29fms.asm):00781         ;*   ENTRY: NONE
                      (     flx29fms.asm):00782         ;*   EXIT:  CS IF ILLEGAL ADR.
                      (     flx29fms.asm):00783         ;*          A = TRACK NUMBER
                      (     flx29fms.asm):00784         ;*          B = SECTOR NUMBER
                      (     flx29fms.asm):00785         ;*          X POINTS TO FSB
                      (     flx29fms.asm):00786         
D666                  (     flx29fms.asm):00787         GETCUR
D666 BED40B           (     flx29fms.asm):00788 [6]             LDX     FCBSTR                            ;PICKUP FCB
D669 EC881E           (     flx29fms.asm):00789 [5+1]           LDD     FCS,x                             ;GET TRACK & SECTOR
D66C 308840           (     flx29fms.asm):00790 [4+1]           LEAX    FSB,x                             ;ADD FSB BIAS
D66F 39               (     flx29fms.asm):00791 [5]             RTS
                      (     flx29fms.asm):00792         
                      (     flx29fms.asm):00793         ;* CLRTRY
                      (     flx29fms.asm):00794         ;*
                      (     flx29fms.asm):00795         ;* CLRTRY CLEARS THE ERROR TRY COUNTERS
                      (     flx29fms.asm):00796         ;*
                      (     flx29fms.asm):00797         ;*   ENTRY: NONE
                      (     flx29fms.asm):00798         ;*   EXIT:  A CLEARED
                      (     flx29fms.asm):00799         
D670                  (     flx29fms.asm):00800         CLRTRY
D670 4F               (     flx29fms.asm):00801 [2]             CLRA                                      ;CLEAR A
D671 B7D411           (     flx29fms.asm):00802 [5]             STA     ETRIES                            ;CLEAR COUNTERS
D674 B7D412           (     flx29fms.asm):00803 [5]             STA     STRIES
D677 39               (     flx29fms.asm):00804 [5]             RTS
                      (     flx29fms.asm):00805         
                      (     flx29fms.asm):00806         ;* RETRY
                      (     flx29fms.asm):00807         ;*
                      (     flx29fms.asm):00808         ;* RETRY WILL TEST THE TRY COUNTERS
                      (     flx29fms.asm):00809         ;* ETRIES AND STRIES TO SEE IF THEY
                      (     flx29fms.asm):00810         ;* ARE AT MAXIMUM.
                      (     flx29fms.asm):00811         ;* A RESTORE OPERATION IS PERFORMED
                      (     flx29fms.asm):00812         ;* IF NECESSARY.
                      (     flx29fms.asm):00813         ;*
                      (     flx29fms.asm):00814         ;*   ENTRY: NONE
                      (     flx29fms.asm):00815         ;*   EXIT:  CS IF NO MORE TRIES LEFT
                      (     flx29fms.asm):00816         
D678                  (     flx29fms.asm):00817         RETRY
D678 C510             (     flx29fms.asm):00818 [2]             BITB    #$10                              ;CHECK IF SEEK ERROR
D67A 2611             (     flx29fms.asm):00819 [3]             BNE     RETRY2                            ;
D67C C580             (     flx29fms.asm):00820 [2]             BITB    #$80                              ;CHECK NOT READY
D67E 2624             (     flx29fms.asm):00821 [3]             BNE     RETRY6                            ;
D680 F6D411           (     flx29fms.asm):00822 [5]             LDB     ETRIES                            ;CHECK ERROR CNTR
D683 5C               (     flx29fms.asm):00823 [2]             INCB                                      ;BUMP IT ONE
D684 C105             (     flx29fms.asm):00824 [2]             CMPB    #RTC                              ;IS IT MAXIMUM?
D686 2705             (     flx29fms.asm):00825 [3]             BEQ     RETRY2                            ;
                      (     flx29fms.asm):00826                                                           ;
D688 F7D411           (     flx29fms.asm):00827 [5]             STB     ETRIES                            ;SAVE COUNT
D68B 2014             (     flx29fms.asm):00828 [3]             BRA     RETRY4                            ;
                      (     flx29fms.asm):00829                                                           ;
D68D                  (     flx29fms.asm):00830         RETRY2
D68D 7FD411           (     flx29fms.asm):00831 [7]             CLR     ETRIES                            ;CLEAR COUNTER
D690 F6D412           (     flx29fms.asm):00832 [5]             LDB     STRIES                            ;CHECK SEEK CNTR
D693 5C               (     flx29fms.asm):00833 [2]             INCB                                      ;BUMP IT
D694 C107             (     flx29fms.asm):00834 [2]             CMPB    #RSC                              ;IS IT MAXIMUM?
D696 270C             (     flx29fms.asm):00835 [3]             BEQ     RETRY6                            ;
D698 F7D412           (     flx29fms.asm):00836 [5]             STB     STRIES                            ;SAVE COUNTER
D69B BED40B           (     flx29fms.asm):00837 [6]             LDX     FCBSTR                            ;
D69E BDDE09           (     flx29fms.asm):00838 [8]             JSR     RESTORE                           ;GO RESTORE
                      (     flx29fms.asm):00839                                                           ;
D6A1                  (     flx29fms.asm):00840         RETRY4
D6A1 1CFE             (     flx29fms.asm):00841 [3]             ANDCC   #$FE                              ;CLC CLEAR ERROR
D6A3 39               (     flx29fms.asm):00842 [5]             RTS                                       ;
                      (     flx29fms.asm):00843                                                           ;
D6A4                  (     flx29fms.asm):00844         RETRY6
D6A4 1A01             (     flx29fms.asm):00845 [3]             ORCC    #1                                ;SEC SET ERROR
D6A6 39               (     flx29fms.asm):00846 [5]             RTS
                      (     flx29fms.asm):00847         
                      (     flx29fms.asm):00848         ;* WRITSS   ;* FFC #10 ;*
                      (     flx29fms.asm):00849         ;*
                      (     flx29fms.asm):00850         ;* WRITSS IS THE SYSTEM WRITE SINGLE
                      (     flx29fms.asm):00851         ;* SECTOR ROUTINE.
                      (     flx29fms.asm):00852         ;*
                      (     flx29fms.asm):00853         ;*   ENTRY: NONE
                      (     flx29fms.asm):00854         ;*   EXIT:  CS IF WRITE ERROR
                      (     flx29fms.asm):00855         ;*          ALL REGISTERS CHANGED
                      (     flx29fms.asm):00856         
D6A7                  (     flx29fms.asm):00857         WRITSS
D6A7 8DC7             (     flx29fms.asm):00858 [7]             BSR     CLRTRY                            ;CLEAR TRY COUNTERS
D6A9 BED40B           (     flx29fms.asm):00859 [6]             LDX     FCBSTR                            ;SET POINTER
D6AC BDDE0C           (     flx29fms.asm):00860 [8]             JSR     DRIVE                             ;DO DRIVE SEL
D6AF 2520             (     flx29fms.asm):00861 [3]             BCS     WRITS6                            ;
                      (     flx29fms.asm):00862                                                           ;
D6B1                  (     flx29fms.asm):00863         WRITS2
D6B1 BED40B           (     flx29fms.asm):00864 [6]             LDX     FCBSTR                            ;SET POINTER
D6B4 8DB0             (     flx29fms.asm):00865 [7]             BSR     GETCUR                            ;GET CURRENT SEC
D6B6 BDDE03           (     flx29fms.asm):00866 [8]             JSR     WRITE                             ;DO ACTUAL WRITE
D6B9 260A             (     flx29fms.asm):00867 [3]             BNE     WRITS4                            ;ERRORS?
                      (     flx29fms.asm):00868                                                           ;
D6BB B6D435           (     flx29fms.asm):00869 [5]             LDA     VRFYFG                            ;VERIFY SECTOR?
D6BE 2737             (     flx29fms.asm):00870 [3]             BEQ     SWTSE6                            ;NO VERIFY
                      (     flx29fms.asm):00871                                                           ;
D6C0 BDDE06           (     flx29fms.asm):00872 [8]             JSR     VERIFY                            ;GO DO VERIFY
D6C3 2732             (     flx29fms.asm):00873 [3]             BEQ     SWTSE6                            ;ERROR?
                      (     flx29fms.asm):00874                                                           ;
D6C5                  (     flx29fms.asm):00875         WRITS4
D6C5 C540             (     flx29fms.asm):00876 [2]             BITB    #$40                              ;CHECK IF W.P.
D6C7 260B             (     flx29fms.asm):00877 [3]             BNE     WRITS8                            ;
                      (     flx29fms.asm):00878                                                           ;
D6C9 3404             (     flx29fms.asm):00879 [5+1]           PSHS    b                                 ;SAVE STATUS
D6CB 8DAB             (     flx29fms.asm):00880 [7]             BSR     RETRY                             ;RETRY?
D6CD 3504             (     flx29fms.asm):00881 [5+1]           PULS    b                                 ;RESTORE STATUS
D6CF 24E0             (     flx29fms.asm):00882 [3]             BCC     WRITS2                            ;TRY AGAIN
D6D1                  (     flx29fms.asm):00883         WRITS6
D6D1 39               (     flx29fms.asm):00884 [5]             RTS                                       ;ERROR RETURN
                      (     flx29fms.asm):00885                                                           ;
D6D2                  (     flx29fms.asm):00886         WRITS7
D6D2 C620             (     flx29fms.asm):00887 [2]             LDB     #$20                              ;SET ERROR
D6D4                  (     flx29fms.asm):00888         WRITS8
D6D4 1A01             (     flx29fms.asm):00889 [3]             ORCC    #1                                ;SHOW ERROR
D6D6 39               (     flx29fms.asm):00890 [5]             RTS                                       ;ERROR RETURN
                      (     flx29fms.asm):00891         
                      (     flx29fms.asm):00892         ;* SWTSEQ
                      (     flx29fms.asm):00893         ;*
                      (     flx29fms.asm):00894         ;* SWTSEQ IS THE HIGH LEVEL WRITE
                      (     flx29fms.asm):00895         ;* SEQUENTIAL CHARACTER ROUTINE.
                      (     flx29fms.asm):00896         ;* SPACE COMPRESSION IS HANDLED HERE
                      (     flx29fms.asm):00897         ;* UNLESS FSC IS NEGATIVE.
                      (     flx29fms.asm):00898         ;*
                      (     flx29fms.asm):00899         ;*   ENTRY: NONE
                      (     flx29fms.asm):00900         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00901         ;*          B HAS ERROR NUMBER
                      (     flx29fms.asm):00902         ;*          A & X CHANGED
                      (     flx29fms.asm):00903         
D6D7                  (     flx29fms.asm):00904         SWTSEQ
D6D7 BED40B           (     flx29fms.asm):00905 [6]             LDX     FCBSTR                            ;PICKUP FCB
D6DA E6883B           (     flx29fms.asm):00906 [4+1]           LDB     FSC,x                             ;GET SPC COUNT
D6DD 2B3D             (     flx29fms.asm):00907 [3]             BMI     WTSEQ                             ;WRITE IF NEG.
D6DF 8120             (     flx29fms.asm):00908 [2]             CMPA    #SPC                              ;IS CHARACTER SPACE?
D6E1 260F             (     flx29fms.asm):00909 [3]             BNE     SWTSE4                            ;
D6E3 5C               (     flx29fms.asm):00910 [2]             INCB                                      ;BUMP THE COUNT
D6E4 E7883B           (     flx29fms.asm):00911 [4+1]           STB     FSC,x                             ;SAVE IT
D6E7 C17F             (     flx29fms.asm):00912 [2]             CMPB    #MAXSP                            ;MAXIMUM?
D6E9 260C             (     flx29fms.asm):00913 [3]             BNE     SWTSE6                            ;
D6EB 200D             (     flx29fms.asm):00914 [3]             BRA     PUTSPC                            ;** FIX FOR 128 SPACES **
                      (     flx29fms.asm):00915                                                           ;
D6ED                  (     flx29fms.asm):00916         SWTSE2
D6ED 8D0B             (     flx29fms.asm):00917 [7]             BSR     PUTSPC                            ;GO PUT SPACES
D6EF 24E6             (     flx29fms.asm):00918 [3]             BCC     SWTSEQ                            ;ERRORS?
D6F1 39               (     flx29fms.asm):00919 [5]             RTS                                       ;
                      (     flx29fms.asm):00920                                                           ;
D6F2                  (     flx29fms.asm):00921         SWTSE4
D6F2 5D               (     flx29fms.asm):00922 [2]             TSTB                                      ;COUNT ZERO?
D6F3 2727             (     flx29fms.asm):00923 [3]             BEQ     WTSEQ                             ;
D6F5 20F6             (     flx29fms.asm):00924 [3]             BRA     SWTSE2                            ;DO SPACES
                      (     flx29fms.asm):00925                                                           ;
D6F7                  (     flx29fms.asm):00926         SWTSE6
D6F7 1CFE             (     flx29fms.asm):00927 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D6F9 39               (     flx29fms.asm):00928 [5]             RTS
                      (     flx29fms.asm):00929         
                      (     flx29fms.asm):00930         ;* PUTSPC
                      (     flx29fms.asm):00931         ;*
                      (     flx29fms.asm):00932         ;* PUTSPC IS THE ROUTINE WHICH WRITES
                      (     flx29fms.asm):00933         ;* THE SPACE COMPRESSION CODE AND THE
                      (     flx29fms.asm):00934         ;* SPACE COUNT.
                      (     flx29fms.asm):00935         ;*
                      (     flx29fms.asm):00936         ;*   ENTRY: B HAS COUNT
                      (     flx29fms.asm):00937         ;*   EXIT:  A PRESERVED
                      (     flx29fms.asm):00938         
D6FA                  (     flx29fms.asm):00939         PUTSPC
D6FA 3402             (     flx29fms.asm):00940 [5+1]           PSHS    a                                 ;SAVE CHAR
D6FC C101             (     flx29fms.asm):00941 [2]             CMPB    #1                                ;IS COUNT 1?
D6FE 2604             (     flx29fms.asm):00942 [3]             BNE     PUTSP2                            ;
D700 8620             (     flx29fms.asm):00943 [2]             LDA     #$20                              ;SETUP SPACE
D702 2010             (     flx29fms.asm):00944 [3]             BRA     PUTSP4                            ;GO WRITE
                      (     flx29fms.asm):00945                                                           ;
D704                  (     flx29fms.asm):00946         PUTSP2
D704 8609             (     flx29fms.asm):00947 [2]             LDA     #SCC                              ;SETUP SCC
D706 8D14             (     flx29fms.asm):00948 [7]             BSR     WTSEQ                             ;WRITE IT OUT
D708 3502             (     flx29fms.asm):00949 [5+1]           PULS    a                                 ;
D70A 250F             (     flx29fms.asm):00950 [3]             BCS     PUTSP6                            ;ERROR?
D70C 3402             (     flx29fms.asm):00951 [5+1]           PSHS    a                                 ;SAVE CHAR
D70E BED40B           (     flx29fms.asm):00952 [6]             LDX     FCBSTR                            ;PICKUP FCB
D711 A6883B           (     flx29fms.asm):00953 [4+1]           LDA     FSC,x                             ;GET COUNT
D714                  (     flx29fms.asm):00954         PUTSP4
D714 6F883B           (     flx29fms.asm):00955 [6+1]           CLR     FSC,x                             ;CLEAR COUNT
D717 8D03             (     flx29fms.asm):00956 [7]             BSR     WTSEQ                             ;WRITE COUNT
D719 3502             (     flx29fms.asm):00957 [5+1]           PULS    a                                 ;RESTORE CHAR
D71B                  (     flx29fms.asm):00958         PUTSP6
D71B 39               (     flx29fms.asm):00959 [5]             RTS
                      (     flx29fms.asm):00960         
                      (     flx29fms.asm):00961         ;* WTSEQ
                      (     flx29fms.asm):00962         ;*
                      (     flx29fms.asm):00963         ;* WTSEQ WRITES THE NEXT CHARACTER TO
                      (     flx29fms.asm):00964         ;* THE FSB AREA OF THE FCB.
                      (     flx29fms.asm):00965         ;*
                      (     flx29fms.asm):00966         ;*   ENTRY: A HAS CHARACTER
                      (     flx29fms.asm):00967         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):00968         ;*          B HAS ERROR NUMBER
                      (     flx29fms.asm):00969         ;*          X CHANGED
                      (     flx29fms.asm):00970         
D71C                  (     flx29fms.asm):00971         WTSEQ
D71C BED40B           (     flx29fms.asm):00972 [6]             LDX     FCBSTR                            ;GET FCB POINTER
D71F E602             (     flx29fms.asm):00973 [4+1]           LDB     FAS,x                             ;GET ACTIVE STATUS
D721 C102             (     flx29fms.asm):00974 [2]             CMPB    #2                                ;IS IT WRITE?
D723 1026FED1         (     flx29fms.asm):00975 [5+?]           LBNE    REWIN2                            ;ERROR IF NOT
D727 E68822           (     flx29fms.asm):00976 [4+1]           LDB     FDI,x                             ;GET INDEX
D72A C104             (     flx29fms.asm):00977 [2]             CMPB    #RS                               ;IS IT BEGINNING?
D72C 2608             (     flx29fms.asm):00978 [3]             BNE     WTSEQ2                            ;
D72E 3402             (     flx29fms.asm):00979 [5+1]           PSHS    a                                 ;SAVE CHAR.
D730 8D21             (     flx29fms.asm):00980 [7]             BSR     WTNEXT                            ;GO WRITE RECORD
D732 3502             (     flx29fms.asm):00981 [5+1]           PULS    a                                 ;RESTORE CHAR.
D734 250F             (     flx29fms.asm):00982 [3]             BCS     WTSEQ4                            ;ERRORS?
                      (     flx29fms.asm):00983                                                           ;
D736                  (     flx29fms.asm):00984         WTSEQ2
D736 BDD585           (     flx29fms.asm):00985 [8]             JSR     PUTNXT                            ;PUT CHARACTER
D739 240A             (     flx29fms.asm):00986 [3]             BCC     WTSEQ4                            ;LAST SPACE USED?
D73B C604             (     flx29fms.asm):00987 [2]             LDB     #RS                               ;SET RECORD START
D73D BED40B           (     flx29fms.asm):00988 [6]             LDX     FCBSTR                            ;POINT TO FCB
D740 E78822           (     flx29fms.asm):00989 [4+1]           STB     FDI,x                             ;SET INDEX
D743 1CFE             (     flx29fms.asm):00990 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D745                  (     flx29fms.asm):00991         WTSEQ4
D745 39               (     flx29fms.asm):00992 [5]             RTS
                      (     flx29fms.asm):00993         
                      (     flx29fms.asm):00994         ;* CLRLRN
                      (     flx29fms.asm):00995         
D746                  (     flx29fms.asm):00996         CLRLRN
D746 BED40B           (     flx29fms.asm):00997 [6]             LDX     FCBSTR                            ;GET POINTER
D749 4F               (     flx29fms.asm):00998 [2]             CLRA                                      ;
D74A 5F               (     flx29fms.asm):00999 [2]             CLRB                                      ;
D74B ED8820           (     flx29fms.asm):01000 [5+1]           STD     FRN,x                             ;CLEAR LRN
D74E ED8842           (     flx29fms.asm):01001 [5+1]           STD     FSB+2,x                           ;CLEAR ACTUAL RN
D751 2027             (     flx29fms.asm):01002 [3]             BRA     WTNEX1                            ;GO WRITE NEXT
                      (     flx29fms.asm):01003         
                      (     flx29fms.asm):01004         ;* WTNEXT
                      (     flx29fms.asm):01005         ;*
                      (     flx29fms.asm):01006         ;* WTNEXT WRITES THE NEXT RECORD.
                      (     flx29fms.asm):01007         ;*
                      (     flx29fms.asm):01008         ;*   ENTRY: X = FCB
                      (     flx29fms.asm):01009         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01010         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01011         
D753                  (     flx29fms.asm):01012         WTNEXT
D753 E68812           (     flx29fms.asm):01013 [4+1]           LDB     FSA+1,x                           ;FIRST RECORD?
D756 2622             (     flx29fms.asm):01014 [3]             BNE     WTNEX1                            ;
D758 E68817           (     flx29fms.asm):01015 [4+1]           LDB     FMP,x                             ;CHECK FOR RANDOM
D75B 2744             (     flx29fms.asm):01016 [3]             BEQ     ASNNXT                            ;
D75D 6F8817           (     flx29fms.asm):01017 [6+1]           CLR     FMP,x                             ;CLEAR FLAG
D760 8D3F             (     flx29fms.asm):01018 [7]             BSR     ASNNXT                            ;GO ASSIGN
D762 252A             (     flx29fms.asm):01019 [3]             BCS     GETFS2                            ;ERROR?
D764 8DE0             (     flx29fms.asm):01020 [7]             BSR     CLRLRN                            ;CLEAR LRN
D766 2526             (     flx29fms.asm):01021 [3]             BCS     GETFS2                            ;ERROR?
D768 8DDC             (     flx29fms.asm):01022 [7]             BSR     CLRLRN                            ;CLEAR NEXT
D76A 2522             (     flx29fms.asm):01023 [3]             BCS     GETFS2                            ;ERROR?
D76C BED40B           (     flx29fms.asm):01024 [6]             LDX     FCBSTR                            ;GET FCB
D76F C602             (     flx29fms.asm):01025 [2]             LDB     #2                                ;SET FSM COUNT
D771 E78817           (     flx29fms.asm):01026 [4+1]           STB     FMP,x                             ;
D774 EC8811           (     flx29fms.asm):01027 [5+1]           LDD     FSA,x                             ;GET START ADDR
D777 7EDC99           (     flx29fms.asm):01028 [4]             JMP     UPDF75                            ;GO DO UPDATE
                      (     flx29fms.asm):01029                                                           ;
D77A                  (     flx29fms.asm):01030         WTNEX1
D77A 8D0E             (     flx29fms.asm):01031 [7]             BSR     GETFST                            ;GET FIRST AVAIL
D77C BED40B           (     flx29fms.asm):01032 [6]             LDX     FCBSTR                            ;SET FCB PNTR
D77F ED8840           (     flx29fms.asm):01033 [5+1]           STD     FSB,x                             ;SET FORWARD LINK
D782 BDD6A7           (     flx29fms.asm):01034 [8]             JSR     WRITSS                            ;WRITE RECORD
D785 241A             (     flx29fms.asm):01035 [3]             BCC     ASNNXT                            ;ERROR?
D787 7EDBD8           (     flx29fms.asm):01036 [4]             JMP     WRTERR                            ;REPORT ERROR
                      (     flx29fms.asm):01037         
                      (     flx29fms.asm):01038         ;* GETFST
                      (     flx29fms.asm):01039         ;*
                      (     flx29fms.asm):01040         ;* GETFST LOADS THE FIRST AVAILABLE
                      (     flx29fms.asm):01041         ;* SECTOR ADDRESS INTO A & B.
                      (     flx29fms.asm):01042         ;*
                      (     flx29fms.asm):01043         ;*   ENTRY: NONE
                      (     flx29fms.asm):01044         ;*   EXIT:  EQ IF FSTAVL = 00
                      (     flx29fms.asm):01045         ;*          X UNCHANGED
                      (     flx29fms.asm):01046         ;*          A & B = FSTAVL H & L
                      (     flx29fms.asm):01047         
D78A                  (     flx29fms.asm):01048         GETFST
D78A 8D03             (     flx29fms.asm):01049 [7]             BSR     FSECMP                            ;FIND SECTOR MAP
D78C EC84             (     flx29fms.asm):01050 [5+0]           LDD     ,x                                ;GET FIRST AVAIL.
D78E                  (     flx29fms.asm):01051         GETFS2
D78E 39               (     flx29fms.asm):01052 [5]             RTS
                      (     flx29fms.asm):01053         
                      (     flx29fms.asm):01054         ;* FSECMP
                      (     flx29fms.asm):01055         ;*
                      (     flx29fms.asm):01056         ;* FSECMP FINDS THE SECTOR MAP
                      (     flx29fms.asm):01057         ;* CORRESPONDING TO THE CURRENT
                      (     flx29fms.asm):01058         ;* DRIVE SELECTED IN THE FCB.
                      (     flx29fms.asm):01059         ;*
                      (     flx29fms.asm):01060         ;*   ENTRY: NONE
                      (     flx29fms.asm):01061         ;*   EXIT:  EQ IF AVAIL NOT SET
                      (     flx29fms.asm):01062         ;*          X POINTS TO SECTOR MAP
                      (     flx29fms.asm):01063         
D78F                  (     flx29fms.asm):01064         FSECMP
D78F BED40B           (     flx29fms.asm):01065 [6]             LDX     FCBSTR                            ;PICKUP FCB
D792 E603             (     flx29fms.asm):01066 [4+1]           LDB     FDN,x                             ;GET DRIVE NUMBER
D794 8606             (     flx29fms.asm):01067 [2]             LDA     #6                                ;MULTIPLY TIMES 6
D796 3D               (     flx29fms.asm):01068 [11]            MUL                                       ;
D797 8ED41D           (     flx29fms.asm):01069 [3]             LDX     #SECMAP                           ;POINT TO MAPS
D79A 3A               (     flx29fms.asm):01070 [3]             ABX                                       ;FIX POINTER
D79B BFD41B           (     flx29fms.asm):01071 [6]             STX     AVLPNT                            ;SET POINTER
D79E 6D84             (     flx29fms.asm):01072 [6+0]           TST     ,x                                ;IS AVAIL EMPTY?
D7A0 39               (     flx29fms.asm):01073 [5]             RTS
                      (     flx29fms.asm):01074         
                      (     flx29fms.asm):01075         ;* ASNNXT
                      (     flx29fms.asm):01076         ;*
                      (     flx29fms.asm):01077         ;* ASNNXT ASSIGNS THE NEXT AVAILABLE
                      (     flx29fms.asm):01078         ;* RECORD TO THE CURRENT OPEN WRITE
                      (     flx29fms.asm):01079         ;* FILE POINTED TO BY THE FCB.
                      (     flx29fms.asm):01080         ;*
                      (     flx29fms.asm):01081         ;*   ENTRY: NONE
                      (     flx29fms.asm):01082         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01083         ;*          ALL REGISTERS CHANGED
                      (     flx29fms.asm):01084         
D7A1                  (     flx29fms.asm):01085         ASNNXT
D7A1 8DE7             (     flx29fms.asm):01086 [7]             BSR     GETFST                            ;GET FSTAVL
D7A3 2605             (     flx29fms.asm):01087 [3]             BNE     ASNNX2                            ;IS IT ZERO?
D7A5 C607             (     flx29fms.asm):01088 [2]             LDB     #DFER                             ;DISK FULL!
D7A7                  (     flx29fms.asm):01089         ASNNX1
D7A7 1A01             (     flx29fms.asm):01090 [3]             ORCC    #1                                ;SEC SET ERROR
D7A9 39               (     flx29fms.asm):01091 [5]             RTS                                       ;
                      (     flx29fms.asm):01092                                                           ;
D7AA                  (     flx29fms.asm):01093         ASNNX2
D7AA BED40B           (     flx29fms.asm):01094 [6]             LDX     FCBSTR                            ;GET FCB POINTER
D7AD ED8813           (     flx29fms.asm):01095 [5+1]           STD     FEA,x                             ;SET END ADDRESS
D7B0 6D8812           (     flx29fms.asm):01096 [6+1]           TST     FSA+1,x                           ;IS THIS FIRST?
D7B3 2603             (     flx29fms.asm):01097 [3]             BNE     ASNNX4                            ;JUMP AHEAD IF NOT
D7B5 ED8811           (     flx29fms.asm):01098 [5+1]           STD     FSA,x                             ;SET START ADDRESS
                      (     flx29fms.asm):01099                                                           ;
D7B8                  (     flx29fms.asm):01100         ASNNX4
D7B8 6C8816           (     flx29fms.asm):01101 [6+1]           INC     FSZ+1,x                           ;BUMP FILE SIZE
D7BB 2603             (     flx29fms.asm):01102 [3]             BNE     ASNNX6                            ;
D7BD 6C8815           (     flx29fms.asm):01103 [6+1]           INC     FSZ,x                             ;FIX MSB
                      (     flx29fms.asm):01104                                                           ;
D7C0                  (     flx29fms.asm):01105         ASNNX6
D7C0 6D8817           (     flx29fms.asm):01106 [6+1]           TST     FMP,x                             ;CHECK FOR RANDOM
D7C3 270B             (     flx29fms.asm):01107 [3]             BEQ     ASNN65                            ;
D7C5 BDDC5A           (     flx29fms.asm):01108 [8]             JSR     UPDFSM                            ;UPDATE FSM ENTRY
D7C8 25DD             (     flx29fms.asm):01109 [3]             BCS     ASNNX1                            ;ERROR?
D7CA BED40B           (     flx29fms.asm):01110 [6]             LDX     FCBSTR                            ;GET FCB
D7CD EC8813           (     flx29fms.asm):01111 [5+1]           LDD     FEA,x                             ;GET END ADDRESS
                      (     flx29fms.asm):01112                                                           ;
D7D0                  (     flx29fms.asm):01113         ASNN65
D7D0 BDD628           (     flx29fms.asm):01114 [8]             JSR     RDNEX2                            ;READ NEXT RECORD
D7D3 25D2             (     flx29fms.asm):01115 [3]             BCS     ASNNX1                            ;READ ERROR?
D7D5 BED40B           (     flx29fms.asm):01116 [6]             LDX     FCBSTR                            ;POINT TO FCB
D7D8 EC8840           (     flx29fms.asm):01117 [5+1]           LDD     FSB,x                             ;GET FOR. LINK
D7DB 3406             (     flx29fms.asm):01118 [5+2]           PSHS    a,b                               ;SAVE LINK
D7DD 8DB0             (     flx29fms.asm):01119 [7]             BSR     FSECMP                            ;FIND SECTOR MAP
D7DF 3506             (     flx29fms.asm):01120 [5+2]           PULS    a,b                               ;RESTORE LINK
D7E1 ED84             (     flx29fms.asm):01121 [5+0]           STD     ,x                                ;SET FIRST AVAIL
D7E3 260A             (     flx29fms.asm):01122 [3]             BNE     ASNNX7                            ;FULL DISK??
                      (     flx29fms.asm):01123                                                           ;
D7E5 6F02             (     flx29fms.asm):01124 [6+1]           CLR     2,x                               ;CLEAR OUT REST
D7E7 6F03             (     flx29fms.asm):01125 [6+1]           CLR     3,x                               ;
D7E9 6F04             (     flx29fms.asm):01126 [6+1]           CLR     4,x                               ;
D7EB 6F05             (     flx29fms.asm):01127 [6+1]           CLR     5,x                               ;
D7ED 2008             (     flx29fms.asm):01128 [3]             BRA     ASNNX8                            ;GO AHEAD
                      (     flx29fms.asm):01129                                                           ;
D7EF                  (     flx29fms.asm):01130         ASNNX7
D7EF 10AE04           (     flx29fms.asm):01131 [6+1]           LDY     4,x                               ;GET SEC COUNT
D7F2 313F             (     flx29fms.asm):01132 [4+1]           LEAY    -1,y                              ;DEC BY 1
D7F4 10AF04           (     flx29fms.asm):01133 [6+1]           STY     4,x                               ;SAVE RESULT
                      (     flx29fms.asm):01134                                                           ;
D7F7                  (     flx29fms.asm):01135         ASNNX8
D7F7 4F               (     flx29fms.asm):01136 [2]             CLRA                                      ;CLEAR REGISTER
D7F8 BED40B           (     flx29fms.asm):01137 [6]             LDX     FCBSTR                            ;SET POINTER
D7FB 6C8821           (     flx29fms.asm):01138 [6+1]           INC     FRN+1,x                           ;INC LRN
D7FE 2603             (     flx29fms.asm):01139 [3]             BNE     ASNN85                            ;
D800 6C8820           (     flx29fms.asm):01140 [6+1]           INC     FRN,x                             ;
                      (     flx29fms.asm):01141                                                           ;
D803                  (     flx29fms.asm):01142         ASNN85
D803 5F               (     flx29fms.asm):01143 [2]             CLRB                                      ;GET SECTOR LENGTH \\\\
D804                  (     flx29fms.asm):01144         ASNNX9
D804 A78840           (     flx29fms.asm):01145 [4+1]           STA     FSB,x                             ;CLEAR LOCATION
D807 3001             (     flx29fms.asm):01146 [4+1]           LEAX    1,x                               ;BUMP POINTER
D809 5A               (     flx29fms.asm):01147 [2]             DECB                                      ;DEC THE COUNTER
D80A 26F8             (     flx29fms.asm):01148 [3]             BNE     ASNNX9                            ;REPEAT?
                      (     flx29fms.asm):01149                                                           ;
D80C BED40B           (     flx29fms.asm):01150 [6]             LDX     FCBSTR                            ;GET FCB PNTR
D80F EC8820           (     flx29fms.asm):01151 [5+1]           LDD     FRN,x                             ;GET LRN
D812 ED8842           (     flx29fms.asm):01152 [5+1]           STD     FSB+2,x                           ;SAVE IN DATA
D815 1CFE             (     flx29fms.asm):01153 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D817 39               (     flx29fms.asm):01154 [5]             RTS
                      (     flx29fms.asm):01155         
                      (     flx29fms.asm):01156         ;* OPN - SIR, DIR
                      (     flx29fms.asm):01157         ;*
                      (     flx29fms.asm):01158         ;* OPNIR OPENS EITHER THE SYSTEM IR
                      (     flx29fms.asm):01159         ;* OR THE DIRECTORY IR, DEPENDING ON
                      (     flx29fms.asm):01160         ;* THE ENTRY POINT.
                      (     flx29fms.asm):01161         ;*
                      (     flx29fms.asm):01162         ;*   ENTRY: NONE
                      (     flx29fms.asm):01163         ;*   EXIT:  B & X DESTROYED
                      (     flx29fms.asm):01164         
D818                  (     flx29fms.asm):01165         OPNSIR
D818 5F               (     flx29fms.asm):01166 [2]             CLRB                                      ;SET TRACK 0
D819 3404             (     flx29fms.asm):01167 [5+1]           PSHS    b
D81B C603             (     flx29fms.asm):01168 [2]             LDB     #ISEC                             ;GET SECTOR
D81D 200E             (     flx29fms.asm):01169 [3]             BRA     OPNIR
                      (     flx29fms.asm):01170         
                      (     flx29fms.asm):01171         ;* ------- No Path to this code
                      (     flx29fms.asm):01172         
D81F                  (     flx29fms.asm):01173         OPNCUD
D81F BED415           (     flx29fms.asm):01174 [6]             LDX     CUD                               ;GET CUD
D822 BFD413           (     flx29fms.asm):01175 [6]             STX     CLD                               ;SAVE AS LOOKUP
                      (     flx29fms.asm):01176                                                           ;
                      (     flx29fms.asm):01177         ;* -------                   ;
                      (     flx29fms.asm):01178         
D825                  (     flx29fms.asm):01179         OPNDIR: ;
D825                  (     flx29fms.asm):01180         OPNCLD
D825 F6D413           (     flx29fms.asm):01181 [5]             LDB     CLD                               ;GET TRACK
D828 3404             (     flx29fms.asm):01182 [5+1]           PSHS    b                                 ;SAVE IT
D82A F6D414           (     flx29fms.asm):01183 [5]             LDB     CLD+1                             ;GET SECTOR
                      (     flx29fms.asm):01184                                                           ;
                      (     flx29fms.asm):01185                                                           ;
D82D                  (     flx29fms.asm):01186         OPNIR
D82D BED40B           (     flx29fms.asm):01187 [6]             LDX     FCBSTR                            ;SET FCB POINTER
D830 E78841           (     flx29fms.asm):01188 [4+1]           STB     FSB+1,x                           ;SAVE SECTOR
D833 3504             (     flx29fms.asm):01189 [5+1]           PULS    b                                 ;GET TRACK
D835 E78840           (     flx29fms.asm):01190 [4+1]           STB     FSB,x                             ;SET SECTOR PNTR
D838 7FD418           (     flx29fms.asm):01191 [7]             CLR     BKLN                              ;CLEAR BACK LINK
D83B 5F               (     flx29fms.asm):01192 [2]             CLRB                                      ;GET SECTOR LENGTH \\\\
D83C E78822           (     flx29fms.asm):01193 [4+1]           STB     FDI,x                             ;SAVE IT
D83F 39               (     flx29fms.asm):01194 [5]             RTS
                      (     flx29fms.asm):01195         
                      (     flx29fms.asm):01196         ;* GETIR
                      (     flx29fms.asm):01197         ;*
                      (     flx29fms.asm):01198         ;* GETIR GETS THE NEXT INFORMATION
                      (     flx29fms.asm):01199         ;* RECORD (IR) FROM THE FSB.
                      (     flx29fms.asm):01200         ;*
                      (     flx29fms.asm):01201         ;*   ENTRY: X = FCB
                      (     flx29fms.asm):01202         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01203         
D840                  (     flx29fms.asm):01204         GETIR
D840 BED40B           (     flx29fms.asm):01205 [6]             LDX     FCBSTR                            ;SET FCB POINTER
D843 E68822           (     flx29fms.asm):01206 [4+1]           LDB     FDI,x                             ;GET DATA INDEX
D846 261E             (     flx29fms.asm):01207 [3]             BNE     GETIR2                            ;NEXT SECTOR?
                      (     flx29fms.asm):01208                                                           ;
D848 BDD614           (     flx29fms.asm):01209 [8]             JSR     RDNEXT                            ;GET NEXT SECTOR
D84B 2531             (     flx29fms.asm):01210 [3]             BCS     GETIR8                            ;ERROR?
                      (     flx29fms.asm):01211                                                           ;
D84D BED40B           (     flx29fms.asm):01212 [6]             LDX     FCBSTR                            ;GET FCB POINTER
D850 7DD418           (     flx29fms.asm):01213 [7]             TST     BKLN                              ;TEST BACK LINK
D853 2606             (     flx29fms.asm):01214 [3]             BNE     GETIR1                            ;IS IT SET?
                      (     flx29fms.asm):01215                                                           ;
D855 CC0005           (     flx29fms.asm):01216 [3]             LDD     #$0005                            ;< OLD Code
                      (     flx29fms.asm):01217         ;*       ldd     FSB+4,x        ;GET NEW BL  <- CORRECTED
D858 FDD418           (     flx29fms.asm):01218 [6]             STD     BKLN                              ;SAVE IT
                      (     flx29fms.asm):01219                                                           ;
D85B                  (     flx29fms.asm):01220         GETIR1
D85B 8610             (     flx29fms.asm):01221 [2]             LDA     #IRS                              ;SET START INDEX
D85D A78822           (     flx29fms.asm):01222 [4+1]           STA     FDI,x                             ;
D860 EC881E           (     flx29fms.asm):01223 [5+1]           LDD     FCS,x                             ;GET CURRENT SEC ADR
D863 ED882F           (     flx29fms.asm):01224 [5+1]           STD     FCD,x                             ;SET CURRENT IR
                      (     flx29fms.asm):01225                                                           ;
D866                  (     flx29fms.asm):01226         GETIR2
D866 A68822           (     flx29fms.asm):01227 [4+1]           LDA     FDI,x                             ;GET CURRENT INDEX
D869 A78831           (     flx29fms.asm):01228 [4+1]           STA     FCD+2,x                           ;SAVE IT
D86C C618             (     flx29fms.asm):01229 [2]             LDB     #IRL                              ;SET LENGTH
                      (     flx29fms.asm):01230                                                           ;
D86E                  (     flx29fms.asm):01231         GETIR4
D86E 3414             (     flx29fms.asm):01232 [5+3]           PSHS    b,x                               ;SAVE VALUES
D870 BDD5FD           (     flx29fms.asm):01233 [8]             JSR     RDSEQ                             ;READ NEXT CHAR
D873 3514             (     flx29fms.asm):01234 [5+3]           PULS    b,x                               ;RESTORE VALUES
D875 A704             (     flx29fms.asm):01235 [4+1]           STA     FFN,x                             ;PUT THE CHAR
D877 3001             (     flx29fms.asm):01236 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
D879 5A               (     flx29fms.asm):01237 [2]             DECB                                      ;DEC THE COUNT
D87A 26F2             (     flx29fms.asm):01238 [3]             BNE     GETIR4                            ;FINISHED?
                      (     flx29fms.asm):01239         ;*       clrb                ;CLEAR ERRORS
D87C 1CFE             (     flx29fms.asm):01240 [3]             ANDCC   #$FE                              ;CLC CLEAR ERROR
D87E                  (     flx29fms.asm):01241         GETIR8
D87E 39               (     flx29fms.asm):01242 [5]             RTS
                      (     flx29fms.asm):01243         
                      (     flx29fms.asm):01244         ;* PUTIR
                      (     flx29fms.asm):01245         ;*
                      (     flx29fms.asm):01246         ;* PUTIR PUTS THE IR INTO THE FSB.
                      (     flx29fms.asm):01247         ;*
                      (     flx29fms.asm):01248         ;*   ENTRY: NONE
                      (     flx29fms.asm):01249         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01250         
D87F                  (     flx29fms.asm):01251         PUTIR
D87F BED40B           (     flx29fms.asm):01252 [6]             LDX     FCBSTR                            ;SET FCB POINTER
D882 A68831           (     flx29fms.asm):01253 [4+1]           LDA     FCD+2,x                           ;GET INDEX
D885 A78822           (     flx29fms.asm):01254 [4+1]           STA     FDI,x                             ;SET IT
D888 C618             (     flx29fms.asm):01255 [2]             LDB     #IRL                              ;SET LENGTH COUNT
                      (     flx29fms.asm):01256                                                           ;
D88A                  (     flx29fms.asm):01257         PUTIR2
D88A 3414             (     flx29fms.asm):01258 [5+3]           PSHS    b,x                               ;SAVE POINTERS
D88C A604             (     flx29fms.asm):01259 [4+1]           LDA     FFN,x                             ;GET THE CHAR
D88E BDD71C           (     flx29fms.asm):01260 [8]             JSR     WTSEQ                             ;GO WRITE CHAR
D891 3514             (     flx29fms.asm):01261 [5+3]           PULS    b,x                               ;RESTORE POINTERS
D893 3001             (     flx29fms.asm):01262 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
D895 5A               (     flx29fms.asm):01263 [2]             DECB                                      ;DEC THE COUNT
D896 26F2             (     flx29fms.asm):01264 [3]             BNE     PUTIR2                            ;REPEAT?
                      (     flx29fms.asm):01265                                                           ;
D898 7ED6A7           (     flx29fms.asm):01266 [4]             JMP     WRITSS                            ;GO WRITE SECTOR
                      (     flx29fms.asm):01267         
                      (     flx29fms.asm):01268         ;* FNDNAM
                      (     flx29fms.asm):01269         ;*
                      (     flx29fms.asm):01270         ;* FNDNAM TRIES TO FIND THE NAME IN
                      (     flx29fms.asm):01271         ;* FFN IN THE DIRECTORY.
                      (     flx29fms.asm):01272         ;*
                      (     flx29fms.asm):01273         ;*   ENTRY: NAME IN FFN
                      (     flx29fms.asm):01274         ;*   EXIT:  EQ IF FOUND
                      (     flx29fms.asm):01275         ;*          CS IF ERROR ( IN B )
                      (     flx29fms.asm):01276         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01277         
D89B                  (     flx29fms.asm):01278         FNDNAM
D89B BED40B           (     flx29fms.asm):01279 [6]             LDX     FCBSTR                            ;GET FCB
D89E A603             (     flx29fms.asm):01280 [4+1]           LDA     FDN,x                             ;GET DRIVE NUM
D8A0 A78823           (     flx29fms.asm):01281 [4+1]           STA     FRI,x                             ;SAVE IT IN TEMP
D8A3 B6D417           (     flx29fms.asm):01282 [5]             LDA     DIRDN                             ;GET DIR DRIVE NUM
D8A6 7DD41A           (     flx29fms.asm):01283 [7]             TST     SINDIR                            ;SINGLE DIR ?
D8A9 2631             (     flx29fms.asm):01284 [3]             BNE     FNDNA1                            ;
                      (     flx29fms.asm):01285                                                           ;
D8AB A703             (     flx29fms.asm):01286 [4+1]           STA     FDN,x                             ;SET NEW DRIVE NUM
D8AD BED415           (     flx29fms.asm):01287 [6]             LDX     CUD                               ;GET DIR POINTER
D8B0 BFD413           (     flx29fms.asm):01288 [6]             STX     CLD                               ;SET CLD
                      (     flx29fms.asm):01289                                                           ;
D8B3                  (     flx29fms.asm):01290         FNDN04
D8B3 8C0005           (     flx29fms.asm):01291 [4]             CMPX    #MAIND                            ;IS IT MAIN?
D8B6 270C             (     flx29fms.asm):01292 [3]             BEQ     FNDN06                            ;
D8B8 8D22             (     flx29fms.asm):01293 [7]             BSR     FNDNA1                            ;SEARCH DIR
D8BA 2337             (     flx29fms.asm):01294 [3]             BLS     FNDNA3                            ;FIND OR ERROR?
D8BC BED418           (     flx29fms.asm):01295 [6]             LDX     BKLN                              ;GET BACK LINK
D8BF BFD413           (     flx29fms.asm):01296 [6]             STX     CLD                               ;SET CLD
D8C2 20EF             (     flx29fms.asm):01297 [3]             BRA     FNDN04                            ;REPEAT
                      (     flx29fms.asm):01298                                                           ;
D8C4                  (     flx29fms.asm):01299         FNDN06
D8C4 BED40B           (     flx29fms.asm):01300 [6]             LDX     FCBSTR                            ;SET POINTER
D8C7 A68823           (     flx29fms.asm):01301 [4+1]           LDA     FRI,x                             ;RESTORE DN
D8CA A703             (     flx29fms.asm):01302 [4+1]           STA     FDN,x                             ;
D8CC 2A0E             (     flx29fms.asm):01303 [3]             BPL     FNDNA1                            ;DRIVE SPECIFIC?
                      (     flx29fms.asm):01304                                                           ;
D8CE                  (     flx29fms.asm):01305         FNDN08
D8CE BDDDD5           (     flx29fms.asm):01306 [8]             JSR     NXTRDY                            ;GET NEXT RDY DRV
D8D1 2536             (     flx29fms.asm):01307 [3]             BCS     FNDNA9                            ;ERROR?
D8D3 8D07             (     flx29fms.asm):01308 [7]             BSR     FNDNA1                            ;DO SEARCH
D8D5 231C             (     flx29fms.asm):01309 [3]             BLS     FNDNA3                            ;FIND OR ERROR?
D8D7 BDDDC5           (     flx29fms.asm):01310 [8]             JSR     RSTNAM                            ;RESTORE NAME
D8DA 20F2             (     flx29fms.asm):01311 [3]             BRA     FNDN08                            ;
                      (     flx29fms.asm):01312                                                           ;
D8DC                  (     flx29fms.asm):01313         FNDNA1
D8DC BED40B           (     flx29fms.asm):01314 [6]             LDX     FCBSTR                            ;SET POINTER
D8DF 7FD41A           (     flx29fms.asm):01315 [7]             CLR     SINDIR                            ;CLEAR MODE
D8E2 BDD54D           (     flx29fms.asm):01316 [8]             JSR     COPNAM                            ;COPY NAME TO FWB
D8E5 BDD825           (     flx29fms.asm):01317 [8]             JSR     OPNDIR                            ;OPEN DIRECTORY
                      (     flx29fms.asm):01318                                                           ;
D8E8                  (     flx29fms.asm):01319         FNDNA2
D8E8 BDD840           (     flx29fms.asm):01320 [8]             JSR     GETIR                             ;GET RECORD
D8EB 2407             (     flx29fms.asm):01321 [3]             BCC     FNDNA4                            ;ERROR?
D8ED C108             (     flx29fms.asm):01322 [2]             CMPB    #EFER                             ;END OF FILE?
D8EF 2718             (     flx29fms.asm):01323 [3]             BEQ     FNDNA9                            ;
D8F1 1A01             (     flx29fms.asm):01324 [3]             ORCC    #1                                ;SEC SET ERROR
D8F3                  (     flx29fms.asm):01325         FNDNA3
D8F3 39               (     flx29fms.asm):01326 [5]             RTS                                       ;ERROR RETURN
                      (     flx29fms.asm):01327                                                           ;
D8F4                  (     flx29fms.asm):01328         FNDNA4
D8F4 BED40B           (     flx29fms.asm):01329 [6]             LDX     FCBSTR                            ;POINT TO FCB
D8F7 A604             (     flx29fms.asm):01330 [4+1]           LDA     FFN,x                             ;GET CHAR
D8F9 270C             (     flx29fms.asm):01331 [3]             BEQ     FNDNA8                            ;NO MORE?
D8FB 2A02             (     flx29fms.asm):01332 [3]             BPL     FNDNA6                            ;DELETED NAME?
D8FD 8D0F             (     flx29fms.asm):01333 [7]             BSR     SETFD                             ;SET DELETED
                      (     flx29fms.asm):01334                                                           ;
D8FF                  (     flx29fms.asm):01335         FNDNA6
D8FF BDD55D           (     flx29fms.asm):01336 [8]             JSR     CMPNAM                            ;COMPARE NAME
D902 26E4             (     flx29fms.asm):01337 [3]             BNE     FNDNA2                            ;EQUAL?
D904 1CFE             (     flx29fms.asm):01338 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D906 39               (     flx29fms.asm):01339 [5]             RTS                                       ;
                      (     flx29fms.asm):01340                                                           ;
D907                  (     flx29fms.asm):01341         FNDNA8
D907 8D05             (     flx29fms.asm):01342 [7]             BSR     SETFD                             ;
D909                  (     flx29fms.asm):01343         FNDNA9
D909 1CFB             (     flx29fms.asm):01344 [3]             ANDCC   #$FB                              ;SHOW NO FIND
D90B 1CFE             (     flx29fms.asm):01345 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D90D 39               (     flx29fms.asm):01346 [5]             RTS                                       ;
                      (     flx29fms.asm):01347                                                           ;
D90E                  (     flx29fms.asm):01348         SETFD
D90E A68833           (     flx29fms.asm):01349 [4+1]           LDA     FFD+1,x                           ;FIRST DELETED?
D911 260C             (     flx29fms.asm):01350 [3]             BNE     SETFD2                            ;
D913 EC882F           (     flx29fms.asm):01351 [5+1]           LDD     FCD,x                             ;GET CURRENT ADR
D916 ED8832           (     flx29fms.asm):01352 [5+1]           STD     FFD,x                             ;SET FIRST DELETED
D919 A68831           (     flx29fms.asm):01353 [4+1]           LDA     FCD+2,x                           ;GET INDEX
D91C A78834           (     flx29fms.asm):01354 [4+1]           STA     FFD+2,x                           ;SAVE IT
D91F                  (     flx29fms.asm):01355         SETFD2
D91F 39               (     flx29fms.asm):01356 [5]             RTS
                      (     flx29fms.asm):01357         
                      (     flx29fms.asm):01358         ;* GETAVL
                      (     flx29fms.asm):01359         ;*
                      (     flx29fms.asm):01360         ;* GETAVL SETS THE SECTOR MAP POINTERS
                      (     flx29fms.asm):01361         ;* IF THEY HAVE NOT BEEN SET.
                      (     flx29fms.asm):01362         ;*
                      (     flx29fms.asm):01363         ;*   ENTRY: NONE
                      (     flx29fms.asm):01364         ;*   EXIT:  CS SET IF ERROR
                      (     flx29fms.asm):01365         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01366         
D920                  (     flx29fms.asm):01367         GETAVL
D920 BDD78F           (     flx29fms.asm):01368 [8]             JSR     FSECMP                            ;FIND MAP
D923 2617             (     flx29fms.asm):01369 [3]             BNE     GETAV3                            ;SET YET?
D925 8D18             (     flx29fms.asm):01370 [7]             BSR     GETDIS                            ;READ IN DIS
D927 2515             (     flx29fms.asm):01371 [3]             BCS     GETAV4                            ;ERROR?
                      (     flx29fms.asm):01372                                                           ;
D929 C606             (     flx29fms.asm):01373 [2]             LDB     #6                                ;SET COUNTER
D92B 10BED40B         (     flx29fms.asm):01374 [7]             LDY     FCBSTR                            ;GET FCB
D92F BED41B           (     flx29fms.asm):01375 [6]             LDX     AVLPNT                            ;POINT TO MAP
                      (     flx29fms.asm):01376         
D932                  (     flx29fms.asm):01377         GETAV2
D932 A6A85D           (     flx29fms.asm):01378 [4+1]           LDA     FSB+FSA+IRS-4,y
D935 3121             (     flx29fms.asm):01379 [4+1]           LEAY    1,y
D937 A780             (     flx29fms.asm):01380 [4+2]           STA     ,x+
D939 5A               (     flx29fms.asm):01381 [2]             DECB                                      ;DEC THE COUNT
D93A 26F6             (     flx29fms.asm):01382 [3]             BNE     GETAV2                            ;FINISHED?
                      (     flx29fms.asm):01383         
D93C                  (     flx29fms.asm):01384         GETAV3
D93C 1CFE             (     flx29fms.asm):01385 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D93E                  (     flx29fms.asm):01386         GETAV4
D93E 39               (     flx29fms.asm):01387 [5]             RTS
                      (     flx29fms.asm):01388         
                      (     flx29fms.asm):01389         ;* GETDIS
                      (     flx29fms.asm):01390         ;*
                      (     flx29fms.asm):01391         ;* GETDIS READS IN THE DIS SECTOR.
                      (     flx29fms.asm):01392         ;*
                      (     flx29fms.asm):01393         ;*   ENTRY: NONE
                      (     flx29fms.asm):01394         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01395         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01396         
D93F                  (     flx29fms.asm):01397         GETDIS
D93F BDD818           (     flx29fms.asm):01398 [8]             JSR     OPNSIR                            ;OPEN THE DIS
D942 BDD614           (     flx29fms.asm):01399 [8]             JSR     RDNEXT                            ;READ NEXT BLOCK
D945 2508             (     flx29fms.asm):01400 [3]             BCS     GETDI2                            ;ERROR?
                      (     flx29fms.asm):01401                                                           ;
D947 BED40B           (     flx29fms.asm):01402 [6]             LDX     FCBSTR                            ;SET POINTER
D94A C610             (     flx29fms.asm):01403 [2]             LDB     #IRS                              ;SET START POINT
D94C E78822           (     flx29fms.asm):01404 [4+1]           STB     FDI,x                             ;SET INDEX
D94F                  (     flx29fms.asm):01405         GETDI2
D94F 39               (     flx29fms.asm):01406 [5]             RTS
                      (     flx29fms.asm):01407         
                      (     flx29fms.asm):01408         ;* PUTAVL
                      (     flx29fms.asm):01409         ;*
                      (     flx29fms.asm):01410         ;* PUTAVL UPDATES THE DIS SECTOR.
                      (     flx29fms.asm):01411         ;*
                      (     flx29fms.asm):01412         ;*   ENTRY: NONE
                      (     flx29fms.asm):01413         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01414         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01415         
D950                  (     flx29fms.asm):01416         PUTAVL
D950 BDD78F           (     flx29fms.asm):01417 [8]             JSR     FSECMP                            ;FIND SECTOR MAP
D953 8DEA             (     flx29fms.asm):01418 [7]             BSR     GETDIS                            ;GO GET DIS
D955 25F8             (     flx29fms.asm):01419 [3]             BCS     GETDI2                            ;ERROR?
D957 C606             (     flx29fms.asm):01420 [2]             LDB     #6                                ;SET UP COUNTER
D959 10BED40B         (     flx29fms.asm):01421 [7]             LDY     FCBSTR                            ;GET FCB POINTER
D95D BED41B           (     flx29fms.asm):01422 [6]             LDX     AVLPNT                            ;POINT TO MAP
                      (     flx29fms.asm):01423         
D960                  (     flx29fms.asm):01424         PUTAV2
D960 A680             (     flx29fms.asm):01425 [4+2]           LDA     ,x+
D962 A7A85D           (     flx29fms.asm):01426 [4+1]           STA     FSB+FSA+IRS-4,y
D965 3121             (     flx29fms.asm):01427 [4+1]           LEAY    1,y
D967 5A               (     flx29fms.asm):01428 [2]             DECB                                      ;DEC THE COUNT
D968 26F6             (     flx29fms.asm):01429 [3]             BNE     PUTAV2                            ;FINISHED?
                      (     flx29fms.asm):01430                                                           ;
D96A BDD6A7           (     flx29fms.asm):01431 [8]             JSR     WRITSS                            ;WRITE SECTOR
D96D 24E0             (     flx29fms.asm):01432 [3]             BCC     GETDI2                            ;ERROR?
D96F 7EDBD8           (     flx29fms.asm):01433 [4]             JMP     WRTERR                            ;REPORT ERROR
                      (     flx29fms.asm):01434         
                      (     flx29fms.asm):01435         ;* WRTDIR
                      (     flx29fms.asm):01436         ;*
                      (     flx29fms.asm):01437         ;* WRTDIR UPDATES THE DISK DIRECTORY.
                      (     flx29fms.asm):01438         ;*
                      (     flx29fms.asm):01439         ;*   ENTRY: NONE
                      (     flx29fms.asm):01440         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01441         
D972                  (     flx29fms.asm):01442         WRTDIR
D972 BED40B           (     flx29fms.asm):01443 [6]             LDX     FCBSTR                            ;POINT TO FCB
D975 8602             (     flx29fms.asm):01444 [2]             LDA     #2                                ;SET FOR WRITE
D977 A702             (     flx29fms.asm):01445 [4+1]           STA     FAS,x                             ;
D979 EC882F           (     flx29fms.asm):01446 [5+1]           LDD     FCD,x                             ;GET CURRENT DIR
D97C ED881E           (     flx29fms.asm):01447 [5+1]           STD     FCS,x                             ;SET CURRENT SECTOR
D97F BDD649           (     flx29fms.asm):01448 [8]             JSR     READSS                            ;READ IN DIR
D982 2508             (     flx29fms.asm):01449 [3]             BCS     WRTDI2                            ;ERROR?
D984 BDD87F           (     flx29fms.asm):01450 [8]             JSR     PUTIR                             ;GO WRITE DIR
D987 2405             (     flx29fms.asm):01451 [3]             BCC     WRTDI4                            ;
D989 7EDBD8           (     flx29fms.asm):01452 [4]             JMP     WRTERR                            ;CHECK FOR WP ERR
                      (     flx29fms.asm):01453                                                           ;
D98C                  (     flx29fms.asm):01454         WRTDI2
D98C C60A             (     flx29fms.asm):01455 [2]             LDB     #WTER                             ;SET ERROR
D98E                  (     flx29fms.asm):01456         WRTDI4
D98E 39               (     flx29fms.asm):01457 [5]             RTS                                       ;ERROR RETURN
                      (     flx29fms.asm):01458         
                      (     flx29fms.asm):01459         ;* OPNRD
                      (     flx29fms.asm):01460         ;*
                      (     flx29fms.asm):01461         ;* OPNRD IS THE HIGH LEVEL SYSTEM
                      (     flx29fms.asm):01462         ;* ROUTINE WHICH OPENS A FILE FOR
                      (     flx29fms.asm):01463         ;* A READ OPERATION.
                      (     flx29fms.asm):01464         ;*
                      (     flx29fms.asm):01465         ;*   ENTRY: NONE
                      (     flx29fms.asm):01466         ;*   EXIT:  CS IF ERROR (IN B)
                      (     flx29fms.asm):01467         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01468         
D98F                  (     flx29fms.asm):01469         OPNRD
D98F BDD4FE           (     flx29fms.asm):01470 [8]             JSR     SETFCB                            ;SET FCB POINTER
D992 253D             (     flx29fms.asm):01471 [3]             BCS     OPNRD2                            ;ERROR?
D994 BDD89B           (     flx29fms.asm):01472 [8]             JSR     FNDNAM                            ;LOOK UP NAME
D997 2538             (     flx29fms.asm):01473 [3]             BCS     OPNRD2                            ;ERRORS?
                      (     flx29fms.asm):01474                                                           ;
D999 263B             (     flx29fms.asm):01475 [3]             BNE     LD9D6                             ;WAS IT FOUND?
                      (     flx29fms.asm):01476                                                           ;
D99B BED40B           (     flx29fms.asm):01477 [6]             LDX     FCBSTR                            ;POINT TO FCB
D99E 7DD41A           (     flx29fms.asm):01478 [7]             TST     SINDIR                            ;SINGLE DIR?
D9A1 2706             (     flx29fms.asm):01479 [3]             BEQ     OPNRD1                            ;
D9A3 A60F             (     flx29fms.asm):01480 [4+1]           LDA     FID,x                             ;CHECK RP BIT
D9A5 8520             (     flx29fms.asm):01481 [2]             BITA    #$20                              ;IS IT SET?
D9A7 2629             (     flx29fms.asm):01482 [3]             BNE     OPNRD3                            ;REPORT ERROR
                      (     flx29fms.asm):01483                                                           ;
D9A9                  (     flx29fms.asm):01484         OPNRD1
D9A9 BDDCD8           (     flx29fms.asm):01485 [8]             JSR     SETMAX                            ;SET MAX SEC
D9AC 252A             (     flx29fms.asm):01486 [3]             BCS     OPNERR                            ;ERROR?
D9AE EC8811           (     flx29fms.asm):01487 [5+1]           LDD     FSA,x                             ;GET ADDRESS
D9B1 ED8840           (     flx29fms.asm):01488 [5+1]           STD     FSB,x                             ;SET FRWD LINK
D9B4 BDDA8D           (     flx29fms.asm):01489 [8]             JSR     SETST                             ;SET STATUS
D9B7 E68817           (     flx29fms.asm):01490 [4+1]           LDB     FMP,x                             ;CHECK RANDOM
D9BA 2713             (     flx29fms.asm):01491 [3]             BEQ     OPNR15                            ;
                      (     flx29fms.asm):01492                                                           ;
D9BC                  (     flx29fms.asm):01493         OPNR12
D9BC 3404             (     flx29fms.asm):01494 [5+1]           PSHS    b                                 ;SAVE COUNT
D9BE BDD614           (     flx29fms.asm):01495 [8]             JSR     RDNEXT                            ;GET NEXT SECTOR
D9C1 3504             (     flx29fms.asm):01496 [5+1]           PULS    b                                 ;RESTORE COUNT
D9C3 250C             (     flx29fms.asm):01497 [3]             BCS     OPNRD2                            ;ERROR?
                      (     flx29fms.asm):01498                                                           ;
D9C5 5A               (     flx29fms.asm):01499 [2]             DECB                                      ;DEC THE COUNT
D9C6 26F4             (     flx29fms.asm):01500 [3]             BNE     OPNR12                            ;
                      (     flx29fms.asm):01501                                                           ;
D9C8 BED40B           (     flx29fms.asm):01502 [6]             LDX     FCBSTR                            ;SET FCB PNTR
D9CB 5F               (     flx29fms.asm):01503 [2]             CLRB                                      ;GET SECTOR LENGTH \\\\
D9CC E78822           (     flx29fms.asm):01504 [4+1]           STB     FDI,x                             ;
                      (     flx29fms.asm):01505                                                           ;
D9CF                  (     flx29fms.asm):01506         OPNR15
D9CF 1CFE             (     flx29fms.asm):01507 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
D9D1                  (     flx29fms.asm):01508         OPNRD2
D9D1 39               (     flx29fms.asm):01509 [5]             RTS                                       ;
                      (     flx29fms.asm):01510                                                           ;
D9D2                  (     flx29fms.asm):01511         OPNRD3
D9D2 C611             (     flx29fms.asm):01512 [2]             LDB     #ADER                             ;READ ACC DENIED
D9D4 2002             (     flx29fms.asm):01513 [3]             BRA     OPNERR                            ;
                      (     flx29fms.asm):01514                                                           ;
D9D6                  (     flx29fms.asm):01515         LD9D6
D9D6 C604             (     flx29fms.asm):01516 [2]             LDB     #NFER                             ;FILE NOT FOUND
                      (     flx29fms.asm):01517         
                      (     flx29fms.asm):01518         ;* OPEN ERROR
                      (     flx29fms.asm):01519         
D9D8                  (     flx29fms.asm):01520         OPNERR
D9D8 3404             (     flx29fms.asm):01521 [5+1]           PSHS    b                                 ;SAVE ERROR
D9DA BDD510           (     flx29fms.asm):01522 [8]             JSR     REMFCB                            ;REMOVE FCB
D9DD 3504             (     flx29fms.asm):01523 [5+1]           PULS    b                                 ;
D9DF 1A01             (     flx29fms.asm):01524 [3]             ORCC    #1                                ;SEC  SET ERROR
D9E1 39               (     flx29fms.asm):01525 [5]             RTS
                      (     flx29fms.asm):01526         
                      (     flx29fms.asm):01527         ;* OPNWT
                      (     flx29fms.asm):01528         ;*
                      (     flx29fms.asm):01529         ;* OPNWT OPENS A FILE FOR WRITE.
                      (     flx29fms.asm):01530         ;*
                      (     flx29fms.asm):01531         ;*   ENTRY: NONE
                      (     flx29fms.asm):01532         ;*   EXIT:  CS IF ERROR (IN B)
                      (     flx29fms.asm):01533         ;*          REGISTERS CHANGED
                      (     flx29fms.asm):01534         
D9E2                  (     flx29fms.asm):01535         OPNWT
D9E2 BED40B           (     flx29fms.asm):01536 [6]             LDX     FCBSTR                            ;SET POINTER
D9E5 6D03             (     flx29fms.asm):01537 [6+1]           TST     FDN,x                             ;CHECK FOR ALL DRIVES
D9E7 2A08             (     flx29fms.asm):01538 [3]             BPL     OPNWT3                            ;
D9E9 BDDDD5           (     flx29fms.asm):01539 [8]             JSR     NXTRDY                            ;FIND READY
D9EC 2403             (     flx29fms.asm):01540 [3]             BCC     OPNWT3                            ;FOUND ONE
D9EE C610             (     flx29fms.asm):01541 [2]             LDB     #NRER                             ;NONE READY
D9F0 39               (     flx29fms.asm):01542 [5]             RTS                                       ;
                      (     flx29fms.asm):01543                                                           ;
D9F1                  (     flx29fms.asm):01544         OPNWT3
D9F1 BDD4FE           (     flx29fms.asm):01545 [8]             JSR     SETFCB                            ;SET FCB LINK
D9F4 25E2             (     flx29fms.asm):01546 [3]             BCS     OPNERR                            ;ERROR?
D9F6 BDD53B           (     flx29fms.asm):01547 [8]             JSR     CLRFCB                            ;CLEAR OUT FCB
D9F9 BDD920           (     flx29fms.asm):01548 [8]             JSR     GETAVL                            ;SETUP SECTOR MAP
D9FC 25DA             (     flx29fms.asm):01549 [3]             BCS     OPNERR                            ;ERROR?
D9FE BDD89B           (     flx29fms.asm):01550 [8]             JSR     FNDNAM                            ;GO LOOK FOR NAME
DA01 25D5             (     flx29fms.asm):01551 [3]             BCS     OPNERR                            ;ERROR?
DA03 2604             (     flx29fms.asm):01552 [3]             BNE     OPNWT4                            ;FIND?
DA05 C603             (     flx29fms.asm):01553 [2]             LDB     #FEER                             ;FOUND - ERROR
DA07 20CF             (     flx29fms.asm):01554 [3]             BRA     OPNERR                            ;
                      (     flx29fms.asm):01555                                                           ;
DA09                  (     flx29fms.asm):01556         OPNWT4
DA09 BDDCD8           (     flx29fms.asm):01557 [8]             JSR     SETMAX                            ;SET MAX SEC
DA0C 25CA             (     flx29fms.asm):01558 [3]             BCS     OPNERR                            ;ERROR?
DA0E BED40B           (     flx29fms.asm):01559 [6]             LDX     FCBSTR                            ;POINT TO FCB
DA11 C60A             (     flx29fms.asm):01560 [2]             LDB     #10                               ;SET COUNT
DA13                  (     flx29fms.asm):01561         OPNWT5
DA13 6F0F             (     flx29fms.asm):01562 [6+1]           CLR     FID,x                             ;CLEAR BLOCK
DA15 3001             (     flx29fms.asm):01563 [4+1]           LEAX    1,x                               ;
DA17 5A               (     flx29fms.asm):01564 [2]             DECB                                      ;DEC THE COUNT
DA18 26F9             (     flx29fms.asm):01565 [3]             BNE     OPNWT5                            ;
                      (     flx29fms.asm):01566                                                           ;
DA1A BED40B           (     flx29fms.asm):01567 [6]             LDX     FCBSTR                            ;
DA1D EC8832           (     flx29fms.asm):01568 [5+1]           LDD     FFD,x                             ;GET FIRST DELETED
DA20 2734             (     flx29fms.asm):01569 [3]             BEQ     OPNWT8                            ;EOF ER?
DA22 ED882F           (     flx29fms.asm):01570 [5+1]           STD     FCD,x                             ;SET CURRENT DIR
DA25 A68834           (     flx29fms.asm):01571 [4+1]           LDA     FFD+2,x                           ;GET INDEX
DA28 A78831           (     flx29fms.asm):01572 [4+1]           STA     FCD+2,x                           ;SAVE IT
DA2B FCCC0E           (     flx29fms.asm):01573 [6]             LDD     DATE                              ;GET DATE
DA2E ED8819           (     flx29fms.asm):01574 [5+1]           STD     FDT,x                             ;SET DATE
DA31 B6CC10           (     flx29fms.asm):01575 [5]             LDA     DATE+2
DA34 A7881B           (     flx29fms.asm):01576 [4+1]           STA     FDT+2,x
                      (     flx29fms.asm):01577         
                      (     flx29fms.asm):01578         ;*       -- not in UniFLEX version
                      (     flx29fms.asm):01579         
DA37 A603             (     flx29fms.asm):01580 [4+1]           LDA     FDN,x                             ;GET DRIVE
DA39 8ED436           (     flx29fms.asm):01581 [3]             LDX     #DRVINFO                          ;GET TABLE POINTER
DA3C A686             (     flx29fms.asm):01582 [4+1]           LDA     a,x                               ;GET DRIVE INFO
DA3E BED40B           (     flx29fms.asm):01583 [6]             LDX     FCBSTR                            ;POINT TO FCB
DA41 A78818           (     flx29fms.asm):01584 [4+1]           STA     24,x                              ;
                      (     flx29fms.asm):01585                                                           ;
                      (     flx29fms.asm):01586         ;*       --                  ;
                      (     flx29fms.asm):01587         ;
DA44 BDDDC5           (     flx29fms.asm):01588 [8]             JSR     RSTNAM                            ;RESTORE NAME
DA47 BDD972           (     flx29fms.asm):01589 [8]             JSR     WRTDIR                            ;SET DIRECTORY
DA4A 258C             (     flx29fms.asm):01590 [3]             BCS     OPNERR                            ;ERROR?
DA4C 8D3F             (     flx29fms.asm):01591 [7]             BSR     SETST                             ;SET STATUS
DA4E 8604             (     flx29fms.asm):01592 [2]             LDA     #RS                               ;SET DATA POINTER
DA50 A78822           (     flx29fms.asm):01593 [4+1]           STA     FDI,x                             ;
DA53 1CFE             (     flx29fms.asm):01594 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
DA55 39               (     flx29fms.asm):01595 [5]             RTS                                       ;
                      (     flx29fms.asm):01596                                                           ;
DA56                  (     flx29fms.asm):01597         OPNWT8
DA56 BED40B           (     flx29fms.asm):01598 [6]             LDX     FCBSTR                            ;POINT TO FCB
DA59 6F8817           (     flx29fms.asm):01599 [6+1]           CLR     FMP,x                             ;CLEAR FLAG
DA5C 6C8812           (     flx29fms.asm):01600 [6+1]           INC     FSA+1,x                           ;SET FSA NON 0
DA5F EC882F           (     flx29fms.asm):01601 [5+1]           LDD     FCD,x                             ;GET POSITION
DA62 BDD628           (     flx29fms.asm):01602 [8]             JSR     RDNEX2                            ;READ SECTOR
DA65 250D             (     flx29fms.asm):01603 [3]             BCS     OPNW85                            ;ERROR?
                      (     flx29fms.asm):01604                                                           ;
DA67 BDD77A           (     flx29fms.asm):01605 [8]             JSR     WTNEX1                            ;GO WRITE NEW
DA6A 2508             (     flx29fms.asm):01606 [3]             BCS     OPNW85                            ;ERROR?
                      (     flx29fms.asm):01607                                                           ;
DA6C BDD6A7           (     flx29fms.asm):01608 [8]             JSR     WRITSS                            ;WRITE NEW SECTOR
DA6F 2406             (     flx29fms.asm):01609 [3]             BCC     OPNWT9                            ;ERROR?
DA71 BDDBD8           (     flx29fms.asm):01610 [8]             JSR     WRTERR                            ;REPORT ERROR
                      (     flx29fms.asm):01611                                                           ;
DA74                  (     flx29fms.asm):01612         OPNW85
DA74 7ED9D8           (     flx29fms.asm):01613 [4]             JMP     OPNERR                            ;
                      (     flx29fms.asm):01614                                                           ;
DA77                  (     flx29fms.asm):01615         OPNWT9
DA77 BED40B           (     flx29fms.asm):01616 [6]             LDX     FCBSTR                            ;SET POINTER
DA7A EC881E           (     flx29fms.asm):01617 [5+1]           LDD     FCS,x                             ;GET CURRENT
DA7D ED8832           (     flx29fms.asm):01618 [5+1]           STD     FFD,x                             ;SET FIRST DELETED
DA80 8610             (     flx29fms.asm):01619 [2]             LDA     #IRS                              ;SET INDEX
DA82 A78834           (     flx29fms.asm):01620 [4+1]           STA     FFD+2,x                           ;
DA85 BDD950           (     flx29fms.asm):01621 [8]             JSR     PUTAVL                            ;UPDATE AVLS
DA88 25EA             (     flx29fms.asm):01622 [3]             BCS     OPNW85                            ;
DA8A 7EDA09           (     flx29fms.asm):01623 [4]             JMP     OPNWT4                            ;FINISH UP
                      (     flx29fms.asm):01624         
                      (     flx29fms.asm):01625         ;* SETST
                      (     flx29fms.asm):01626         ;*
                      (     flx29fms.asm):01627         ;* SETST SETS THE FCB STATUS AFTER
                      (     flx29fms.asm):01628         ;* AN OPEN FILE COMMAND.
                      (     flx29fms.asm):01629         ;*
                      (     flx29fms.asm):01630         ;*   ENTRY: NONE
                      (     flx29fms.asm):01631         ;*   EXIT:  A & X CHANGED
                      (     flx29fms.asm):01632         
DA8D                  (     flx29fms.asm):01633         SETST
DA8D BED40B           (     flx29fms.asm):01634 [6]             LDX     FCBSTR                            ;POINT TO FCB
DA90 A684             (     flx29fms.asm):01635 [4+0]           LDA     FFC,x                             ;GET FUNCTION CODE
DA92 A702             (     flx29fms.asm):01636 [4+1]           STA     FAS,x                             ;SET ACTIVITY STATUS
DA94 6F84             (     flx29fms.asm):01637 [6+0]           CLR     FFC,x                             ;CLEAR FUNCTION CODE
DA96 6F883B           (     flx29fms.asm):01638 [6+1]           CLR     FSC,x                             ;CLEAR SPC COMP
DA99 4F               (     flx29fms.asm):01639 [2]             CLRA                                      ;GET SECTOR LENGTH \\\\
DA9A A78822           (     flx29fms.asm):01640 [4+1]           STA     FDI,x                             ;SET INDEX
DA9D 39               (     flx29fms.asm):01641 [5]             RTS
                      (     flx29fms.asm):01642         
                      (     flx29fms.asm):01643         ;* NEXTS
                      (     flx29fms.asm):01644         ;*
                      (     flx29fms.asm):01645         ;* NEXTS IS THE SYSTEM ROUTINE TO
                      (     flx29fms.asm):01646         ;* ADVANCE TO THE NEXT SECTOR.
                      (     flx29fms.asm):01647         ;*
                      (     flx29fms.asm):01648         ;*   ENTRY: NONE
                      (     flx29fms.asm):01649         ;*   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01650         
DA9E                  (     flx29fms.asm):01651         NEXTS
DA9E 8D28             (     flx29fms.asm):01652 [7]             BSR     DOSTAT                            ;CHECK STATUS
DAA0 250E             (     flx29fms.asm):01653 [3]             BCS     NEXTS4                            ;ERROR?
DAA2 6F84             (     flx29fms.asm):01654 [6+0]           CLR     ,x                                ;
DAA4 44               (     flx29fms.asm):01655 [2]             LSRA                                      ;READING?
DAA5 1025FB6B         (     flx29fms.asm):01656 [5+?]           LBCS    RDNEXT                            ;READ NEXT
                      (     flx29fms.asm):01657                                                           ;
DAA9 C604             (     flx29fms.asm):01658 [2]             LDB     #RS                               ;SET START
DAAB E78822           (     flx29fms.asm):01659 [4+1]           STB     FDI,x                             ;SET INDEX
DAAE 1CFE             (     flx29fms.asm):01660 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
DAB0                  (     flx29fms.asm):01661         NEXTS4
DAB0 39               (     flx29fms.asm):01662 [5]             RTS
                      (     flx29fms.asm):01663         
                      (     flx29fms.asm):01664         ;* CHKWT
                      (     flx29fms.asm):01665         ;*
                      (     flx29fms.asm):01666         ;* CHECK FOR WRITE SECTOR NECESSITY
                      (     flx29fms.asm):01667         ;*
                      (     flx29fms.asm):01668         ;*   ENTRY: NONE
                      (     flx29fms.asm):01669         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01670         
DAB1                  (     flx29fms.asm):01671         CHKWT
DAB1 BED40B           (     flx29fms.asm):01672 [6]             LDX     FCBSTR                            ;GET FCB POINTER
DAB4 A602             (     flx29fms.asm):01673 [4+1]           LDA     FAS,x                             ;GET STATUS
DAB6 8183             (     flx29fms.asm):01674 [2]             CMPA    #$83                              ;NEED WRITING?
DAB8 260B             (     flx29fms.asm):01675 [3]             BNE     CHKWT4                            ;
                      (     flx29fms.asm):01676                                                           ;
DABA 8603             (     flx29fms.asm):01677 [2]             LDA     #3                                ;RESET STATUS
DABC A702             (     flx29fms.asm):01678 [4+1]           STA     FAS,x                             ;
                      (     flx29fms.asm):01679                                                           ;
DABE                  (     flx29fms.asm):01680         CHKWT2
DABE BDD6A7           (     flx29fms.asm):01681 [8]             JSR     WRITSS                            ;WRITE SECTOR
DAC1 10250113         (     flx29fms.asm):01682 [5+?]           LBCS    WRTERR                            ;REPORT ERROR
                      (     flx29fms.asm):01683                                                           ;
DAC5                  (     flx29fms.asm):01684         CHKWT4
DAC5 1CFE             (     flx29fms.asm):01685 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
DAC7 39               (     flx29fms.asm):01686 [5]             RTS
                      (     flx29fms.asm):01687         
                      (     flx29fms.asm):01688         ;* DOSTAT
                      (     flx29fms.asm):01689         ;*
                      (     flx29fms.asm):01690         ;* DOSTAT DOES FILE STATUS CHECKING
                      (     flx29fms.asm):01691         ;*
                      (     flx29fms.asm):01692         ;*   ENTRY: NONE
                      (     flx29fms.asm):01693         ;*   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01694         ;*          CS IF ERROR
                      (     flx29fms.asm):01695         
DAC8                  (     flx29fms.asm):01696         DOSTAT
DAC8 8DE7             (     flx29fms.asm):01697 [7]             BSR     CHKWT                             ;CHECK FOR WRITE
DACA 250D             (     flx29fms.asm):01698 [3]             BCS     DOSTA4                            ;ERRORS?
                      (     flx29fms.asm):01699                                                           ;
DACC BED40B           (     flx29fms.asm):01700 [6]             LDX     FCBSTR                            ;SET POINTER
DACF A602             (     flx29fms.asm):01701 [4+1]           LDA     FAS,x                             ;GET STATUS
DAD1 8103             (     flx29fms.asm):01702 [2]             CMPA    #3                                ;IS IT RW?
DAD3 23F0             (     flx29fms.asm):01703 [3]             BLS     CHKWT4                            ;ERROR?
                      (     flx29fms.asm):01704                                                           ;
DAD5 C612             (     flx29fms.asm):01705 [2]             LDB     #STER                             ;SET ERROR
DAD7 1A01             (     flx29fms.asm):01706 [3]             ORCC    #1                                ;SEC
DAD9                  (     flx29fms.asm):01707         DOSTA4
DAD9 39               (     flx29fms.asm):01708 [5]             RTS                                       ;ERROR RETURN
                      (     flx29fms.asm):01709         
                      (     flx29fms.asm):01710         ;* CLOSE
                      (     flx29fms.asm):01711         ;*
                      (     flx29fms.asm):01712         ;* CLOSE A DISK FILE
                      (     flx29fms.asm):01713         ;*
                      (     flx29fms.asm):01714         ;*   ENTRY: NONE
                      (     flx29fms.asm):01715         ;*   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01716         
DADA                  (     flx29fms.asm):01717         CLOSE
DADA 8DEC             (     flx29fms.asm):01718 [7]             BSR     DOSTAT                            ;CHECK STATUS
DADC 2531             (     flx29fms.asm):01719 [3]             BCS     CLOSE4                            ;ERROR?
DADE 8102             (     flx29fms.asm):01720 [2]             CMPA    #2                                ;IS IT WRITE?
DAE0 2708             (     flx29fms.asm):01721 [3]             BEQ     CLOSE2                            ;
                      (     flx29fms.asm):01722                                                           ;
DAE2                  (     flx29fms.asm):01723         CLOSE1
DAE2 BED40B           (     flx29fms.asm):01724 [6]             LDX     FCBSTR                            ;GET FCB
DAE5 6F02             (     flx29fms.asm):01725 [6+1]           CLR     FAS,x                             ;CLEAR STATUS
DAE7 7ED510           (     flx29fms.asm):01726 [4]             JMP     REMFCB                            ;REMOVE FCB
                      (     flx29fms.asm):01727                                                           ;
DAEA                  (     flx29fms.asm):01728         CLOSE2
DAEA A68812           (     flx29fms.asm):01729 [4+1]           LDA     FSA+1,x                           ;CHECK IF EMPTY
DAED 2605             (     flx29fms.asm):01730 [3]             BNE     CLOSE3                            ;EMPTY?
DAEF BDDBBE           (     flx29fms.asm):01731 [8]             JSR     DELNAM                            ;DELETE NAME
DAF2 2019             (     flx29fms.asm):01732 [3]             BRA     CLOS35                            ;
                      (     flx29fms.asm):01733                                                           ;
DAF4                  (     flx29fms.asm):01734         CLOSE3
DAF4 8DC8             (     flx29fms.asm):01735 [7]             BSR     CHKWT2                            ;WRITE SECTOR
DAF6 2517             (     flx29fms.asm):01736 [3]             BCS     CLOSE4                            ;ERROR?
DAF8 BED40B           (     flx29fms.asm):01737 [6]             LDX     FCBSTR                            ;GET POINTER
DAFB 6D8817           (     flx29fms.asm):01738 [6+1]           TST     FMP,x                             ;RANDOM?
DAFE 2705             (     flx29fms.asm):01739 [3]             BEQ     CLOS32                            ;
                      (     flx29fms.asm):01740                                                           ;
DB00 BDDCAF           (     flx29fms.asm):01741 [8]             JSR     WTFSM                             ;WRITE FSM
DB03 250A             (     flx29fms.asm):01742 [3]             BCS     CLOSE4                            ;ERROR?
                      (     flx29fms.asm):01743                                                           ;
DB05                  (     flx29fms.asm):01744         CLOS32
DB05 BDD972           (     flx29fms.asm):01745 [8]             JSR     WRTDIR                            ;WRITE DIRECTORY
DB08 2505             (     flx29fms.asm):01746 [3]             BCS     CLOSE4                            ;ERROR?
                      (     flx29fms.asm):01747                                                           ;
DB0A BDD950           (     flx29fms.asm):01748 [8]             JSR     PUTAVL                            ;SET AVL MAP
                      (     flx29fms.asm):01749                                                           ;
DB0D                  (     flx29fms.asm):01750         CLOS35
DB0D 24D3             (     flx29fms.asm):01751 [3]             BCC     CLOSE1                            ;ERRORS?
DB0F                  (     flx29fms.asm):01752         CLOSE4
DB0F 39               (     flx29fms.asm):01753 [5]             RTS                                       ;ERROR RETURN
                      (     flx29fms.asm):01754         
                      (     flx29fms.asm):01755         ;* OPNRW
                      (     flx29fms.asm):01756         ;*
                      (     flx29fms.asm):01757         ;* OPNRW OPENS A FILE FOR UPDATE
                      (     flx29fms.asm):01758         ;*
                      (     flx29fms.asm):01759         ;*   ENTRY: NONE
                      (     flx29fms.asm):01760         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01761         
DB10                  (     flx29fms.asm):01762         OPNRW
DB10 BDD98F           (     flx29fms.asm):01763 [8]             JSR     OPNRD                             ;OPEN AS READ
DB13 2528             (     flx29fms.asm):01764 [3]             BCS     WTAPP4                            ;ERROR?
DB15 BDD614           (     flx29fms.asm):01765 [8]             JSR     RDNEXT                            ;READ FIRST SEC
DB18 2523             (     flx29fms.asm):01766 [3]             BCS     WTAPP4                            ;ERRORS?
                      (     flx29fms.asm):01767         
DB1A 8603             (     flx29fms.asm):01768 [2]             LDA     #3                                ;SET RW STATUS
DB1C 2018             (     flx29fms.asm):01769 [3]             BRA     WTAPP2                            ;FINISH UP
                      (     flx29fms.asm):01770         
                      (     flx29fms.asm):01771         ;* WTAPP
                      (     flx29fms.asm):01772         ;*
                      (     flx29fms.asm):01773         ;* WTAPP IS THE SYSTEM OPEN FILE
                      (     flx29fms.asm):01774         ;* FOR WRITE APPEND. THE FILE MUST
                      (     flx29fms.asm):01775         ;* EXIST AND NEW DATA IS WRITTEN ON
                      (     flx29fms.asm):01776         ;* THE END OF THE FILE.
                      (     flx29fms.asm):01777         ;*
                      (     flx29fms.asm):01778         ;*   ENTRY: NONE
                      (     flx29fms.asm):01779         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01780         
DB1E                  (     flx29fms.asm):01781         WTAPP
DB1E BDD98F           (     flx29fms.asm):01782 [8]             JSR     OPNRD                             ;OPEN AS READ
DB21 251A             (     flx29fms.asm):01783 [3]             BCS     WTAPP4                            ;ERRORS?
                      (     flx29fms.asm):01784                                                           ;
DB23 BED40B           (     flx29fms.asm):01785 [6]             LDX     FCBSTR                            ;GET FCB POINTER
DB26 A60F             (     flx29fms.asm):01786 [4+1]           LDA     FID,x                             ;GET ATT BYTE
DB28 8580             (     flx29fms.asm):01787 [2]             BITA    #$80                              ;CHECK WP BIT
DB2A 2612             (     flx29fms.asm):01788 [3]             BNE     WTAPP6                            ;
                      (     flx29fms.asm):01789                                                           ;
DB2C EC8813           (     flx29fms.asm):01790 [5+1]           LDD     FEA,x                             ;GET END ADDRESS
DB2F BDD628           (     flx29fms.asm):01791 [8]             JSR     RDNEX2                            ;READ IN LAST
DB32 2509             (     flx29fms.asm):01792 [3]             BCS     WTAPP4                            ;ERRORS?
                      (     flx29fms.asm):01793                                                           ;
DB34 8602             (     flx29fms.asm):01794 [2]             LDA     #2                                ;SET WRITE STATUS
                      (     flx29fms.asm):01795                                                           ;
DB36                  (     flx29fms.asm):01796         WTAPP2
DB36 BED40B           (     flx29fms.asm):01797 [6]             LDX     FCBSTR                            ;SET POINTER
DB39 A702             (     flx29fms.asm):01798 [4+1]           STA     FAS,x                             ;SET STATUS
DB3B 1CFE             (     flx29fms.asm):01799 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
DB3D                  (     flx29fms.asm):01800         WTAPP4
DB3D 39               (     flx29fms.asm):01801 [5]             RTS                                       ;
                      (     flx29fms.asm):01802                                                           ;
DB3E                  (     flx29fms.asm):01803         WTAPP6
DB3E C60B             (     flx29fms.asm):01804 [2]             LDB     #WPER                             ;SET ERROR
DB40 1A01             (     flx29fms.asm):01805 [3]             ORCC    #1                                ;SEC
DB42 39               (     flx29fms.asm):01806 [5]             RTS
                      (     flx29fms.asm):01807         
                      (     flx29fms.asm):01808         ;* RENAME
                      (     flx29fms.asm):01809         ;*
                      (     flx29fms.asm):01810         ;* RENAME IS THE SYSTEM FILE RENAME
                      (     flx29fms.asm):01811         ;* ROUTINE.  THE NEW NAME MUST BE IN
                      (     flx29fms.asm):01812         ;* FCB+FLR.
                      (     flx29fms.asm):01813         ;*
                      (     flx29fms.asm):01814         ;*   ENTRY: SEE ABOVE
                      (     flx29fms.asm):01815         ;*   EXIT:  CS IF ERROR
                      (     flx29fms.asm):01816         
DB43                  (     flx29fms.asm):01817         RENAME
DB43 8D35             (     flx29fms.asm):01818 [7]             BSR     SWAP                              ;SWAP NAMES
DB45 BDD89B           (     flx29fms.asm):01819 [8]             JSR     FNDNAM                            ;GO LOOK FOR IT
DB48 252A             (     flx29fms.asm):01820 [3]             BCS     RENAM5                            ;ERROR?
DB4A 2724             (     flx29fms.asm):01821 [3]             BEQ     RENAM4                            ;ALREADY EXISTS?
                      (     flx29fms.asm):01822                                                           ;
DB4C BED40B           (     flx29fms.asm):01823 [6]             LDX     FCBSTR                            ;
DB4F C60B             (     flx29fms.asm):01824 [2]             LDB     #NL                               ;SET COUNTER
                      (     flx29fms.asm):01825                                                           ;
DB51                  (     flx29fms.asm):01826         RENAM1
DB51 A68824           (     flx29fms.asm):01827 [4+1]           LDA     FWB,x                             ;GET CHAR
DB54 A704             (     flx29fms.asm):01828 [4+1]           STA     FFN,x                             ;MOVE BACK
DB56 3001             (     flx29fms.asm):01829 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
DB58 5A               (     flx29fms.asm):01830 [2]             DECB                                      ;DEC THE COUNT
DB59 26F6             (     flx29fms.asm):01831 [3]             BNE     RENAM1                            ;
DB5B 8D4D             (     flx29fms.asm):01832 [7]             BSR     SWPNM                             ;SWAP AND FIND
DB5D 2515             (     flx29fms.asm):01833 [3]             BCS     RENAM5                            ;ERROR?
DB5F BED40B           (     flx29fms.asm):01834 [6]             LDX     FCBSTR                            ;GET POINTER
DB62 A60F             (     flx29fms.asm):01835 [4+1]           LDA     FID,x                             ;GET ATT BYTE
DB64 8580             (     flx29fms.asm):01836 [2]             BITA    #$80                              ;
DB66 26D6             (     flx29fms.asm):01837 [3]             BNE     WTAPP6                            ;
DB68 8560             (     flx29fms.asm):01838 [2]             BITA    #$60                              ;CHECK DP BIT
DB6A 2609             (     flx29fms.asm):01839 [3]             BNE     RENAM6                            ;
DB6C 8D0C             (     flx29fms.asm):01840 [7]             BSR     SWAP                              ;SWAP NAMES
DB6E 2055             (     flx29fms.asm):01841 [3]             BRA     DELNA2                            ;WRITE DIRECTORY
                      (     flx29fms.asm):01842                                                           ;
DB70                  (     flx29fms.asm):01843         RENAM4
DB70 C603             (     flx29fms.asm):01844 [2]             LDB     #FEER                             ;SET ERROR
DB72 1A01             (     flx29fms.asm):01845 [3]             ORCC    #1                                ;SEC SHOW ERROR
DB74                  (     flx29fms.asm):01846         RENAM5
DB74 39               (     flx29fms.asm):01847 [5]             RTS                                       ;
                      (     flx29fms.asm):01848                                                           ;
DB75                  (     flx29fms.asm):01849         RENAM6
DB75 C60C             (     flx29fms.asm):01850 [2]             LDB     #DPER                             ;SET ERROR
DB77 1A01             (     flx29fms.asm):01851 [3]             ORCC    #1                                ;SEC SHOW ERROR
DB79 39               (     flx29fms.asm):01852 [5]             RTS
                      (     flx29fms.asm):01853         
                      (     flx29fms.asm):01854         ;* SWAP
                      (     flx29fms.asm):01855         ;*
                      (     flx29fms.asm):01856         ;* SWAP THE NAME IN FLR WITH FFN.
                      (     flx29fms.asm):01857         ;* IF FLR HAS NULL EXT SET AS FFN.
                      (     flx29fms.asm):01858         
DB7A                  (     flx29fms.asm):01859         SWAP
DB7A BED40B           (     flx29fms.asm):01860 [6]             LDX     FCBSTR                            ;SET FCB POINTER
DB7D 860B             (     flx29fms.asm):01861 [2]             LDA     #NL                               ;SET COUNT
DB7F B7D411           (     flx29fms.asm):01862 [5]             STA     ETRIES                            ;SAVE IT
                      (     flx29fms.asm):01863                                                           ;
DB82                  (     flx29fms.asm):01864         SWAP2
DB82 A604             (     flx29fms.asm):01865 [4+1]           LDA     FFN,x                             ;GET CHARACTER
DB84 E68835           (     flx29fms.asm):01866 [4+1]           LDB     FLR,x                             ;GET OTHER
DB87 A78835           (     flx29fms.asm):01867 [4+1]           STA     FLR,x                             ;SWAP THEM
DB8A E704             (     flx29fms.asm):01868 [4+1]           STB     FFN,x                             ;
DB8C 3001             (     flx29fms.asm):01869 [4+1]           LEAX    1,x                               ;BUMP TO NEXT
DB8E 7AD411           (     flx29fms.asm):01870 [7]             DEC     ETRIES                            ;DEC THE COUNT
DB91 26EF             (     flx29fms.asm):01871 [3]             BNE     SWAP2                             ;AGAIN?
                      (     flx29fms.asm):01872                                                           ;
DB93 BED40B           (     flx29fms.asm):01873 [6]             LDX     FCBSTR                            ;RESTORE POINTER
DB96 A60C             (     flx29fms.asm):01874 [4+1]           LDA     FNE,x                             ;GET IST CHAR
DB98 260C             (     flx29fms.asm):01875 [3]             BNE     SWAP6                             ;IS IT NULL?
DB9A C603             (     flx29fms.asm):01876 [2]             LDB     #3                                ;SET COUNT
DB9C                  (     flx29fms.asm):01877         SWAP4
DB9C A6883D           (     flx29fms.asm):01878 [4+1]           LDA     FLR+8,x                           ;GET CHAR
DB9F A70C             (     flx29fms.asm):01879 [4+1]           STA     FNE,x                             ;SAVE IT
DBA1 3001             (     flx29fms.asm):01880 [4+1]           LEAX    1,x                               ;BUMP TO NEXT
DBA3 5A               (     flx29fms.asm):01881 [2]             DECB                                      ;DEC THE COUNT
DBA4 26F6             (     flx29fms.asm):01882 [3]             BNE     SWAP4                             ;
DBA6                  (     flx29fms.asm):01883         SWAP6
DBA6 BED40B           (     flx29fms.asm):01884 [6]             LDX     FCBSTR                            ;RESTORE POINTER
DBA9 39               (     flx29fms.asm):01885 [5]             RTS
                      (     flx29fms.asm):01886         
                      (     flx29fms.asm):01887         ;* SWPNM
                      (     flx29fms.asm):01888         ;*
                      (     flx29fms.asm):01889         ;* SWAP NAMES AND DO FNDNAM
                      (     flx29fms.asm):01890         
DBAA                  (     flx29fms.asm):01891         SWPNM
DBAA 8DCE             (     flx29fms.asm):01892 [7]             BSR     SWAP                              ;GO DO SWAP
DBAC                  (     flx29fms.asm):01893         SWPNM2
DBAC BDD89B           (     flx29fms.asm):01894 [8]             JSR     FNDNAM                            ;FIND NAME
DBAF 2507             (     flx29fms.asm):01895 [3]             BCS     SWPNM4                            ;ERROR?
DBB1 2606             (     flx29fms.asm):01896 [3]             BNE     SWPNM5                            ;NO FIND?
                      (     flx29fms.asm):01897                                                           ;
DBB3 BED40B           (     flx29fms.asm):01898 [6]             LDX     FCBSTR                            ;RESTORE POINTER
DBB6 1CFE             (     flx29fms.asm):01899 [3]             ANDCC   #$FE                              ;CLC CLEAR ERRORS
DBB8                  (     flx29fms.asm):01900         SWPNM4
DBB8 39               (     flx29fms.asm):01901 [5]             RTS                                       ;
                      (     flx29fms.asm):01902                                                           ;
DBB9                  (     flx29fms.asm):01903         SWPNM5
DBB9 C604             (     flx29fms.asm):01904 [2]             LDB     #NFER                             ;SET ERROR
DBBB 1A01             (     flx29fms.asm):01905 [3]             ORCC    #1                                ;SEC
DBBD 39               (     flx29fms.asm):01906 [5]             RTS
                      (     flx29fms.asm):01907         
                      (     flx29fms.asm):01908         ;* DELNAM
                      (     flx29fms.asm):01909         ;*
                      (     flx29fms.asm):01910         ;* DELETE FILE NAME IN DIR
                      (     flx29fms.asm):01911         
DBBE                  (     flx29fms.asm):01912         DELNAM
DBBE BED40B           (     flx29fms.asm):01913 [6]             LDX     FCBSTR                            ;POINT TO FCB
DBC1 86FF             (     flx29fms.asm):01914 [2]             LDA     #$FF                              ;SET NEGATIVE
DBC3 A704             (     flx29fms.asm):01915 [4+1]           STA     FFN,x                             ;SET VALUE
                      (     flx29fms.asm):01916                                                           ;
DBC5                  (     flx29fms.asm):01917         DELNA2
DBC5 BDD972           (     flx29fms.asm):01918 [8]             JSR     WRTDIR                            ;WRITE DIRECTORY
DBC8 BED40B           (     flx29fms.asm):01919 [6]             LDX     FCBSTR                            ;SET POINTER
DBCB 8600             (     flx29fms.asm):01920 [2]             LDA     #0                                ;CLEAR STATUS
DBCD A702             (     flx29fms.asm):01921 [4+1]           STA     FAS,x
DBCF 39               (     flx29fms.asm):01922 [5]             RTS
                      (     flx29fms.asm):01923         
                      (     flx29fms.asm):01924         ;* WRITIT
                      (     flx29fms.asm):01925         ;*
                      (     flx29fms.asm):01926         ;* WRITIT PUTS AND WRITES NEW
                      (     flx29fms.asm):01927         ;* FORWARD LINK IN SECTOR.
                      (     flx29fms.asm):01928         
DBD0                  (     flx29fms.asm):01929         WRITIT
DBD0 ED8840           (     flx29fms.asm):01930 [5+1]           STD     FSB,x                             ;SET NEW LINK
DBD3 BDD6A7           (     flx29fms.asm):01931 [8]             JSR     WRITSS                            ;WRITE SECTOR
DBD6 2414             (     flx29fms.asm):01932 [3]             BCC     WRTER4                            ;
                      (     flx29fms.asm):01933                                                           ;
DBD8                  (     flx29fms.asm):01934         WRTERR
DBD8 C540             (     flx29fms.asm):01935 [2]             BITB    #$40                              ;W.P. ?
DBDA 2608             (     flx29fms.asm):01936 [3]             BNE     WRTER1                            ;
DBDC C580             (     flx29fms.asm):01937 [2]             BITB    #$80                              ;
DBDE 270A             (     flx29fms.asm):01938 [3]             BEQ     WRTER3                            ;
DBE0 C610             (     flx29fms.asm):01939 [2]             LDB     #NRER                             ;SET NOT READY
DBE2 2006             (     flx29fms.asm):01940 [3]             BRA     WRTER3                            ;
                      (     flx29fms.asm):01941                                                           ;
DBE4                  (     flx29fms.asm):01942         WRTER1
DBE4 C60B             (     flx29fms.asm):01943 [2]             LDB     #WPER                             ;SET WP ERROR
DBE6 2002             (     flx29fms.asm):01944 [3]             BRA     WRTER3                            ;
                      (     flx29fms.asm):01945                                                           ;
                      (     flx29fms.asm):01946         ;* ---- No path to this code ;
                      (     flx29fms.asm):01947         ;
DBE8                  (     flx29fms.asm):01948         WRTER2
DBE8 C60A             (     flx29fms.asm):01949 [2]             LDB     #WTER                             ;SET WRITE ERROR
                      (     flx29fms.asm):01950         
                      (     flx29fms.asm):01951         ;* ----
                      (     flx29fms.asm):01952         
DBEA                  (     flx29fms.asm):01953         WRTER3
DBEA 1A01             (     flx29fms.asm):01954 [3]             ORCC    #1
DBEC                  (     flx29fms.asm):01955         WRTER4
DBEC 39               (     flx29fms.asm):01956 [5]             RTS
                      (     flx29fms.asm):01957         
                      (     flx29fms.asm):01958         ;* DELETE
                      (     flx29fms.asm):01959         ;*
                      (     flx29fms.asm):01960         ;* DELETE A SYSTEM FILE RETURNING ITS
                      (     flx29fms.asm):01961         ;* SECTORS BACK TO THE LIST OF AVAIL.
                      (     flx29fms.asm):01962         ;*
                      (     flx29fms.asm):01963         ;*   ENTRY: NAME IN FFN
                      (     flx29fms.asm):01964         ;*   EXIT:  ALL CHANGED
                      (     flx29fms.asm):01965         ;*          CS IF ERROR
                      (     flx29fms.asm):01966         
DBED                  (     flx29fms.asm):01967         DELETE
DBED BDD920           (     flx29fms.asm):01968 [8]             JSR     GETAVL                            ;GET SEC MAP
DBF0 255E             (     flx29fms.asm):01969 [3]             BCS     DELET6                            ;ERROR?
DBF2 8DB8             (     flx29fms.asm):01970 [7]             BSR     SWPNM2                            ;FIND NAME
DBF4 255A             (     flx29fms.asm):01971 [3]             BCS     DELET6                            ;ERROR?
                      (     flx29fms.asm):01972                                                           ;
DBF6 BED40B           (     flx29fms.asm):01973 [6]             LDX     FCBSTR                            ;GET POINTER
DBF9 A60F             (     flx29fms.asm):01974 [4+1]           LDA     FID,x                             ;GET ATT BYTE
DBFB 8580             (     flx29fms.asm):01975 [2]             BITA    #$80                              ;CHECK WP BIT
DBFD 2652             (     flx29fms.asm):01976 [3]             BNE     DELET7                            ;
                      (     flx29fms.asm):01977                                                           ;
DBFF 8560             (     flx29fms.asm):01978 [2]             BITA    #$60                              ;CHECK DP BIT
DC01 2652             (     flx29fms.asm):01979 [3]             BNE     DELET8                            ;
                      (     flx29fms.asm):01980                                                           ;
DC03 BDD78F           (     flx29fms.asm):01981 [8]             JSR     FSECMP                            ;FIND SEC MAP
DC06 BED41B           (     flx29fms.asm):01982 [6]             LDX     AVLPNT                            ;GET MAP POINTER
DC09 EC02             (     flx29fms.asm):01983 [5+1]           LDD     2,x                               ;GET LAST AVAIL
DC0B 260F             (     flx29fms.asm):01984 [3]             BNE     DELET2                            ;IS IT NULL?
DC0D BED40B           (     flx29fms.asm):01985 [6]             LDX     FCBSTR                            ;RESTORE POINTER
DC10 EC8811           (     flx29fms.asm):01986 [5+1]           LDD     FSA,x                             ;GET START ADR
DC13 2733             (     flx29fms.asm):01987 [3]             BEQ     DELET5                            ;
DC15 BED41B           (     flx29fms.asm):01988 [6]             LDX     AVLPNT                            ;POINT TO AVAILS
DC18 ED84             (     flx29fms.asm):01989 [5+0]           STD     ,x                                ;SET NEW
DC1A 2014             (     flx29fms.asm):01990 [3]             BRA     DELET4                            ;JUMP AHEAD
                      (     flx29fms.asm):01991                                                           ;
DC1C                  (     flx29fms.asm):01992         DELET2
DC1C BED40B           (     flx29fms.asm):01993 [6]             LDX     FCBSTR                            ;SET POINTER
DC1F BDD628           (     flx29fms.asm):01994 [8]             JSR     RDNEX2                            ;READ SECTOR
DC22 252C             (     flx29fms.asm):01995 [3]             BCS     DELET6                            ;ERRORS?
DC24 BED40B           (     flx29fms.asm):01996 [6]             LDX     FCBSTR                            ;RESTORE POINTER
DC27 EC8811           (     flx29fms.asm):01997 [5+1]           LDD     FSA,x                             ;GET START ADR
DC2A 271C             (     flx29fms.asm):01998 [3]             BEQ     DELET5                            ;
DC2C 8DA2             (     flx29fms.asm):01999 [7]             BSR     WRITIT                            ;SET LINK
DC2E 2520             (     flx29fms.asm):02000 [3]             BCS     DELET6                            ;ERROR?
                      (     flx29fms.asm):02001                                                           ;
DC30                  (     flx29fms.asm):02002         DELET4
DC30 BED40B           (     flx29fms.asm):02003 [6]             LDX     FCBSTR                            ;SET FCB PNTR
DC33 EC8813           (     flx29fms.asm):02004 [5+1]           LDD     FEA,x                             ;GET END ADR
DC36 BED41B           (     flx29fms.asm):02005 [6]             LDX     AVLPNT                            ;POINT TO AVAILS
DC39 ED02             (     flx29fms.asm):02006 [5+1]           STD     2,x                               ;SET NEW LAST
DC3B BED40B           (     flx29fms.asm):02007 [6]             LDX     FCBSTR                            ;SET POINTER
DC3E EC8815           (     flx29fms.asm):02008 [5+1]           LDD     FSZ,x                             ;GET SIZE
DC41 BED41B           (     flx29fms.asm):02009 [6]             LDX     AVLPNT                            ;POINT TO AVAILS
DC44 E304             (     flx29fms.asm):02010 [6+1]           ADDD    4,x                               ;ADD IN SECTORS
DC46 ED04             (     flx29fms.asm):02011 [5+1]           STD     4,x                               ;SAVE NEW COUNT
                      (     flx29fms.asm):02012                                                           ;
DC48                  (     flx29fms.asm):02013         DELET5
DC48 BDDBBE           (     flx29fms.asm):02014 [8]             JSR     DELNAM                            ;DELETE NAME
DC4B 2503             (     flx29fms.asm):02015 [3]             BCS     DELET6                            ;ERROR?
DC4D BDD950           (     flx29fms.asm):02016 [8]             JSR     PUTAVL                            ;WRITE AVAIL SEC
DC50                  (     flx29fms.asm):02017         DELET6
DC50 39               (     flx29fms.asm):02018 [5]             RTS                                       ;
                      (     flx29fms.asm):02019                                                           ;
DC51                  (     flx29fms.asm):02020         DELET7
DC51 C60B             (     flx29fms.asm):02021 [2]             LDB     #WPER                             ;SET ERROR
DC53 2002             (     flx29fms.asm):02022 [3]             BRA     DELET9                            ;
                      (     flx29fms.asm):02023                                                           ;
DC55                  (     flx29fms.asm):02024         DELET8
DC55 C60C             (     flx29fms.asm):02025 [2]             LDB     #DPER                             ;SET ERROR
DC57                  (     flx29fms.asm):02026         DELET9
DC57 1A01             (     flx29fms.asm):02027 [3]             ORCC    #1                                ;SEC SHOW ERROR
DC59 39               (     flx29fms.asm):02028 [5]             RTS
                      (     flx29fms.asm):02029         
                      (     flx29fms.asm):02030         ;* UPDFSM
                      (     flx29fms.asm):02031         ;*
                      (     flx29fms.asm):02032         ;* UPDATE FILE SECTOR MAP
                      (     flx29fms.asm):02033         
DC5A                  (     flx29fms.asm):02034         UPDFSM
DC5A EC881E           (     flx29fms.asm):02035 [5+1]           LDD     FCS,x                             ;GET CURRENT SEC
DC5D 5C               (     flx29fms.asm):02036 [2]             INCB                                      ;CHECK IF SEQUENTIAL
DC5E E1883C           (     flx29fms.asm):02037 [4+1]           CMPB    FMX,x                             ;CHECK MAX
DC61 2303             (     flx29fms.asm):02038 [3]             BLS     UPDFS2                            ;
DC63 C601             (     flx29fms.asm):02039 [2]             LDB     #1                                ;SET SECTOR 1
DC65 4C               (     flx29fms.asm):02040 [2]             INCA                                      ;BUMP TRACK
DC66                  (     flx29fms.asm):02041         UPDFS2
DC66 10A38813         (     flx29fms.asm):02042 [7+1]           CMPD    FEA,x                             ;CHECK END
DC6A 260E             (     flx29fms.asm):02043 [3]             BNE     UPDFS4                            ;
DC6C A68837           (     flx29fms.asm):02044 [4+1]           LDA     SBC,x                             ;CHECK MAX COUNT
DC6F 81FF             (     flx29fms.asm):02045 [2]             CMPA    #$FF                              ;IS IT MAX?
DC71 2707             (     flx29fms.asm):02046 [3]             BEQ     UPDFS4                            ;
DC73 4C               (     flx29fms.asm):02047 [2]             INCA                                      ;BUMP COUNT
DC74 A78837           (     flx29fms.asm):02048 [4+1]           STA     SBC,x                             ;SAVE IT
DC77 1CFE             (     flx29fms.asm):02049 [3]             ANDCC   #$fe                              ;clc CLEAR ERRORS
DC79 39               (     flx29fms.asm):02050 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02051                                                           ;
DC7A                  (     flx29fms.asm):02052         UPDFS4
DC7A 8D33             (     flx29fms.asm):02053 [7]             BSR     WTFSM                             ;WRITE FSM
DC7C 2530             (     flx29fms.asm):02054 [3]             BCS     UPDFS9                            ;ERROR?
DC7E BED40B           (     flx29fms.asm):02055 [6]             LDX     FCBSTR                            ;SET POINTER
DC81 A6883A           (     flx29fms.asm):02056 [4+1]           LDA     FNK+2,x                           ;GET OFFSET
DC84 8B03             (     flx29fms.asm):02057 [2]             ADDA    #3                                ;BUMP TO NEXT ENTRY
DC86 2616             (     flx29fms.asm):02058 [3]             BNE     UPDFS8                            ;END OF SECTOR?
DC88 EC881E           (     flx29fms.asm):02059 [5+1]           LDD     FCS,x                             ;GET CURRENT
DC8B 10A38811         (     flx29fms.asm):02060 [7+1]           CMPD    FSA,x                             ;START ADDR?
DC8F 2705             (     flx29fms.asm):02061 [3]             BEQ     UPDFS7                            ;
DC91                  (     flx29fms.asm):02062         UPDFS6
DC91 C617             (     flx29fms.asm):02063 [2]             LDB     #FSER                             ;SET ERROR
DC93 1A01             (     flx29fms.asm):02064 [3]             ORCC    #1                                ;sec
DC95 39               (     flx29fms.asm):02065 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02066                                                           ;
DC96                  (     flx29fms.asm):02067         UPDFS7
DC96 EC8840           (     flx29fms.asm):02068 [5+1]           LDD     FSB,x                             ;GET LINK
DC99                  (     flx29fms.asm):02069         UPDF75
DC99 ED8838           (     flx29fms.asm):02070 [5+1]           STD     FNK,x                             ;SET POINTER
DC9C 8604             (     flx29fms.asm):02071 [2]             LDA     #4                                ;SET INITIAL OFFSET
DC9E                  (     flx29fms.asm):02072         UPDFS8
DC9E A7883A           (     flx29fms.asm):02073 [4+1]           STA     FNK+2,x                           ;
DCA1 EC8813           (     flx29fms.asm):02074 [5+1]           LDD     FEA,x                             ;GET END ADDR
DCA4 ED8835           (     flx29fms.asm):02075 [5+1]           STD     FLR,x                             ;MARK POSITION
DCA7 8601             (     flx29fms.asm):02076 [2]             LDA     #1                                ;SET COUNT
DCA9 A78837           (     flx29fms.asm):02077 [4+1]           STA     SBC,x                             ;
DCAC 1CFE             (     flx29fms.asm):02078 [3]             ANDCC   #$fe                              ;clc CLEAR ERRORS
DCAE                  (     flx29fms.asm):02079         UPDFS9
DCAE 39               (     flx29fms.asm):02080 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02081         
                      (     flx29fms.asm):02082         ;* WTFSM
                      (     flx29fms.asm):02083         ;*
                      (     flx29fms.asm):02084         ;* WRITE FILE SECTOR MAP
                      (     flx29fms.asm):02085         
DCAF                  (     flx29fms.asm):02086         WTFSM
DCAF EC8838           (     flx29fms.asm):02087 [5+1]           LDD     FNK,x                             ;GET RECORD
DCB2 BDD628           (     flx29fms.asm):02088 [8]             JSR     RDNEX2                            ;READ SECTOR
DCB5 25F7             (     flx29fms.asm):02089 [3]             BCS     UPDFS9                            ;ERROR?
DCB7 BED40B           (     flx29fms.asm):02090 [6]             LDX     FCBSTR
DCBA 1F12             (     flx29fms.asm):02091 [6]             TFR     x,y
DCBC E6883A           (     flx29fms.asm):02092 [4+1]           LDB     FNK+2,x
                      (     flx29fms.asm):02093         
                      (     flx29fms.asm):02094         ;* LEAX    B,x   < original code
                      (     flx29fms.asm):02095         ;* Add NOP and ABX
                      (     flx29fms.asm):02096         
DCBF 12               (     flx29fms.asm):02097 [2]             NOP
DCC0 3A               (     flx29fms.asm):02098 [3]             ABX                                       ;CORRECTED 2/4/80
DCC1 C603             (     flx29fms.asm):02099 [2]             LDB     #3
DCC3                  (     flx29fms.asm):02100         WTFSM2
DCC3 A6A835           (     flx29fms.asm):02101 [4+1]           LDA     FLR,y
DCC6 3121             (     flx29fms.asm):02102 [4+1]           LEAY    1,y
DCC8 A78840           (     flx29fms.asm):02103 [4+1]           STA     FSB,x
DCCB 3001             (     flx29fms.asm):02104 [4+1]           LEAX    1,x
DCCD 5A               (     flx29fms.asm):02105 [2]             DECB                                      ;DEC THE COUNT
DCCE 26F3             (     flx29fms.asm):02106 [3]             BNE     WTFSM2                            ;
DCD0 BDD6A7           (     flx29fms.asm):02107 [8]             JSR     WRITSS                            ;WRITE SECTOR
DCD3 24D9             (     flx29fms.asm):02108 [3]             BCC     UPDFS9                            ;ERROR?
DCD5 7EDBD8           (     flx29fms.asm):02109 [4]             JMP     WRTERR                            ;SET ERROR
                      (     flx29fms.asm):02110         
                      (     flx29fms.asm):02111         ;* SETMAX
                      (     flx29fms.asm):02112         ;*
                      (     flx29fms.asm):02113         ;* SET MAX SECTOR NUMBER
                      (     flx29fms.asm):02114         
DCD8                  (     flx29fms.asm):02115         SETMAX
DCD8 BDD818           (     flx29fms.asm):02116 [8]             JSR     OPNSIR                            ;GET SECTOR
DCDB BDD614           (     flx29fms.asm):02117 [8]             JSR     RDNEXT                            ;
DCDE 2546             (     flx29fms.asm):02118 [3]             BCS     POSI05                            ;ERROR?
DCE0 BED40B           (     flx29fms.asm):02119 [6]             LDX     FCBSTR                            ;SET FCB PNTR
DCE3 4F               (     flx29fms.asm):02120 [2]             CLRA                                      ;
DCE4 5F               (     flx29fms.asm):02121 [2]             CLRB                                      ;
DCE5 ED8820           (     flx29fms.asm):02122 [5+1]           STD     FRN,x                             ;CLEAR REC NUM
DCE8 A68867           (     flx29fms.asm):02123 [4+1]           LDA     FSB+39,x                          ;GET MAX
DCEB A7883C           (     flx29fms.asm):02124 [4+1]           STA     FMX,x                             ;SAVE MAX
DCEE 5F               (     flx29fms.asm):02125 [2]             CLRB                                      ;GET SECTOR LENGTH \\\\
DCEF                  (     flx29fms.asm):02126         SETMA2
DCEF 6F8840           (     flx29fms.asm):02127 [6+1]           CLR     FSB,x                             ;CLEAR BYTES
DCF2 3001             (     flx29fms.asm):02128 [4+1]           LEAX    1,x                               ;
DCF4 5A               (     flx29fms.asm):02129 [2]             DECB                                      ;DEC THE COUNTER
DCF5 26F8             (     flx29fms.asm):02130 [3]             BNE     SETMA2                            ;
DCF7 BED40B           (     flx29fms.asm):02131 [6]             LDX     FCBSTR                            ;RESTORE POINTER
DCFA 1CFE             (     flx29fms.asm):02132 [3]             ANDCC   #$fe                              ;clc CLEAR ERRORS
DCFC 39               (     flx29fms.asm):02133 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02134         
                      (     flx29fms.asm):02135         ;* BKREC
                      (     flx29fms.asm):02136         ;*
                      (     flx29fms.asm):02137         ;* BACK UP ONE RECORD
                      (     flx29fms.asm):02138         
DCFD                  (     flx29fms.asm):02139         BKREC
DCFD BED40B           (     flx29fms.asm):02140 [6]             LDX     FCBSTR                            ;GET FCB
DD00 A68817           (     flx29fms.asm):02141 [4+1]           LDA     FMP,x                             ;RANDOM?
DD03 271D             (     flx29fms.asm):02142 [3]             BEQ     POSIT0                            ;
DD05 EC8820           (     flx29fms.asm):02143 [5+1]           LDD     FRN,x                             ;GET REC NUMBER
DD08 830001           (     flx29fms.asm):02144 [4]             SUBD    #1                                ;DEC BY ONE
DD0B 2A03             (     flx29fms.asm):02145 [3]             BPL     BKREC2                            ;UNDERFLOW?
DD0D 7EDDB2           (     flx29fms.asm):02146 [4]             JMP     POSIT8                            ;
DD10                  (     flx29fms.asm):02147         BKREC2
DD10 ED8820           (     flx29fms.asm):02148 [5+1]           STD     FRN,x                             ;SAVE NEW
                      (     flx29fms.asm):02149         
                      (     flx29fms.asm):02150         ;* POSIT
                      (     flx29fms.asm):02151         ;*
                      (     flx29fms.asm):02152         ;* POSITION TO FRN RECORD NUMBER
                      (     flx29fms.asm):02153         
DD13                  (     flx29fms.asm):02154         POSIT
DD13 BDDAC8           (     flx29fms.asm):02155 [8]             JSR     DOSTAT                            ;CHECK STATUS
DD16 250E             (     flx29fms.asm):02156 [3]             BCS     POSI05                            ;ERROR?
DD18 46               (     flx29fms.asm):02157 [2]             RORA                                      ;
DD19 2407             (     flx29fms.asm):02158 [3]             BCC     POSIT0                            ;ERROR?
DD1B 6F84             (     flx29fms.asm):02159 [6+0]           CLR     ,x                                ;CLEAR FFC
DD1D A68817           (     flx29fms.asm):02160 [4+1]           LDA     FMP,x                             ;CHECK RANDOM
DD20 2605             (     flx29fms.asm):02161 [3]             BNE     POSIT1                            ;ERROR?
                      (     flx29fms.asm):02162                                                           ;
DD22                  (     flx29fms.asm):02163         POSIT0
DD22 C612             (     flx29fms.asm):02164 [2]             LDB     #STER                             ;SET ERROR
DD24 1A01             (     flx29fms.asm):02165 [3]             ORCC    #1                                ;sec
DD26                  (     flx29fms.asm):02166         POSI05
DD26 39               (     flx29fms.asm):02167 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02168                                                           ;
DD27                  (     flx29fms.asm):02169         POSIT1
DD27 7FD411           (     flx29fms.asm):02170 [7]             CLR     ETRIES                            ;CLEAR COUNT
DD2A EC8811           (     flx29fms.asm):02171 [5+1]           LDD     FSA,x                             ;GET START ADDR
DD2D 10AE8820         (     flx29fms.asm):02172 [6+1]           LDY     FRN,x                             ;CHECK FOR 0
DD31 276A             (     flx29fms.asm):02173 [3]             BEQ     POSIT7                            ;GO DO ZERO
DD33                  (     flx29fms.asm):02174         POSIT2
DD33 BDDDB7           (     flx29fms.asm):02175 [8]             JSR     GETFSM                            ;GET FSM
DD36 25EE             (     flx29fms.asm):02176 [3]             BCS     POSI05                            ;
DD38 4F               (     flx29fms.asm):02177 [2]             CLRA                                      ;CLEAR COUNT
DD39 5F               (     flx29fms.asm):02178 [2]             CLRB                                      ;
DD3A                  (     flx29fms.asm):02179         POSIT3
DD3A 6D02             (     flx29fms.asm):02180 [6+1]           TST     2,x                               ;CHECK FOR EOF
DD3C 2774             (     flx29fms.asm):02181 [3]             BEQ     POSIT8                            ;
DD3E EB02             (     flx29fms.asm):02182 [4+1]           ADDB    2,x                               ;ADD IN NEW
DD40 8900             (     flx29fms.asm):02183 [2]             ADCA    #0                                ;
DD42 BFD40F           (     flx29fms.asm):02184 [6]             STX     DATAPT                            ;
DD45 BED40B           (     flx29fms.asm):02185 [6]             LDX     FCBSTR                            ;
DD48 10A38820         (     flx29fms.asm):02186 [7+1]           CMPD    FRN,x                             ;CHECK NUMBER
DD4C 242C             (     flx29fms.asm):02187 [3]             BHS     POSIT6                            ;
DD4E                  (     flx29fms.asm):02188         POSIT4
DD4E BED40F           (     flx29fms.asm):02189 [6]             LDX     DATAPT                            ;RESTORE POINTER
DD51 3003             (     flx29fms.asm):02190 [4+1]           LEAX    3,x                               ;BUMP TO NEXT
DD53 3402             (     flx29fms.asm):02191 [5+1]           PSHS    a                                 ;SAVE COUNT
DD55 B6D411           (     flx29fms.asm):02192 [5]             LDA     ETRIES                            ;
DD58 4C               (     flx29fms.asm):02193 [2]             INCA                                      ;BUMP POSITION
DD59 B7D411           (     flx29fms.asm):02194 [5]             STA     ETRIES                            ;SAVE RESULT
DD5C 8154             (     flx29fms.asm):02195 [2]             CMPA    #84                               ;LAST RECORD?
DD5E 2708             (     flx29fms.asm):02196 [3]             BEQ     POSIT5                            ;
DD60 81A8             (     flx29fms.asm):02197 [2]             CMPA    #168                              ;
DD62 3502             (     flx29fms.asm):02198 [5+1]           PULS    a                                 ;RESTORE TOTAL
DD64 274C             (     flx29fms.asm):02199 [3]             BEQ     POSIT8                            ;ERROR?
DD66 20D2             (     flx29fms.asm):02200 [3]             BRA     POSIT3                            ;REPEAT
DD68                  (     flx29fms.asm):02201         POSIT5
DD68 3404             (     flx29fms.asm):02202 [5+1]           PSHS    b                                 ;
DD6A BED40B           (     flx29fms.asm):02203 [6]             LDX     FCBSTR                            ;SET POINTER
DD6D EC8840           (     flx29fms.asm):02204 [5+1]           LDD     FSB,x                             ;
DD70 8D45             (     flx29fms.asm):02205 [7]             BSR     GETFSM                            ;GET FSM
DD72 253E             (     flx29fms.asm):02206 [3]             BCS     POSIT8                            ;ERROR?
DD74 3504             (     flx29fms.asm):02207 [5+1]           PULS    b                                 ;
DD76 3502             (     flx29fms.asm):02208 [5+1]           PULS    a                                 ;RESTORE TOTAL
DD78 20C0             (     flx29fms.asm):02209 [3]             BRA     POSIT3                            ;REPEAT
DD7A                  (     flx29fms.asm):02210         POSIT6
DD7A A38820           (     flx29fms.asm):02211 [6+1]           SUBD    FRN,x                             ;SUB REC NUM
DD7D BED40F           (     flx29fms.asm):02212 [6]             LDX     DATAPT                            ;RESTORE POINTER
DD80 A602             (     flx29fms.asm):02213 [4+1]           LDA     2,x                               ;
DD82 3404             (     flx29fms.asm):02214 [5+1]           PSHS    b                                 ; sba
DD84 A0E0             (     flx29fms.asm):02215 [4+2]           SUBA    ,s+                               ;
DD86 4A               (     flx29fms.asm):02216 [2]             DECA                                      ;FIX UP COUNT
DD87 1F89             (     flx29fms.asm):02217 [6]             TFR     a,b                               ;
DD89 A684             (     flx29fms.asm):02218 [4+0]           LDA     ,x                                ;GET TRACK
DD8B EB01             (     flx29fms.asm):02219 [4+1]           ADDB    1,x                               ;ADD IN SECTOR
DD8D BED40B           (     flx29fms.asm):02220 [6]             LDX     FCBSTR                            ;
DD90 2505             (     flx29fms.asm):02221 [3]             BCS     POSI68                            ;
DD92                  (     flx29fms.asm):02222         POSI65
DD92 E1883C           (     flx29fms.asm):02223 [4+1]           CMPB    FMX,x                             ;MAX?
DD95 2306             (     flx29fms.asm):02224 [3]             BLS     POSIT7                            ;
DD97                  (     flx29fms.asm):02225         POSI68
DD97 E0883C           (     flx29fms.asm):02226 [4+1]           SUBB    FMX,x                             ;FIX IF SO
DD9A 4C               (     flx29fms.asm):02227 [2]             INCA                                      ;BUMP TRACK
DD9B 20F5             (     flx29fms.asm):02228 [3]             BRA     POSI65                            ;
DD9D                  (     flx29fms.asm):02229         POSIT7
DD9D BDD628           (     flx29fms.asm):02230 [8]             JSR     RDNEX2                            ;READ NEXT
DDA0 2514             (     flx29fms.asm):02231 [3]             BCS     POSI85                            ;ERROR?
DDA2 BED40B           (     flx29fms.asm):02232 [6]             LDX     FCBSTR                            ;
DDA5 EC8842           (     flx29fms.asm):02233 [5+1]           LDD     FSB+2,x                           ;GET LRN
DDA8 10A38820         (     flx29fms.asm):02234 [7+1]           CMPD    FRN,x                             ;COMPARE TO FRN
DDAC 2714             (     flx29fms.asm):02235 [3]             BEQ     GETS1                             ;
DDAE                  (     flx29fms.asm):02236         POSI75
DDAE C619             (     flx29fms.asm):02237 [2]             LDB     #RMER                             ;SET ERROR
DDB0 2002             (     flx29fms.asm):02238 [3]             BRA     POSI82                            ;
DDB2                  (     flx29fms.asm):02239         POSIT8
DDB2 C618             (     flx29fms.asm):02240 [2]             LDB     #RRER                             ;SET ERROR
DDB4                  (     flx29fms.asm):02241         POSI82
DDB4 1A01             (     flx29fms.asm):02242 [3]             ORCC    #01                               ;sec
DDB6                  (     flx29fms.asm):02243         POSI85
DDB6 39               (     flx29fms.asm):02244 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02245         
                      (     flx29fms.asm):02246         ;* GET FSM SECTOR
                      (     flx29fms.asm):02247         
DDB7                  (     flx29fms.asm):02248         GETFSM
DDB7 BDD628           (     flx29fms.asm):02249 [8]             JSR     RDNEX2                            ;READ NEXT SEC
DDBA 2508             (     flx29fms.asm):02250 [3]             BCS     GETS2                             ;ERROR?
DDBC BED40B           (     flx29fms.asm):02251 [6]             LDX     FCBSTR                            ;SET INDEX
DDBF C644             (     flx29fms.asm):02252 [2]             LDB     #FSB+4                            ;SET OFFSET
DDC1 3A               (     flx29fms.asm):02253 [3]             ABX                                       ;
DDC2                  (     flx29fms.asm):02254         GETS1
DDC2 1CFE             (     flx29fms.asm):02255 [3]             ANDCC   #$fe                              ; clc CLEAR ERRORS
DDC4                  (     flx29fms.asm):02256         GETS2
DDC4 39               (     flx29fms.asm):02257 [5]             RTS
                      (     flx29fms.asm):02258         
                      (     flx29fms.asm):02259         ;* RSTNAM
                      (     flx29fms.asm):02260         ;*
                      (     flx29fms.asm):02261         ;* RESTORE NAME FROM FWB TO FFN.
                      (     flx29fms.asm):02262         
DDC5                  (     flx29fms.asm):02263         RSTNAM
DDC5 BED40B           (     flx29fms.asm):02264 [6]             LDX     FCBSTR                            ;SET FCB
DDC8 C60B             (     flx29fms.asm):02265 [2]             LDB     #NL                               ;SET COUNTER
DDCA                  (     flx29fms.asm):02266         RSTNA2
DDCA A68824           (     flx29fms.asm):02267 [4+1]           LDA     FWB,x                             ;GET CHARACTER
DDCD A704             (     flx29fms.asm):02268 [4+1]           STA     FFN,x                             ;PUT IT
DDCF 3001             (     flx29fms.asm):02269 [4+1]           LEAX    1,x                               ;BUMP THE POINTER
DDD1 5A               (     flx29fms.asm):02270 [2]             DECB                                      ;DEC THE COUNT
DDD2 26F6             (     flx29fms.asm):02271 [3]             BNE     RSTNA2                            ;
DDD4 39               (     flx29fms.asm):02272 [5]             RTS                                       ;RETURN
                      (     flx29fms.asm):02273         
                      (     flx29fms.asm):02274         ;* NXTRDY
                      (     flx29fms.asm):02275         ;*
                      (     flx29fms.asm):02276         ;* NXTRDY RETURNS THE DRIVE NUMBER IN
                      (     flx29fms.asm):02277         ;* FCB+FDN OF THE NEXT READY DRIVE.
                      (     flx29fms.asm):02278         ;* CS IF NO MORE READY DRIVES.
                      (     flx29fms.asm):02279         
DDD5                  (     flx29fms.asm):02280         NXTRDY
DDD5 BED40B           (     flx29fms.asm):02281 [6]             LDX     FCBSTR                            ;GET FCB
DDD8 A603             (     flx29fms.asm):02282 [4+1]           LDA     FDN,x                             ;GET DRIVE NUMBER
DDDA 4C               (     flx29fms.asm):02283 [2]             INCA                                      ;BUMP BY ONE
DDDB 8104             (     flx29fms.asm):02284 [2]             CMPA    #4                                ;PAST RANGE?
DDDD 240F             (     flx29fms.asm):02285 [3]             BHS     NXTRD6                            ;
DDDF A703             (     flx29fms.asm):02286 [4+1]           STA     FDN,x                             ;SAVE NEW NUMBER
DDE1 2605             (     flx29fms.asm):02287 [3]             BNE     NXTRD2                            ;DRIVE 0 ?
DDE3 BDDE0F           (     flx29fms.asm):02288 [8]             JSR     CHKRDY                            ;CHECK IF READY
DDE6 2003             (     flx29fms.asm):02289 [3]             BRA     NXTRD4                            ;
DDE8                  (     flx29fms.asm):02290         NXTRD2
DDE8 BDDE12           (     flx29fms.asm):02291 [8]             JSR     QUICK                             ;QUICK CHECK
DDEB                  (     flx29fms.asm):02292         NXTRD4
DDEB 25E8             (     flx29fms.asm):02293 [3]             BCS     NXTRDY                            ;CHECK NEXT DRIVE
DDED 39               (     flx29fms.asm):02294 [5]             RTS                                       ;RETURN
DDEE                  (     flx29fms.asm):02295         NXTRD6
DDEE C610             (     flx29fms.asm):02296 [2]             LDB     #NRER                             ;SET ERROR
DDF0 1A01             (     flx29fms.asm):02297 [3]             ORCC    #1                                ;sec
DDF2 39               (     flx29fms.asm):02298 [5]             RTS                                       ;RETURN
                      (        flex9.asm):00011                 INCLUDE "drivers.asm"
                      (      drivers.asm):00001                 NAM     DRIVERS
                      (      drivers.asm):00002                 PAG
                      (      drivers.asm):00003                 PRAGMA  CD
                      (      drivers.asm):00004         
     0001             (      drivers.asm):00005         USEDSKYNG       EQU 1
     0001             (      drivers.asm):00006         USEDSKYKB       EQU 1
                      (      drivers.asm):00007         
                      (      drivers.asm):00008         
                      (      drivers.asm):00009         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00010         ; File Name   : DRIVERS.ASM
                      (      drivers.asm):00011         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00012         ;
                      (      drivers.asm):00013         ;  Harware Addresses
                      (      drivers.asm):00014         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00015         ; UART 16C550 SERIAL
     FE68             (      drivers.asm):00016         UART0           EQU $FE68                         ; DATA IN/OUT
     FE69             (      drivers.asm):00017         UART1           EQU $FE69                         ; CHECK RX
     FE6A             (      drivers.asm):00018         UART2           EQU $FE6A                         ; INTERRUPTS
     FE6B             (      drivers.asm):00019         UART3           EQU $FE6B                         ; LINE CONTROL
     FE6C             (      drivers.asm):00020         UART4           EQU $FE6C                         ; MODEM CONTROL
     FE6D             (      drivers.asm):00021         UART5           EQU $FE6D                         ; LINE STATUS
     FE6E             (      drivers.asm):00022         UART6           EQU $FE6E                         ; MODEM STATUS
     FE6F             (      drivers.asm):00023         UART7           EQU $FE6F                         ; SCRATCH REG.
                      (      drivers.asm):00024         
                      (      drivers.asm):00025         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00026         ;
                      (      drivers.asm):00027         ; DISK DRIVER ROUTINE JUMP TABLE
                      (      drivers.asm):00028         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00029                 ORG     $DE00
                      (      drivers.asm):00030         
DE00                  (      drivers.asm):00031         READ
DE00 7EDEBB           (      drivers.asm):00032 [4]             JMP     >DREAD                            ; DE00    READ      Read a single sector
DE03                  (      drivers.asm):00033         WRITE
DE03 7EDED7           (      drivers.asm):00034 [4]             JMP     >DWRITE                           ; DE03    WRITE     Write a single sector
DE06                  (      drivers.asm):00035         VERIFY
DE06 7EDEF3           (      drivers.asm):00036 [4]             JMP     >DVERIFY                          ; DE06    VERIFY    Verify last sector written
DE09                  (      drivers.asm):00037         RESTORE
DE09 7EDF26           (      drivers.asm):00038 [4]             JMP     >DRESTORE                         ; DE09    RESTORE   Restore head to track #0
DE0C                  (      drivers.asm):00039         DRIVE
DE0C 7EDF3C           (      drivers.asm):00040 [4]             JMP     >DDRIVE                           ; DE0C    DRIVE     Select the specified drive
DE0F                  (      drivers.asm):00041         CHKRDY
DE0F 7EDF7C           (      drivers.asm):00042 [4]             JMP     >DCHKRDY                          ; DE0F    CHKRDY    Check for drive ready
DE12                  (      drivers.asm):00043         QUICK
DE12 7EDF7D           (      drivers.asm):00044 [4]             JMP     >DQUICK                           ; DE12    QUICK     Quick check for drive ready
DE15                  (      drivers.asm):00045         CINIT
DE15 7EDF1B           (      drivers.asm):00046 [4]             JMP     >DCINIT                           ; DE15    CINIT     Driver initialize (cold start)
DE18                  (      drivers.asm):00047         WARM
DE18 7EDF25           (      drivers.asm):00048 [4]             JMP     >DWARM                            ; DE18    WARM      Driver initialize (warm start)
DE1B                  (      drivers.asm):00049         SEEK
DE1B 7EDF07           (      drivers.asm):00050 [4]             JMP     >DSEEK                            ; DE1B    SEEK      Seek to specified track
                      (      drivers.asm):00051         
                      (      drivers.asm):00052         
                      (      drivers.asm):00053         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00054         ; Temp Storage Area
                      (      drivers.asm):00055         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00056         
                      (      drivers.asm):00057         
DE1E                  (      drivers.asm):00058         CURDRV
DE1E 00               (      drivers.asm):00059                 FCB     $00
DE1F                  (      drivers.asm):00060         CURDRVTYP
DE1F 00               (      drivers.asm):00061                 FCB     $00
DE20                  (      drivers.asm):00062         CURDRVADDRESS
DE20 00               (      drivers.asm):00063                 FCB     $00
DE21                  (      drivers.asm):00064         CURDRVSLICE
DE21 0000             (      drivers.asm):00065                 FDB     $0000
                      (      drivers.asm):00066         
DE23                  (      drivers.asm):00067         DRVTYPES
DE23 02020101         (      drivers.asm):00068                 FCB     $02,$02,$01,$01
                      (      drivers.asm):00069         ;   $00 - INVALID
                      (      drivers.asm):00070         ;   $01 - Floppy
                      (      drivers.asm):00071         ;   $02 - IDE
DE27                  (      drivers.asm):00072         DRVADDRESS
DE27 01010101         (      drivers.asm):00073                 FCB     $01,$01,$01,$01
DE2B                  (      drivers.asm):00074         DRVSLICE
DE2B 0000000000000000 (      drivers.asm):00075                 FDB     $0000,$0000,$0000,$0000
                      (      drivers.asm):00076         
                      (      drivers.asm):00077         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00078         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00079         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00080         
                      (      drivers.asm):00081         
                      (      drivers.asm):00082         
                      (      drivers.asm):00083         
                      (      drivers.asm):00084         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00085         ;
                      (      drivers.asm):00086         ;       Monitor entry routine
                      (      drivers.asm):00087         ;_____________________________________________________________________________________________________
DE33                  (      drivers.asm):00088         MONITR
DE33 860A             (      drivers.asm):00089 [2]             LDA     #$A
DE35 8D15             (      drivers.asm):00090 [7]             BSR     VOUTCH                            ; OUTPUT CHARACTER
DE37 860D             (      drivers.asm):00091 [2]             LDA     #$D
DE39 8D11             (      drivers.asm):00092 [7]             BSR     VOUTCH                            ; OUTPUT CHARACTER
DE3B 7EFC0B           (      drivers.asm):00093 [4]             JMP     $FC0B                             ; LOCATION OF MONITOR
                      (      drivers.asm):00094         
                      (      drivers.asm):00095         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00096         ;
                      (      drivers.asm):00097         ;       Timer Drivers
                      (      drivers.asm):00098         ;
                      (      drivers.asm):00099         ;       Timers not supported
                      (      drivers.asm):00100         ;_____________________________________________________________________________________________________
DE3E                  (      drivers.asm):00101         TMOFF   ; TIMER OFF ROUTINE
DE3E                  (      drivers.asm):00102         TMON    ; TIMER ON ROUTINE
DE3E                  (      drivers.asm):00103         TMINT   ; TIMER INITIALIZATION
DE3E 39               (      drivers.asm):00104 [5]             RTS
                      (      drivers.asm):00105         
                      (      drivers.asm):00106         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00107         ;
                      (      drivers.asm):00108         ;       Console Drivers
                      (      drivers.asm):00109         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00110         ;       Terminal init routine
DE3F                  (      drivers.asm):00111         TINIT
DE3F 3402             (      drivers.asm):00112 [5+1]           PSHS    A
                      (      drivers.asm):00113         ; these are all set by CP/M prior to activating the 6809 card. If 6809 is the primary CPU, these need to be set
                      (      drivers.asm):00114         ;       LDA             #$80            ;
                      (      drivers.asm):00115         ;       STA             UART3           ; SET DLAB FLAG
                      (      drivers.asm):00116         ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (      drivers.asm):00117         ;       STA             UART0           ; save baud rate
                      (      drivers.asm):00118         ;       LDA             #00                     ;
                      (      drivers.asm):00119         ;       STA             UART1           ;
                      (      drivers.asm):00120         ;       LDA             #03                     ;
                      (      drivers.asm):00121         ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (      drivers.asm):00122         ;       STA             UART4           ;
DE41 3582             (      drivers.asm):00123 [5+3]           PULS    PC,A
                      (      drivers.asm):00124         
                      (      drivers.asm):00125         
                      (      drivers.asm):00126         ;       Terminal input routine
                      (      drivers.asm):00127         
DE43                  (      drivers.asm):00128         VINCH
DE43 7DDEB9           (      drivers.asm):00129 [7]             TST     >TAPPTR                           ; allow redirection of input from terminal
DE46 2720             (      drivers.asm):00130 [3]             BEQ     TREDIR                            ; redirection not required
DE48 AD9FDEB9         (      drivers.asm):00131 [7+5]           JSR     [TAPPTR]                          ; redirect to alternate routine
                      (      drivers.asm):00132         
                      (      drivers.asm):00133         ;       Terminal output routine
                      (      drivers.asm):00134         
DE4C                  (      drivers.asm):00135         VOUTCH
DE4C 3402             (      drivers.asm):00136 [5+1]           PSHS    a
                      (      drivers.asm):00137         !
DE4E B6FE6D           (      drivers.asm):00138 [5]             LDA     UART5                             ; READ LINE STATUS REGISTER
DE51 8420             (      drivers.asm):00139 [2]             ANDA    #$20                              ; TEST IF UART IS READY TO SEND (BIT 5)
DE53 8100             (      drivers.asm):00140 [2]             CMPA    #$00
DE55 27F7             (      drivers.asm):00141 [3]             BEQ     <                                 ; IF NOT REPEAT
DE57 3502             (      drivers.asm):00142 [5+1]           PULS    A
DE59 B7FE68           (      drivers.asm):00143 [5]             STA     UART0                             ; THEN WRITE THE CHAR TO UART
DE5C 39               (      drivers.asm):00144 [5]             RTS
                      (      drivers.asm):00145         
                      (      drivers.asm):00146         
                      (      drivers.asm):00147         ;       Terminal status check routine
                      (      drivers.asm):00148         
DE5D                  (      drivers.asm):00149         STAT:
DE5D 3402             (      drivers.asm):00150 [5+1]           PSHS    A
DE5F B6FE6D           (      drivers.asm):00151 [5]             LDA     UART5                             ; READ LINE STATUS REGISTER
DE62 8401             (      drivers.asm):00152 [2]             ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
DE64 8100             (      drivers.asm):00153 [2]             CMPA    #$00
DE66 3582             (      drivers.asm):00154 [5+3]           PULS    PC,A
                      (      drivers.asm):00155         
                      (      drivers.asm):00156         
                      (      drivers.asm):00157         ;       Monitor terminal input character with echo
                      (      drivers.asm):00158         
DE68                  (      drivers.asm):00159         TREDIR
DE68 BDDE6D           (      drivers.asm):00160 [8]             JSR     INCHNE
DE6B 20DF             (      drivers.asm):00161 [3]             BRA     VOUTCH
                      (      drivers.asm):00162         
                      (      drivers.asm):00163         
                      (      drivers.asm):00164         ;       Monitor terminal input character without echo
                      (      drivers.asm):00165         
DE6D                  (      drivers.asm):00166         INCHNE
DE6D B6FE6D           (      drivers.asm):00167 [5]             LDA     UART5                             ; READ LINE STATUS REGISTER
DE70 8401             (      drivers.asm):00168 [2]             ANDA    #$01                              ; TEST IF DATA IN RECEIVE BUFFER
DE72 8100             (      drivers.asm):00169 [2]             CMPA    #$00
DE74 27F7             (      drivers.asm):00170 [3]             BEQ     INCHNE                            ; LOOP UNTIL DATA IS READY
DE76 B6FE68           (      drivers.asm):00171 [5]             LDA     UART0                             ; THEN READ THE CHAR FROM THE UART
DE79 39               (      drivers.asm):00172 [5]             RTS
                      (      drivers.asm):00173         
                      (      drivers.asm):00174         
                      (      drivers.asm):00175         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00176         ;
                      (      drivers.asm):00177         ;       Interupt handler
                      (      drivers.asm):00178         ;_____________________________________________________________________________________________________
DE7A                  (      drivers.asm):00179         IHNDLR  ;leau    <IRQLL-4,pc        ; get address of IRQ handler linked list
DE7A 338C             (      drivers.asm):00180                 FCB     $33,$8c                           ; Why?  Because LWASM does not handle the above line correctly
DE7C 35               (      drivers.asm):00181                 FCB     IRQLL-*-5
DE7D                  (      drivers.asm):00182         CHKNXT
DE7D EE44             (      drivers.asm):00183 [5+1]           LDU     4,u                               ;  get a link
DE7F 270C             (      drivers.asm):00184 [3]             BEQ     IHDONE                            ;  end of list
                      (      drivers.asm):00185         
DE81 A6D4             (      drivers.asm):00186 [4+3]           LDA     [,u]                              ; get status from device
DE83 A546             (      drivers.asm):00187 [4+1]           BITA    6,u                               ;  did it interrupt?
DE85 27F6             (      drivers.asm):00188 [3]             BEQ     CHKNXT                            ;  no - check next
                      (      drivers.asm):00189         
DE87 10AEC4           (      drivers.asm):00190 [6+0]           LDY     ,u                                ; yes - get address of device in Y
DE8A 6ED802           (      drivers.asm):00191 [3+4]           JMP     [2,u]                             ;  go to device ISR
                      (      drivers.asm):00192         
DE8D                  (      drivers.asm):00193         IHDONE
DE8D 3B               (      drivers.asm):00194 [6+?]           RTI     return from interrupt
                      (      drivers.asm):00195         
                      (      drivers.asm):00196         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00197         ;       add a device to IRQ handler table
                      (      drivers.asm):00198         ;_____________________________________________________________________________________________________
DE8E                  (      drivers.asm):00199         ADDDEV
DE8E 3470             (      drivers.asm):00200 [5+6]           PSHS    x,y,u
DE90 8D14             (      drivers.asm):00201 [7]             BSR     SRCHLST                           ;  find link in chain
DE92 2704             (      drivers.asm):00202 [3]             BEQ     DEVARE                            ;  already exists - exit
DE94 EF04             (      drivers.asm):00203 [5+1]           STU     4,x                               ;  set link pointer in new ctl blk
DE96 AF24             (      drivers.asm):00204 [5+1]           STX     4,y                               ;  link this one into prev blk
DE98                  (      drivers.asm):00205         DEVARE
DE98 35F0             (      drivers.asm):00206 [5+8]           PULS    pc,X,Y,U
                      (      drivers.asm):00207         
                      (      drivers.asm):00208         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00209         ;       delete a device from IRQ handler table
                      (      drivers.asm):00210         ;_____________________________________________________________________________________________________
DE9A                  (      drivers.asm):00211         DELDEV
DE9A 3470             (      drivers.asm):00212 [5+6]           PSHS    x,y,u
DE9C 8D08             (      drivers.asm):00213 [7]             BSR     SRCHLST                           ;  find link in chain
DE9E 2604             (      drivers.asm):00214 [3]             BNE     NODEV                             ;  not found - exit
DEA0 AE04             (      drivers.asm):00215 [5+1]           LDX     4,x                               ;  get link from ctl blk to delete
DEA2 AF44             (      drivers.asm):00216 [5+1]           STX     4,u                               ;  set in prev block
DEA4                  (      drivers.asm):00217         NODEV
DEA4 35F0             (      drivers.asm):00218 [5+8]           PULS    pc,X,Y,U
                      (      drivers.asm):00219         
                      (      drivers.asm):00220         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00221         ;       search a linked list
                      (      drivers.asm):00222         ;
                      (      drivers.asm):00223         ;               entry: X = address of ISR control block
                      (      drivers.asm):00224         ;               exit:  Y = address of link pointer
                      (      drivers.asm):00225         ;                     CC = Z bit set if already linked
                      (      drivers.asm):00226         ;
                      (      drivers.asm):00227         ;               format of ISR control block:
                      (      drivers.asm):00228         ;
                      (      drivers.asm):00229         ;                       offset  description
                      (      drivers.asm):00230         ;                         0     address of I/O device
                      (      drivers.asm):00231         ;                         2     address of ISR
                      (      drivers.asm):00232         ;                         4     link to next ISR control block
                      (      drivers.asm):00233         ;                         6     bit mask for determining IRQ
                      (      drivers.asm):00234         ;_____________________________________________________________________________________________________
DEA6                  (      drivers.asm):00235         SRCHLST ;leau    <IRQLL-4,pcMONTH
DEA6 338C             (      drivers.asm):00236                 FCB     $33,$8c                           ; Why?  Because LWASM does not handle the above line correctly
DEA8 09               (      drivers.asm):00237                 FCB     IRQLL-*-5
DEA9                  (      drivers.asm):00238         SRCHLP
DEA9 31C4             (      drivers.asm):00239 [4+0]           LEAY    ,u
DEAB AC44             (      drivers.asm):00240 [6+1]           CMPX    4,u                               ; X = link?
DEAD 2706             (      drivers.asm):00241 [3]             BEQ     FNDENT                            ; yes - return pointer in U
                      (      drivers.asm):00242         
DEAF EE44             (      drivers.asm):00243 [5+1]           LDU     4,u                               ; no - get link in U
DEB1 26F6             (      drivers.asm):00244 [3]             BNE     SRCHLP                            ; not end of chain - loop
DEB3 1CFB             (      drivers.asm):00245 [3]             ANDCC   #$FB                              ; clear Z flag in CC
                      (      drivers.asm):00246         
DEB5                  (      drivers.asm):00247         FNDENT
DEB5 39               (      drivers.asm):00248 [5]             RTS     return - not found
                      (      drivers.asm):00249         
                      (      drivers.asm):00250         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00251         
                      (      drivers.asm):00252         
DEB6                  (      drivers.asm):00253         IRQLL
DEB6 0000             (      drivers.asm):00254                 FDB     0                                 ; pointer to first entry in the table
DEB8 01               (      drivers.asm):00255                 FCB     1
                      (      drivers.asm):00256         
DEB9                  (      drivers.asm):00257         TAPPTR
DEB9 0000             (      drivers.asm):00258                 FDB     0                                 ; no terminal input redirection
                      (      drivers.asm):00259         
                      (      drivers.asm):00260         
                      (      drivers.asm):00261         
                      (      drivers.asm):00262         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00263         ;
                      (      drivers.asm):00264         ;       Disk Driver Dispatchers
                      (      drivers.asm):00265         ;
                      (      drivers.asm):00266         ;       This code checks for the current drive type and dispatches the correct
                      (      drivers.asm):00267         ;       driver for the device
                      (      drivers.asm):00268         ;
                      (      drivers.asm):00269         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00270         
                      (      drivers.asm):00271         
                      (      drivers.asm):00272         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00273         ;   READ    This routine reads the specified sector into memory at the
                      (      drivers.asm):00274         ;           specified address. This routine should perform a seek
                      (      drivers.asm):00275         ;           operation if necessary. A sector is 256 bytes in length.
                      (      drivers.asm):00276         ;
                      (      drivers.asm):00277         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (      drivers.asm):00278         ;                   (A) = Track Number
                      (      drivers.asm):00279         ;                   (B) = Sector Number
                      (      drivers.asm):00280         ;
                      (      drivers.asm):00281         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00282         ;                   (A) May be destroyed
                      (      drivers.asm):00283         ;                   (B) = Error condition
                      (      drivers.asm):00284         ;                   (Z) = 1 if no error
                      (      drivers.asm):00285         ;                       = 0 if an error
                      (      drivers.asm):00286         ;_____________________________________________________________________________________________________
DEBB                  (      drivers.asm):00287         DREAD
DEBB 3402             (      drivers.asm):00288 [5+1]           PSHS    A
DEBD B6DE1F           (      drivers.asm):00289 [5]             LDA     CURDRVTYP
DEC0 8101             (      drivers.asm):00290 [2]             CMPA    #$01
DEC2 2709             (      drivers.asm):00291 [3]             BEQ     READFLOPPY
DEC4 8102             (      drivers.asm):00292 [2]             CMPA    #$02
DEC6 270A             (      drivers.asm):00293 [3]             BEQ     READIDE
DEC8                  (      drivers.asm):00294         READERR:
DEC8 C61F             (      drivers.asm):00295 [2]             LDB     #$1F
DECA 57               (      drivers.asm):00296 [2]             ASRB
DECB 3582             (      drivers.asm):00297 [5+3]           PULS    PC,A
DECD                  (      drivers.asm):00298         READFLOPPY:
DECD 3502             (      drivers.asm):00299 [5+1]           PULS    A
DECF 7EE4F9           (      drivers.asm):00300 [4]             JMP     FL_READ_SECTOR
DED2                  (      drivers.asm):00301         READIDE:
DED2 3502             (      drivers.asm):00302 [5+1]           PULS    A
DED4 7EE08E           (      drivers.asm):00303 [4]             JMP     IDE_READ_SECTOR
                      (      drivers.asm):00304         
                      (      drivers.asm):00305         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00306         ;   WRITE   This routine writes the information from the specifed memory
                      (      drivers.asm):00307         ;           buffer area to the disk sector specified. This routine should
                      (      drivers.asm):00308         ;           perform a seek operation if necessary. A sector is 256 bytes
                      (      drivers.asm):00309         ;           in length.
                      (      drivers.asm):00310         ;
                      (      drivers.asm):00311         ;           ENTRY - (X) = Address of 256 memory buffer containing data
                      (      drivers.asm):00312         ;                         to be written to disk
                      (      drivers.asm):00313         ;                   (A) = Track Number
                      (      drivers.asm):00314         ;                   (B) = Sector Number
                      (      drivers.asm):00315         ;
                      (      drivers.asm):00316         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00317         ;                   (A) May be destroyed
                      (      drivers.asm):00318         ;                   (B) = Error condition
                      (      drivers.asm):00319         ;                   (Z) = 1 if no error
                      (      drivers.asm):00320         ;                       = 0 if an error
                      (      drivers.asm):00321         ;_____________________________________________________________________________________________________
DED7                  (      drivers.asm):00322         DWRITE
DED7 3402             (      drivers.asm):00323 [5+1]           PSHS    A
DED9 B6DE1F           (      drivers.asm):00324 [5]             LDA     CURDRVTYP
DEDC 8101             (      drivers.asm):00325 [2]             CMPA    #$01
DEDE 2709             (      drivers.asm):00326 [3]             BEQ     WRITEFLOPPY
DEE0 8102             (      drivers.asm):00327 [2]             CMPA    #$02
DEE2 270A             (      drivers.asm):00328 [3]             BEQ     WRITEIDE
DEE4                  (      drivers.asm):00329         WRITEERR:
DEE4 C61F             (      drivers.asm):00330 [2]             LDB     #$1F
DEE6 57               (      drivers.asm):00331 [2]             ASRB
DEE7 3582             (      drivers.asm):00332 [5+3]           PULS    PC,A
DEE9                  (      drivers.asm):00333         WRITEFLOPPY:
DEE9 3502             (      drivers.asm):00334 [5+1]           PULS    A
DEEB 7EE665           (      drivers.asm):00335 [4]             JMP     FL_WRITE_SECTOR
                      (      drivers.asm):00336         
DEEE                  (      drivers.asm):00337         WRITEIDE:
DEEE 3502             (      drivers.asm):00338 [5+1]           PULS    A
DEF0 7EE10F           (      drivers.asm):00339 [4]             JMP     IDE_WRITE_SECTOR
                      (      drivers.asm):00340         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00341         ;   VERIFY  The sector just written to the disk is to be verified to
                      (      drivers.asm):00342         ;           determine if there are CRC errors. No seek is required as
                      (      drivers.asm):00343         ;           this routine will only be called immediately after a write
                      (      drivers.asm):00344         ;           single sector operation.
                      (      drivers.asm):00345         ;
                      (      drivers.asm):00346         ;           ENTRY - No entry parameters
                      (      drivers.asm):00347         ;
                      (      drivers.asm):00348         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00349         ;                   (A) May be destroyed
                      (      drivers.asm):00350         ;                   (B) = Error condition
                      (      drivers.asm):00351         ;                   (Z) = 1 if no error
                      (      drivers.asm):00352         ;                       = 0 if an error
                      (      drivers.asm):00353         ;_____________________________________________________________________________________________________
DEF3                  (      drivers.asm):00354         DVERIFY
DEF3 B6DE1F           (      drivers.asm):00355 [5]             LDA     CURDRVTYP
DEF6 8101             (      drivers.asm):00356 [2]             CMPA    #$01
DEF8 2708             (      drivers.asm):00357 [3]             BEQ     VERIFYFLOPPY
DEFA 8102             (      drivers.asm):00358 [2]             CMPA    #$02
DEFC 2706             (      drivers.asm):00359 [3]             BEQ     VERIFYIDE
DEFE                  (      drivers.asm):00360         VERIFYERR:
DEFE C61F             (      drivers.asm):00361 [2]             LDB     #$1F
DF00 57               (      drivers.asm):00362 [2]             ASRB
DF01 39               (      drivers.asm):00363 [5]             RTS
DF02                  (      drivers.asm):00364         VERIFYFLOPPY:
DF02 20FA             (      drivers.asm):00365 [3]             BRA     VERIFYERR
DF04                  (      drivers.asm):00366         VERIFYIDE:
DF04 C600             (      drivers.asm):00367 [2]             LDB     #$00
DF06 39               (      drivers.asm):00368 [5]             RTS
                      (      drivers.asm):00369         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00370         ;   SEEK    Seeks to the track specified in the 'A' accumulator. In
                      (      drivers.asm):00371         ;           double-sided systems, this routine should also select the
                      (      drivers.asm):00372         ;           correct side depending on the sector number supplied in 'B'.
                      (      drivers.asm):00373         ;
                      (      drivers.asm):00374         ;           ENTRY - (A) = Track Number
                      (      drivers.asm):00375         ;                   (B) = Sector Number
                      (      drivers.asm):00376         ;
                      (      drivers.asm):00377         ;           EXIT -  (X) May be destroyed (See text)
                      (      drivers.asm):00378         ;                   (A) May be destroyed (See text)
                      (      drivers.asm):00379         ;                   (B) = Error condition
                      (      drivers.asm):00380         ;                   (Z) = 1 if no error
                      (      drivers.asm):00381         ;                       = 0 if an error
                      (      drivers.asm):00382         ;_____________________________________________________________________________________________________
DF07                  (      drivers.asm):00383         DSEEK
DF07 B6DE1F           (      drivers.asm):00384 [5]             LDA     CURDRVTYP
DF0A 8101             (      drivers.asm):00385 [2]             CMPA    #$01
DF0C 2708             (      drivers.asm):00386 [3]             BEQ     SEEKFLOPPY
DF0E 8102             (      drivers.asm):00387 [2]             CMPA    #$02
DF10 2706             (      drivers.asm):00388 [3]             BEQ     SEEKIDE
DF12                  (      drivers.asm):00389         SEEKERR:
DF12 C61F             (      drivers.asm):00390 [2]             LDB     #$1F
DF14 57               (      drivers.asm):00391 [2]             ASRB
DF15 39               (      drivers.asm):00392 [5]             RTS
DF16                  (      drivers.asm):00393         SEEKFLOPPY:
DF16 20FA             (      drivers.asm):00394 [3]             BRA     SEEKERR
DF18                  (      drivers.asm):00395         SEEKIDE:
DF18 C600             (      drivers.asm):00396 [2]             LDB     #$00
DF1A 39               (      drivers.asm):00397 [5]             RTS
                      (      drivers.asm):00398         
                      (      drivers.asm):00399         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00400         ;   INIT    This routine performs any necessary initialization of the
                      (      drivers.asm):00401         ;           drivers during cold start (at boot time). Actually, any
                      (      drivers.asm):00402         ;           operation which must be done when the system is first booted
                      (      drivers.asm):00403         ;           can be done here.
                      (      drivers.asm):00404         ;
                      (      drivers.asm):00405         ;           ENTRY - No parameters
                      (      drivers.asm):00406         ;
                      (      drivers.asm):00407         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00408         ;_____________________________________________________________________________________________________
DF1B                  (      drivers.asm):00409         DCINIT
DF1B BDDF83           (      drivers.asm):00410 [8]             JSR     PPIDE_INIT
                      (      drivers.asm):00411                 IF      USEDSKYNG = 1
DF1E BDE9BF           (      drivers.asm):00412 [8]                 JSR     DSKY_INIT
                      (      drivers.asm):00413                     ENDC
DF21 BDE383           (      drivers.asm):00414 [8]                 JSR     FL_SETUP
DF24 39               (      drivers.asm):00415 [5]                 RTS
                      (      drivers.asm):00416         
                      (      drivers.asm):00417         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00418         ;   WARM    Performs any necessary functions during FLEX warmstart. FLEX
                      (      drivers.asm):00419         ;           calls this routine each time it goes thru the warm start
                      (      drivers.asm):00420         ;           procedure (after every command). As an example, some
                      (      drivers.asm):00421         ;           controllers use PIA's for communication with the processor.
                      (      drivers.asm):00422         ;           If FLEX is exited with a CPU reset, these PIA's may also be
                      (      drivers.asm):00423         ;           reset such that the controller would not function properly
                      (      drivers.asm):00424         ;           upon a jump to the FLEX warm start entry point. This routine
                      (      drivers.asm):00425         ;           could re-initialize the PIA when the warm start was executed.
                      (      drivers.asm):00426         ;
                      (      drivers.asm):00427         ;           ENTRY - No parameters
                      (      drivers.asm):00428         ;
                      (      drivers.asm):00429         ;           EXIT - A, B, X, Y, and U may be destroyed
                      (      drivers.asm):00430         ;_____________________________________________________________________________________________________
DF25                  (      drivers.asm):00431         DWARM
DF25 39               (      drivers.asm):00432 [5]                 RTS
                      (      drivers.asm):00433         
                      (      drivers.asm):00434         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00435         ;   RESTORE A restore operation (also known as a "seek to track 00") is to
                      (      drivers.asm):00436         ;           be performed on the specified drive. The drive is specified
                      (      drivers.asm):00437         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00438         ;           that the drive number is the 4th byte of the FCB. This
                      (      drivers.asm):00439         ;           routine should select the drive before executing the restore
                      (      drivers.asm):00440         ;           operation.
                      (      drivers.asm):00441         ;
                      (      drivers.asm):00442         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00443         ;
                      (      drivers.asm):00444         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00445         ;                   (A) May be destroyed
                      (      drivers.asm):00446         ;                   (B) = Error condition
                      (      drivers.asm):00447         ;                   (Z) = 1 if no error
                      (      drivers.asm):00448         ;                       = 0 if an error
                      (      drivers.asm):00449         ;_____________________________________________________________________________________________________
DF26                  (      drivers.asm):00450         DRESTORE
DF26 8D14             (      drivers.asm):00451 [7]                 BSR     DDRIVE
DF28 B6DE1F           (      drivers.asm):00452 [5]                 LDA     CURDRVTYP
DF2B 8101             (      drivers.asm):00453 [2]                 CMPA    #$01
DF2D 2708             (      drivers.asm):00454 [3]                 BEQ     RESTOREFLOPPY
DF2F 8102             (      drivers.asm):00455 [2]                 CMPA    #$02
DF31 2706             (      drivers.asm):00456 [3]                 BEQ     RESTOREIDE
DF33                  (      drivers.asm):00457         RESTOREERR:
DF33 C61F             (      drivers.asm):00458 [2]                 LDB     #$1F
DF35 57               (      drivers.asm):00459 [2]                 ASRB
DF36 39               (      drivers.asm):00460 [5]                 RTS
DF37                  (      drivers.asm):00461         RESTOREFLOPPY:
DF37 20FA             (      drivers.asm):00462 [3]                 BRA     RESTOREERR
DF39                  (      drivers.asm):00463         RESTOREIDE:
DF39 C600             (      drivers.asm):00464 [2]                 LDB     #$00
DF3B 39               (      drivers.asm):00465 [5]                 RTS
                      (      drivers.asm):00466         
                      (      drivers.asm):00467         
                      (      drivers.asm):00468         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00469         ;   DRIVE   The specified drive is to be selected. The drive is specified
                      (      drivers.asm):00470         ;           in the FCB pointed to by the contents of the X register. Note
                      (      drivers.asm):00471         ;           that the drive number is the 4th byte of the FCB.
                      (      drivers.asm):00472         ;
                      (      drivers.asm):00473         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00474         ;
                      (      drivers.asm):00475         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00476         ;                   (A) May be destroyed
                      (      drivers.asm):00477         ;                   (B) = $0F if non-existent drive
                      (      drivers.asm):00478         ;                       = Error condition otherwise
                      (      drivers.asm):00479         ;                   (Z) = 1 if no error
                      (      drivers.asm):00480         ;                       = 0 if an error
                      (      drivers.asm):00481         ;                   (C) = 0 if no error
                      (      drivers.asm):00482         ;                       = 1 if an error
                      (      drivers.asm):00483         ;_____________________________________________________________________________________________________
DF3C                  (      drivers.asm):00484         DDRIVE:
DF3C A603             (      drivers.asm):00485 [4+1]               LDA     3,X                               ; DETERMINE IF DRIVE#>4, IF SO SET ERROR AND EXIT.
DF3E 8104             (      drivers.asm):00486 [2]                 CMPA    #4
DF40 2504             (      drivers.asm):00487 [3]                 BCS     DRIVE1
DF42                  (      drivers.asm):00488         DRIVEERR:
DF42 C61F             (      drivers.asm):00489 [2]                 LDB     #$1F
DF44 57               (      drivers.asm):00490 [2]                 ASRB
DF45 39               (      drivers.asm):00491 [5]                 RTS
                      (      drivers.asm):00492         
DF46                  (      drivers.asm):00493         DRIVE1
DF46 8EDE23           (      drivers.asm):00494 [3]                 LDX     #DRVTYPES
DF49 3086             (      drivers.asm):00495 [4+1]               LEAX    A,X                               ; GET DRIVE ENTRY FOR SELECTED DRIVE
DF4B E684             (      drivers.asm):00496 [4+0]               LDB     ,X
DF4D C101             (      drivers.asm):00497 [2]                 CMPB    #$01                              ; IF $01, OK
DF4F 2706             (      drivers.asm):00498 [3]                 BEQ     >
DF51 C102             (      drivers.asm):00499 [2]                 CMPB    #$02                              ; IF $02, OK
DF53 2702             (      drivers.asm):00500 [3]                 BEQ     >
DF55 20EB             (      drivers.asm):00501 [3]                 BRA     DRIVEERR
                      (      drivers.asm):00502         !
DF57 F7DE1F           (      drivers.asm):00503 [5]                 STB     CURDRVTYP
DF5A B7DE1E           (      drivers.asm):00504 [5]                 STA     CURDRV
DF5D 8EDE27           (      drivers.asm):00505 [3]                 LDX     #DRVADDRESS
DF60 3086             (      drivers.asm):00506 [4+1]               LEAX    A,X                               ; GET DRIVE ADDRESS FOR SELECTED DRIVE
DF62 E684             (      drivers.asm):00507 [4+0]               LDB     ,X
DF64 F7DE20           (      drivers.asm):00508 [5]                 STB     CURDRVADDRESS
DF67 8EDE2B           (      drivers.asm):00509 [3]                 LDX     #DRVSLICE
DF6A 48               (      drivers.asm):00510 [2]                 LSLA                                      ; THIS ONE IS A WORD, NOT BYTE LOOKUP
DF6B 3086             (      drivers.asm):00511 [4+1]               LEAX    A,X                               ; GET DRIVE SLICE FOR SELECTED DRIVE
DF6D E684             (      drivers.asm):00512 [4+0]               LDB     ,X
DF6F F7DE21           (      drivers.asm):00513 [5]                 STB     CURDRVSLICE
DF72 3001             (      drivers.asm):00514 [4+1]               LEAX    1,X                               ; GET DRIVE SLICE FOR SELECTED DRIVE
DF74 E684             (      drivers.asm):00515 [4+0]               LDB     ,X
DF76 F7DE22           (      drivers.asm):00516 [5]                 STB     CURDRVSLICE+1
DF79 C600             (      drivers.asm):00517 [2]                 LDB     #$00
DF7B 39               (      drivers.asm):00518 [5]                 RTS
                      (      drivers.asm):00519         
                      (      drivers.asm):00520         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00521         ;   CHKRDY  Check for a drive ready condition. The drive number is found
                      (      drivers.asm):00522         ;           in the specified FCB (at 3,X). If the user's controller turns
                      (      drivers.asm):00523         ;           the drive motors off after some time delay, this routine
                      (      drivers.asm):00524         ;           should first check for a drive ready condition and if it is
                      (      drivers.asm):00525         ;           not ready, should delay long enough for the motors to come up
                      (      drivers.asm):00526         ;           to speed, then check again. This delay should be done ONLY if
                      (      drivers.asm):00527         ;           not ready on the first try and ONLY if necessary for the
                      (      drivers.asm):00528         ;           particular drives and controller! If the hardware always
                      (      drivers.asm):00529         ;           leaves the drive motors on, this routine should perform a
                      (      drivers.asm):00530         ;           single check for drive ready and immediately return the
                      (      drivers.asm):00531         ;           resulting status. Systems which do not have the ability to
                      (      drivers.asm):00532         ;           check for a drive ready condition should simply always return
                      (      drivers.asm):00533         ;           a ready status if the drive number is valid.
                      (      drivers.asm):00534         ;
                      (      drivers.asm):00535         ;           ENTRY - (X) = FCB address (3,X contains drive number)
                      (      drivers.asm):00536         ;
                      (      drivers.asm):00537         ;           EXIT -  (X) May be destroyed
                      (      drivers.asm):00538         ;                   (A) May be destroyed
                      (      drivers.asm):00539         ;                   (B) = Error condition
                      (      drivers.asm):00540         ;                   (Z) = 1 if drive ready
                      (      drivers.asm):00541         ;                       = 0 if not ready
                      (      drivers.asm):00542         ;                   (C) = 0 if drive ready
                      (      drivers.asm):00543         ;                       = 1 if not ready
                      (      drivers.asm):00544         ;_____________________________________________________________________________________________________
DF7C                  (      drivers.asm):00545         DCHKRDY
DF7C 39               (      drivers.asm):00546 [5]                 RTS
                      (      drivers.asm):00547         
                      (      drivers.asm):00548         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00549         ;   QUICK   This routine performs a "quick" drive ready check. Its
                      (      drivers.asm):00550         ;           function is exactly like the CHKRDY routine above except that
                      (      drivers.asm):00551         ;           no delay should be done. If the drive does not give a ready
                      (      drivers.asm):00552         ;           condition on the first check, a not ready condition is
                      (      drivers.asm):00553         ;           immediately returned. Entry and exit are as above.
                      (      drivers.asm):00554         ;_____________________________________________________________________________________________________
DF7D                  (      drivers.asm):00555         DQUICK
DF7D 39               (      drivers.asm):00556 [5]                 RTS
                      (      drivers.asm):00557         
                      (      drivers.asm):00558         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00559                     INCLUDE "flexidedrv.asm"
                      (   flexidedrv.asm):00001         ;__IDE DRIVERS___________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00002         ;
                      (   flexidedrv.asm):00003         ;       NHYODYNE FLEX09 IDE DISK DRIVERS FOR Z80PPIDE CARD
                      (   flexidedrv.asm):00004         ;
                      (   flexidedrv.asm):00005         ;       ENTRY POINTS:
                      (   flexidedrv.asm):00006         ;               PPIDE_INIT      - CALLED DURING OS INIT
                      (   flexidedrv.asm):00007         ;               IDE_READ_SECTOR - READ A SECTOR FROM DRIVE
                      (   flexidedrv.asm):00008         ;               IDE_WRITE_SECTOR- WRITE A SECTOR TO DRIVE
                      (   flexidedrv.asm):00009         ;________________________________________________________________________________________________________________________________
                      (   flexidedrv.asm):00010         ;
     FE60             (   flexidedrv.asm):00011         PPIDE_PPI       = $FE60                           ; PORT A
                      (   flexidedrv.asm):00012         ;
     FE60             (   flexidedrv.asm):00013         PPIDELO         = PPIDE_PPI+0                     ; LSB
     FE61             (   flexidedrv.asm):00014         PPIDEHI         = PPIDE_PPI+1                     ; MSB
     FE62             (   flexidedrv.asm):00015         PPIDECNTRL      = PPIDE_PPI+2                     ; CONTROL SIGNALS
     FE63             (   flexidedrv.asm):00016         PPIDEPPIC       = PPIDE_PPI+3                     ; CONTROL BYTE PPI 82C55
                      (   flexidedrv.asm):00017         
     0001             (   flexidedrv.asm):00018         PPIDE_A0_LINE   = $01                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0002             (   flexidedrv.asm):00019         PPIDE_A1_LINE   = $02                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0004             (   flexidedrv.asm):00020         PPIDE_A2_LINE   = $04                             ;DIRECT FROM 8255 TO IDE INTERFACE
     0008             (   flexidedrv.asm):00021         PPIDE_CS0_LINE  = $08                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0010             (   flexidedrv.asm):00022         PPIDE_CS1_LINE  = $10                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0020             (   flexidedrv.asm):00023         PPIDE_WR_LINE   = $20                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0040             (   flexidedrv.asm):00024         PPIDE_RD_LINE   = $40                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
     0080             (   flexidedrv.asm):00025         PPIDE_RST_LINE  = $80                             ;INVERTER BETWEEN 8255 AND IDE INTERFACE
                      (   flexidedrv.asm):00026         
     0008             (   flexidedrv.asm):00027         PPIDE_DATA      = PPIDE_CS0_LINE
     0009             (   flexidedrv.asm):00028         PPIDE_ERR       = PPIDE_CS0_LINE+PPIDE_A0_LINE
     000A             (   flexidedrv.asm):00029         PPIDE_SEC_CNT   = PPIDE_CS0_LINE+PPIDE_A1_LINE
     000B             (   flexidedrv.asm):00030         PPIDE_LBALOW    = PPIDE_CS0_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000C             (   flexidedrv.asm):00031         PPIDE_LBAMID    = PPIDE_CS0_LINE+PPIDE_A2_LINE
     000D             (   flexidedrv.asm):00032         PPIDE_LBAHI     = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A0_LINE
     000E             (   flexidedrv.asm):00033         PPIDE_DEVICE    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     000F             (   flexidedrv.asm):00034         PPIDE_COMMAND   = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     000F             (   flexidedrv.asm):00035         PPIDE_STATUS    = PPIDE_CS0_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
     0016             (   flexidedrv.asm):00036         PPIDE_CONTROL   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE
     0017             (   flexidedrv.asm):00037         PPIDE_ASTATUS   = PPIDE_CS1_LINE+PPIDE_A2_LINE+PPIDE_A1_LINE+PPIDE_A0_LINE
                      (   flexidedrv.asm):00038         
                      (   flexidedrv.asm):00039         
                      (   flexidedrv.asm):00040         ;IDE COMMAND CONSTANTS.  THESE SHOULD NEVER CHANGE.
     0010             (   flexidedrv.asm):00041         PPIDE_CMD_RECAL = $10
     0020             (   flexidedrv.asm):00042         PPIDE_CMD_READ  = $20
     0030             (   flexidedrv.asm):00043         PPIDE_CMD_WRITE = $30
     0091             (   flexidedrv.asm):00044         PPIDE_CMD_INIT  = $91
     00EC             (   flexidedrv.asm):00045         PPIDE_CMD_ID    = $EC
     00E0             (   flexidedrv.asm):00046         PPIDE_CMD_SPINDOWN = $E0
     00E1             (   flexidedrv.asm):00047         PPIDE_CMD_SPINUP = $E1
                      (   flexidedrv.asm):00048         
                      (   flexidedrv.asm):00049         
     0092             (   flexidedrv.asm):00050         PPRD_IDE_8255   = %10010010                       ;IDE_8255_CTL OUT, IDE_8255_LSB/MSB INPUT
     0080             (   flexidedrv.asm):00051         PPWR_IDE_8255   = %10000000                       ;ALL THREE PORTS OUTPUT
                      (   flexidedrv.asm):00052         
                      (   flexidedrv.asm):00053         
DF7E                  (   flexidedrv.asm):00054         PPIDEINDEX:
DF7E 00               (   flexidedrv.asm):00055                 .BYTE   $00
DF7F                  (   flexidedrv.asm):00056         PPIDETIMEOUT:
DF7F 0000             (   flexidedrv.asm):00057                 .BYTE   $00,$00
DF81                  (   flexidedrv.asm):00058         PPIDEWORKVAR:
DF81 0000             (   flexidedrv.asm):00059                 .BYTE   $00,$00
                      (   flexidedrv.asm):00060         
                      (   flexidedrv.asm):00061         ;__PPIDE_INIT_________________________________________________________________________________________
                      (   flexidedrv.asm):00062         ;
                      (   flexidedrv.asm):00063         ;  INIT AND DISPLAY IDE INFO
                      (   flexidedrv.asm):00064         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00065         ;
DF83                  (   flexidedrv.asm):00066         PPIDE_INIT:
DF83 BDCEB1           (   flexidedrv.asm):00067 [8]             JSR     >PCRLF                            ; AND CRLF
DF86 BDCEB1           (   flexidedrv.asm):00068 [8]             JSR     >PCRLF                            ; AND CRLF
DF89 8EE33B           (   flexidedrv.asm):00069 [3]             LDX     #MESSAGE1
DF8C BDCE7B           (   flexidedrv.asm):00070 [8]             JSR     >PDATA1                           ; DO PROMPT
DF8F BDCEB1           (   flexidedrv.asm):00071 [8]             JSR     >PCRLF                            ; AND CRLF
DF92 BDE080           (   flexidedrv.asm):00072 [8]             JSR     IDE_PPIDETECT                     ; TEST FOR PPI HARDWARE
DF95 261D             (   flexidedrv.asm):00073 [3]             BNE     IDE_ABORT                         ; BAIL OUT IF NOT THERE
                      (   flexidedrv.asm):00074         ;
DF97 8EE343           (   flexidedrv.asm):00075 [3]             LDX     #MESSAGE2
DF9A BDCE7B           (   flexidedrv.asm):00076 [8]             JSR     >PDATA1                           ; DO PROMPT
DF9D CCFE60           (   flexidedrv.asm):00077 [3]             LDD     #PPIDE_PPI                        ; GET BASE PORT
DFA0 FDDF81           (   flexidedrv.asm):00078 [6]             STD     PPIDEWORKVAR
DFA3 8EDF81           (   flexidedrv.asm):00079 [3]             LDX     #PPIDEWORKVAR
DFA6 BDCFCC           (   flexidedrv.asm):00080 [8]             JSR     OUTADR                            ; PRINT BASE PORT
                      (   flexidedrv.asm):00081         ;
DFA9 BDE183           (   flexidedrv.asm):00082 [8]             JSR     PPIDE_RESET                       ; RESET THE BUS
DFAC BDDFDA           (   flexidedrv.asm):00083 [8]             JSR     PPIDE_PROBE                       ; DETECT AN ATA DEVICE, ABORT IF NOT FOUND
DFAF 2503             (   flexidedrv.asm):00084 [3]             BCS     IDE_ABORT
DFB1 7EDFBD           (   flexidedrv.asm):00085 [4]             JMP     IDE_PRINT_INFO
DFB4                  (   flexidedrv.asm):00086         IDE_ABORT:
DFB4 8EE34A           (   flexidedrv.asm):00087 [3]             LDX     #MESSAGE3
DFB7 BDCE7B           (   flexidedrv.asm):00088 [8]             JSR     >PDATA1                           ; DO PROMPT
DFBA 7EDFD6           (   flexidedrv.asm):00089 [4]             JMP     IDE_INITA
DFBD                  (   flexidedrv.asm):00090         IDE_PRINT_INFO:
DFBD BDCEB1           (   flexidedrv.asm):00091 [8]             JSR     >PCRLF                            ; AND CRLF
DFC0 8EE357           (   flexidedrv.asm):00092 [3]             LDX     #MESSAGE4
DFC3 BDCE7B           (   flexidedrv.asm):00093 [8]             JSR     >PDATA1                           ; DO PROMPT
DFC6 8600             (   flexidedrv.asm):00094 [2]             LDA     #$00
DFC8 BDE025           (   flexidedrv.asm):00095 [8]             JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
DFCB 8EE368           (   flexidedrv.asm):00096 [3]             LDX     #MESSAGE5
DFCE BDCE7B           (   flexidedrv.asm):00097 [8]             JSR     >PDATA1                           ; DO PROMPT
DFD1 8601             (   flexidedrv.asm):00098 [2]             LDA     #$01
DFD3 BDE025           (   flexidedrv.asm):00099 [8]             JSR     IDE_READ_INFO                     ; GET DRIVE INFO, ABORT IF ERROR
DFD6                  (   flexidedrv.asm):00100         IDE_INITA:
DFD6 BDCEB1           (   flexidedrv.asm):00101 [8]             JSR     >PCRLF                            ; AND CRLF
DFD9 39               (   flexidedrv.asm):00102 [5]             RTS                                       ; DONE
                      (   flexidedrv.asm):00103         ;
                      (   flexidedrv.asm):00104         ;__PPIDE_PROBE_______________________________________________________________________________________
                      (   flexidedrv.asm):00105         ;
                      (   flexidedrv.asm):00106         ;  PROBE FOR IDE HARDWARE
                      (   flexidedrv.asm):00107         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00108         ;
DFDA                  (   flexidedrv.asm):00109         PPIDE_PROBE:
                      (   flexidedrv.asm):00110         ;
                      (   flexidedrv.asm):00111         ; BELOW TESTS FOR EXISTENCE OF AN IDE CONTROLLER ON THE
                      (   flexidedrv.asm):00112         ; PPIDE INTERFACE.  WE WRITE A VALUE OF ZERO FIRST SO THAT
                      (   flexidedrv.asm):00113         ; THE PPI BUS HOLD WILL RETURN A VALUE OF ZERO IF THERE IS
                      (   flexidedrv.asm):00114         ; NOTHING CONNECTED TO PPI PORT A.  THEN WE READ THE STATUS
                      (   flexidedrv.asm):00115         ; REGISTER.  IF AN IDE CONTROLLER IS THERE, IT SHOULD ALWAYS
                      (   flexidedrv.asm):00116         ; RETURN SOMETHING OTHER THAN ZERO.  IF AN IDE CONTROLLER IS
                      (   flexidedrv.asm):00117         ; THERE, THEN THE VALUE WRITTEN TO PPI PORT A IS IGNORED
                      (   flexidedrv.asm):00118         ; BECAUSE THE WRITE SIGNAL IS NEVER PULSED.
                      (   flexidedrv.asm):00119         
DFDA 8600             (   flexidedrv.asm):00120 [2]             LDA     #$00
DFDC B7FE60           (   flexidedrv.asm):00121 [5]             STA     PPIDELO                           ; PPI PORT A, DATALO
                      (   flexidedrv.asm):00122         
DFDF BDE1B1           (   flexidedrv.asm):00123 [8]             JSR     IDE_WAIT_NOT_BUSY                 ; WAIT FOR BUSY TO CLEAR
DFE2 253E             (   flexidedrv.asm):00124 [3]             BCS     PPIDE_PROBE_FAIL                  ; IF TIMEOUT, REPORT NO IDE PRESENT
DFE4 860F             (   flexidedrv.asm):00125 [2]             LDA     #PPIDE_STATUS                     ; GET STATUS
DFE6 BDE2CA           (   flexidedrv.asm):00126 [8]             JSR     IDE_READ
DFE9 1F18             (   flexidedrv.asm):00127 [6]             TFR     X,A
DFEB 8440             (   flexidedrv.asm):00128 [2]             ANDA    #%01000000
DFED 8100             (   flexidedrv.asm):00129 [2]             CMPA    #$00
DFEF 2731             (   flexidedrv.asm):00130 [3]             BEQ     PPIDE_PROBE_FAIL                  ; IF NOT RDY BIT (BIT 6) THEN REPORT NO IDE PRESENT
                      (   flexidedrv.asm):00131         
                      (   flexidedrv.asm):00132         ; CHECK SIGNATURE
DFF1 860A             (   flexidedrv.asm):00133 [2]             LDA     #PPIDE_SEC_CNT
DFF3 BDE2CA           (   flexidedrv.asm):00134 [8]             JSR     IDE_READ
DFF6 1F18             (   flexidedrv.asm):00135 [6]             TFR     X,A
DFF8 8101             (   flexidedrv.asm):00136 [2]             CMPA    #$01
DFFA 2626             (   flexidedrv.asm):00137 [3]             BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
DFFC 860B             (   flexidedrv.asm):00138 [2]             LDA     #PPIDE_LBALOW
DFFE BDE2CA           (   flexidedrv.asm):00139 [8]             JSR     IDE_READ
E001 1F18             (   flexidedrv.asm):00140 [6]             TFR     X,A
E003 8101             (   flexidedrv.asm):00141 [2]             CMPA    #$01
E005 261B             (   flexidedrv.asm):00142 [3]             BNE     PPIDE_PROBE_FAIL                  ; IF NOT '01' THEN REPORT NO IDE PRESENT
E007 860C             (   flexidedrv.asm):00143 [2]             LDA     #PPIDE_LBAMID
E009 BDE2CA           (   flexidedrv.asm):00144 [8]             JSR     IDE_READ
E00C 1F18             (   flexidedrv.asm):00145 [6]             TFR     X,A
E00E 8100             (   flexidedrv.asm):00146 [2]             CMPA    #$00
E010 2610             (   flexidedrv.asm):00147 [3]             BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
E012 860D             (   flexidedrv.asm):00148 [2]             LDA     #PPIDE_LBAHI
E014 BDE2CA           (   flexidedrv.asm):00149 [8]             JSR     IDE_READ
E017 1F18             (   flexidedrv.asm):00150 [6]             TFR     X,A
E019 8100             (   flexidedrv.asm):00151 [2]             CMPA    #$00
E01B 2605             (   flexidedrv.asm):00152 [3]             BNE     PPIDE_PROBE_FAIL                  ; IF NOT '00' THEN REPORT NO IDE PRESENT
E01D 1CFE             (   flexidedrv.asm):00153 [3]             CLC
E01F 7EE024           (   flexidedrv.asm):00154 [4]             JMP     PPIDE_PROBE_SUCCESS
E022                  (   flexidedrv.asm):00155         PPIDE_PROBE_FAIL:
E022 1A01             (   flexidedrv.asm):00156 [3]             SEC
E024                  (   flexidedrv.asm):00157         PPIDE_PROBE_SUCCESS:
E024 39               (   flexidedrv.asm):00158 [5]             RTS                                       ; DONE, NOTE THAT A=0 AND Z IS SET
                      (   flexidedrv.asm):00159         
                      (   flexidedrv.asm):00160         ;;*__IDE_READ_INFO___________________________________________________________________________________
                      (   flexidedrv.asm):00161         ;;*
                      (   flexidedrv.asm):00162         ;;*  READ IDE INFORMATION
                      (   flexidedrv.asm):00163         ;;*     CARRY SET ON ERROR
                      (   flexidedrv.asm):00164         ;;*     A=MST/SLV
                      (   flexidedrv.asm):00165         ;;*____________________________________________________________________________________________________
E025                  (   flexidedrv.asm):00166         IDE_READ_INFO:
                      (   flexidedrv.asm):00167         ; SET DRIVE BIT
E025 8401             (   flexidedrv.asm):00168 [2]             ANDA    #$01                              ; ONLY WANT THE 1 BIT (MST/SLV)
E027 48               (   flexidedrv.asm):00169 [2]             ASLA                                      ; SHIFT 4
E028 48               (   flexidedrv.asm):00170 [2]             ASLA                                      ;
E029 48               (   flexidedrv.asm):00171 [2]             ASLA                                      ;
E02A 48               (   flexidedrv.asm):00172 [2]             ASLA                                      ;
E02B 8AE0             (   flexidedrv.asm):00173 [2]             ORA     #$E0                              ; E0=MST  F0=SLV
E02D 1F89             (   flexidedrv.asm):00174 [6]             TFR     A,B
E02F 8600             (   flexidedrv.asm):00175 [2]             LDA     #$00
E031 1F01             (   flexidedrv.asm):00176 [6]             TFR     D,X
E033 860E             (   flexidedrv.asm):00177 [2]             LDA     #PPIDE_DEVICE
E035 BDE2EF           (   flexidedrv.asm):00178 [8]             JSR     IDE_WRITE
E038 BDE1B1           (   flexidedrv.asm):00179 [8]             JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
E03B 2531             (   flexidedrv.asm):00180 [3]             BCS     IDE_READ_INFO_ABORT
E03D 860F             (   flexidedrv.asm):00181 [2]             LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
E03F 8E00EC           (   flexidedrv.asm):00182 [3]             LDX     #PPIDE_CMD_ID
E042 BDE2EF           (   flexidedrv.asm):00183 [8]             JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
E045 BDE1DA           (   flexidedrv.asm):00184 [8]             JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
E048 2524             (   flexidedrv.asm):00185 [3]             BCS     IDE_READ_INFO_ABORT
E04A BDE20A           (   flexidedrv.asm):00186 [8]             JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
E04D 8EE379           (   flexidedrv.asm):00187 [3]             LDX     #MESSAGE6
E050 BDCE7B           (   flexidedrv.asm):00188 [8]             JSR     >PDATA1
E053 B6ED45           (   flexidedrv.asm):00189 [5]             LDA     HSTBUF+123
E056 BDE32D           (   flexidedrv.asm):00190 [8]             JSR     OUTHEXA
E059 B6ED44           (   flexidedrv.asm):00191 [5]             LDA     HSTBUF+122
E05C BDE32D           (   flexidedrv.asm):00192 [8]             JSR     OUTHEXA
E05F B6ED43           (   flexidedrv.asm):00193 [5]             LDA     HSTBUF+121
E062 BDE32D           (   flexidedrv.asm):00194 [8]             JSR     OUTHEXA
E065 B6ED42           (   flexidedrv.asm):00195 [5]             LDA     HSTBUF+120
E068 BDE32D           (   flexidedrv.asm):00196 [8]             JSR     OUTHEXA
E06B 7EE07A           (   flexidedrv.asm):00197 [4]             JMP     IDE_READ_INFO_OK
E06E                  (   flexidedrv.asm):00198         IDE_READ_INFO_ABORT:
E06E 8EE34A           (   flexidedrv.asm):00199 [3]             LDX     #MESSAGE3
E071 BDCE7B           (   flexidedrv.asm):00200 [8]             JSR     >PDATA1         DO PROMPT
E074 BDCEB1           (   flexidedrv.asm):00201 [8]             JSR     >PCRLF         AND CRLF
E077 1A01             (   flexidedrv.asm):00202 [3]             SEC
E079 39               (   flexidedrv.asm):00203 [5]             RTS                                       ;
E07A                  (   flexidedrv.asm):00204         IDE_READ_INFO_OK:
E07A BDCEB1           (   flexidedrv.asm):00205 [8]             JSR     >PCRLF         AND CRLF
E07D 1CFE             (   flexidedrv.asm):00206 [3]             CLC
E07F 39               (   flexidedrv.asm):00207 [5]             RTS
                      (   flexidedrv.asm):00208         
                      (   flexidedrv.asm):00209         
                      (   flexidedrv.asm):00210         ;__IDE_PPIDETECT____________________________________________________________________________________
                      (   flexidedrv.asm):00211         ;
                      (   flexidedrv.asm):00212         ;  PROBE FOR PPI HARDWARE
                      (   flexidedrv.asm):00213         ;____________________________________________________________________________________________________
                      (   flexidedrv.asm):00214         ;
E080                  (   flexidedrv.asm):00215         IDE_PPIDETECT:
                      (   flexidedrv.asm):00216         ;
                      (   flexidedrv.asm):00217         ; TEST FOR PPI EXISTENCE
                      (   flexidedrv.asm):00218         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (   flexidedrv.asm):00219         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (   flexidedrv.asm):00220         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (   flexidedrv.asm):00221         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (   flexidedrv.asm):00222         ; INTERFERE WITH THE VALUE BEING READ.
E080 BDE31F           (   flexidedrv.asm):00223 [8]             JSR     SET_PPI_WR
                      (   flexidedrv.asm):00224         ;
E083 8600             (   flexidedrv.asm):00225 [2]             LDA     #$00                              ; VALUE ZERO
E085 B7FE60           (   flexidedrv.asm):00226 [5]             STA     PPIDELO                           ; PUSH VALUE TO PORT
E088 B6FE60           (   flexidedrv.asm):00227 [5]             LDA     PPIDELO                           ; GET PORT VALUE
E08B 8100             (   flexidedrv.asm):00228 [2]             CMPA    #$00
E08D 39               (   flexidedrv.asm):00229 [5]             RTS                                       ; AND RETURN
                      (   flexidedrv.asm):00230         ;
                      (   flexidedrv.asm):00231         
                      (   flexidedrv.asm):00232         
                      (   flexidedrv.asm):00233         ;;*__IDE_READ_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00234         ;;*
                      (   flexidedrv.asm):00235         ;;*  READ IDE SECTOR (IN LBA) INTO BUFFER
                      (   flexidedrv.asm):00236         ;;*
                      (   flexidedrv.asm):00237         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (   flexidedrv.asm):00238         ;                   (A) = Track Number
                      (   flexidedrv.asm):00239         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00240         ;
                      (   flexidedrv.asm):00241         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00242         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00243         ;                   (B) = Error condition
                      (   flexidedrv.asm):00244         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00245         ;                       = 0 if an error
                      (   flexidedrv.asm):00246         ;;*____________________________________________________________________________________________________
E08E                  (   flexidedrv.asm):00247         IDE_READ_SECTOR:
                      (   flexidedrv.asm):00248         ;       PRTDBG "IDE READ SECTOR$"
E08E 5A               (   flexidedrv.asm):00249 [2]             DECB                                      ; WE LOSE ONE SECTOR PER TRACK BASED ON FLEX
E08F B7E382           (   flexidedrv.asm):00250 [5]             STA     PPIDETMP                          ; USING 1 BASED SECTOR COUNTING
E092 F0E382           (   flexidedrv.asm):00251 [5]             SUBB    PPIDETMP                          ;
E095 2401             (   flexidedrv.asm):00252 [3]             BCC     >                                 ;
E097 4A               (   flexidedrv.asm):00253 [2]             DECA                                      ;
                      (   flexidedrv.asm):00254         !       ;
E098 3410             (   flexidedrv.asm):00255 [5+2]           PSHS    X
E09A F7E382           (   flexidedrv.asm):00256 [5]             STB     PPIDETMP                          ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E09D BDE0C1           (   flexidedrv.asm):00257 [8]             JSR     IDE_READ_RAW_SECTOR
E0A0 3510             (   flexidedrv.asm):00258 [5+2]           PULS    X
E0A2 2619             (   flexidedrv.asm):00259 [3]             BNE     IDE_READ_SECTOR_ERROR
E0A4 B6E382           (   flexidedrv.asm):00260 [5]             LDA     PPIDETMP
E0A7 8401             (   flexidedrv.asm):00261 [2]             ANDA    #$01
E0A9 C600             (   flexidedrv.asm):00262 [2]             LDB     #$00
E0AB 1F02             (   flexidedrv.asm):00263 [6]             TFR     D,Y                               ; Y NOW HAS HSTBUF OFFSET
                      (   flexidedrv.asm):00264         
E0AD C600             (   flexidedrv.asm):00265 [2]             LDB     #$00                              ; DEBLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00266         !
E0AF A6A9ECCA         (   flexidedrv.asm):00267 [4+4]           LDA     HSTBUF,Y
E0B3 A780             (   flexidedrv.asm):00268 [4+2]           STA     ,X+
E0B5 3121             (   flexidedrv.asm):00269 [5]             INY
E0B7 5C               (   flexidedrv.asm):00270 [2]             INCB
E0B8 C100             (   flexidedrv.asm):00271 [2]             CMPB    #$00
E0BA 26F3             (   flexidedrv.asm):00272 [3]             BNE     <
E0BC 39               (   flexidedrv.asm):00273 [5]             RTS
E0BD                  (   flexidedrv.asm):00274         IDE_READ_SECTOR_ERROR:
E0BD C61F             (   flexidedrv.asm):00275 [2]             LDB     #$1F
E0BF 57               (   flexidedrv.asm):00276 [2]             ASRB
E0C0 39               (   flexidedrv.asm):00277 [5]             RTS
                      (   flexidedrv.asm):00278         
E0C1                  (   flexidedrv.asm):00279         IDE_READ_RAW_SECTOR:
                      (   flexidedrv.asm):00280         ;       PRTDBG "IDE READ RAW SECTOR$"
E0C1 BDE289           (   flexidedrv.asm):00281 [8]             JSR     IDE_CONVERT_SECTOR
E0C4 B6E381           (   flexidedrv.asm):00282 [5]             LDA     DEBSEHD                           ; STORE CURRENT PARMS
E0C7 B1E37E           (   flexidedrv.asm):00283 [5]             CMPA    CDEBSEHD                          ;
E0CA 2613             (   flexidedrv.asm):00284 [3]             BNE     IDE_READ_SECTOR_DIRTY
E0CC B6E380           (   flexidedrv.asm):00285 [5]             LDA     DEBCYLM                           ;
E0CF B1E37D           (   flexidedrv.asm):00286 [5]             CMPA    CDEBCYLM                          ;
E0D2 260B             (   flexidedrv.asm):00287 [3]             BNE     IDE_READ_SECTOR_DIRTY
E0D4 B6E37F           (   flexidedrv.asm):00288 [5]             LDA     DEBCYLL                           ;
E0D7 B1E37C           (   flexidedrv.asm):00289 [5]             CMPA    CDEBCYLL                          ;
E0DA 2603             (   flexidedrv.asm):00290 [3]             BNE     IDE_READ_SECTOR_DIRTY
E0DC C600             (   flexidedrv.asm):00291 [2]             LDB     #$00                              ; RETURN = OPERATION OK
E0DE 39               (   flexidedrv.asm):00292 [5]             RTS
                      (   flexidedrv.asm):00293         
E0DF                  (   flexidedrv.asm):00294         IDE_READ_SECTOR_DIRTY:
                      (   flexidedrv.asm):00295         ;       PRTDBG "IDE READ SECTOR BUFFER DIRTY$"
E0DF BDE1B1           (   flexidedrv.asm):00296 [8]             JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
E0E2 2528             (   flexidedrv.asm):00297 [3]             BCS     IDE_READ_SECTOR_DIRTY_ERROR       ; IF TIMEOUT, REPORT NO IDE PRESENT
E0E4                  (   flexidedrv.asm):00298         IDE_READ_SECTOR_DIRTY1:
E0E4 BDE246           (   flexidedrv.asm):00299 [8]             JSR     IDE_SETUP_LBA                     ;TELL IT WHICH SECTOR WE WANT
E0E7 860F             (   flexidedrv.asm):00300 [2]             LDA     #PPIDE_COMMAND                    ;SELECT IDE REGISTER
E0E9 8E0020           (   flexidedrv.asm):00301 [3]             LDX     #PPIDE_CMD_READ
E0EC BDE2EF           (   flexidedrv.asm):00302 [8]             JSR     IDE_WRITE                         ;ASK THE DRIVE TO READ IT
E0EF BDE1DA           (   flexidedrv.asm):00303 [8]             JSR     IDE_WAIT_DRQ                      ;WAIT UNTIL IT'S GOT THE DATA
E0F2 2518             (   flexidedrv.asm):00304 [3]             BCS     IDE_READ_SECTOR_DIRTY_ERROR       ; IF TIMEOUT, REPORT NO IDE PRESENT
E0F4 BDE20A           (   flexidedrv.asm):00305 [8]             JSR     IDE_READ_BUFFER                   ; GRAB THE 256 WORDS FROM THE BUFFER
E0F7 B6E381           (   flexidedrv.asm):00306 [5]             LDA     DEBSEHD                           ; STORE CURRENT PARMS
E0FA B7E37E           (   flexidedrv.asm):00307 [5]             STA     CDEBSEHD                          ;
E0FD B6E37F           (   flexidedrv.asm):00308 [5]             LDA     DEBCYLL                           ;
E100 B7E37C           (   flexidedrv.asm):00309 [5]             STA     CDEBCYLL                          ;
E103 B6E380           (   flexidedrv.asm):00310 [5]             LDA     DEBCYLM                           ;
E106 B7E37D           (   flexidedrv.asm):00311 [5]             STA     CDEBCYLM                          ;
                      (   flexidedrv.asm):00312         
E109 C600             (   flexidedrv.asm):00313 [2]             LDB     #$00                              ; RETURN = OPERATION OK
E10B 39               (   flexidedrv.asm):00314 [5]             RTS
E10C                  (   flexidedrv.asm):00315         IDE_READ_SECTOR_DIRTY_ERROR:
E10C C60F             (   flexidedrv.asm):00316 [2]             LDB     #$0F                              ; SET ERROR CONDITION
E10E 39               (   flexidedrv.asm):00317 [5]             RTS
                      (   flexidedrv.asm):00318         
                      (   flexidedrv.asm):00319         ;;*__IDE_WRITE_SECTOR__________________________________________________________________________________
                      (   flexidedrv.asm):00320         ;;*
                      (   flexidedrv.asm):00321         ;;*  WRITE IDE SECTOR (IN LBA) FROM BUFFER
                      (   flexidedrv.asm):00322         ;;*
                      (   flexidedrv.asm):00323         ;           ENTRY - (X) = Address in memory where data to be written lives.
                      (   flexidedrv.asm):00324         ;                   (A) = Track Number
                      (   flexidedrv.asm):00325         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00326         ;
                      (   flexidedrv.asm):00327         ;           EXIT -  (X) May be destroyed
                      (   flexidedrv.asm):00328         ;                   (A) May be destroyed
                      (   flexidedrv.asm):00329         ;                   (B) = Error condition
                      (   flexidedrv.asm):00330         ;                   (Z) = 1 if no error
                      (   flexidedrv.asm):00331         ;                       = 0 if an error
                      (   flexidedrv.asm):00332         ;;*____________________________________________________________________________________________________
E10F                  (   flexidedrv.asm):00333         IDE_WRITE_SECTOR:
E10F 3420             (   flexidedrv.asm):00334 [5+2]           PSHS    Y
E111 5A               (   flexidedrv.asm):00335 [2]             DECB                                      ; WE LOSE ONE SECTOR PER TRACK BASED ON FLEX
E112 B7E382           (   flexidedrv.asm):00336 [5]             STA     PPIDETMP                          ; USING 1 BASED SECTOR COUNTING
E115 F0E382           (   flexidedrv.asm):00337 [5]             SUBB    PPIDETMP                          ;
E118 2401             (   flexidedrv.asm):00338 [3]             BCC     >                                 ;
E11A 4A               (   flexidedrv.asm):00339 [2]             DECA                                      ;
                      (   flexidedrv.asm):00340         !       ;
E11B 3410             (   flexidedrv.asm):00341 [5+2]           PSHS    X
E11D F7E382           (   flexidedrv.asm):00342 [5]             STB     PPIDETMP                          ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
                      (   flexidedrv.asm):00343         
E120 BDE0C1           (   flexidedrv.asm):00344 [8]             JSR     IDE_READ_RAW_SECTOR
E123 1026004A         (   flexidedrv.asm):00345 [5+?]           LBNE    IDE_WRITE_SECTOR_ERROR1
E127 3510             (   flexidedrv.asm):00346 [5+2]           PULS    X
                      (   flexidedrv.asm):00347         
E129 B6E382           (   flexidedrv.asm):00348 [5]             LDA     PPIDETMP
E12C 8401             (   flexidedrv.asm):00349 [2]             ANDA    #$01
E12E C600             (   flexidedrv.asm):00350 [2]             LDB     #$00
E130 1F02             (   flexidedrv.asm):00351 [6]             TFR     D,Y                               ; Y NOW HAS HSTBUF OFFSET
E132 C600             (   flexidedrv.asm):00352 [2]             LDB     #$00                              ; BLOCK TO ADDRESS IN "X"
                      (   flexidedrv.asm):00353         !
E134 A680             (   flexidedrv.asm):00354 [4+2]           LDA     ,X+
E136 A7A9ECCA         (   flexidedrv.asm):00355 [4+4]           STA     HSTBUF,Y
E13A 3121             (   flexidedrv.asm):00356 [5]             INY
E13C 5C               (   flexidedrv.asm):00357 [2]             INCB
E13D C100             (   flexidedrv.asm):00358 [2]             CMPB    #$00
E13F 26F3             (   flexidedrv.asm):00359 [3]             BNE     <
                      (   flexidedrv.asm):00360         
E141 BDE1B1           (   flexidedrv.asm):00361 [8]             JSR     IDE_WAIT_NOT_BUSY                 ;MAKE SURE DRIVE IS READY
E144 252D             (   flexidedrv.asm):00362 [3]             BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
E146 860F             (   flexidedrv.asm):00363 [2]             LDA     #PPIDE_COMMAND
E148 8E0030           (   flexidedrv.asm):00364 [3]             LDX     #PPIDE_CMD_WRITE
E14B BDE2EF           (   flexidedrv.asm):00365 [8]             JSR     IDE_WRITE                         ;TELL DRIVE TO WRITE A SECTOR
E14E BDE1DA           (   flexidedrv.asm):00366 [8]             JSR     IDE_WAIT_DRQ                      ;WAIT UNIT IT WANTS THE DATA
E151 2520             (   flexidedrv.asm):00367 [3]             BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
E153 BDE228           (   flexidedrv.asm):00368 [8]             JSR     IDE_WRITE_BUFFER                  ;GIVE THE DATA TO THE DRIVE
E156 BDE1B1           (   flexidedrv.asm):00369 [8]             JSR     IDE_WAIT_NOT_BUSY                 ;WAIT UNTIL THE WRITE IS COMPLETE
E159 2518             (   flexidedrv.asm):00370 [3]             BCS     IDE_WRITE_SECTOR_ERROR            ; IF TIMEOUT, REPORT NO IDE PRESENT
E15B 86FF             (   flexidedrv.asm):00371 [2]             LDA     #$FF                              ; STORE CURRENT PARMS
E15D B7E37E           (   flexidedrv.asm):00372 [5]             STA     CDEBSEHD                          ;
E160 B7E37C           (   flexidedrv.asm):00373 [5]             STA     CDEBCYLL                          ;
E163 B7E37D           (   flexidedrv.asm):00374 [5]             STA     CDEBCYLM                          ;
                      (   flexidedrv.asm):00375         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
E166 3436             (   flexidedrv.asm):00376 [5+6]           PSHS    A,B,X,Y
E168 BDE0DF           (   flexidedrv.asm):00377 [8]             JSR     IDE_READ_SECTOR_DIRTY             ; NOT 100% SURE WHY THIS IS NECESSARY FOR A SUCCESSFUL WRITE  . .
E16B 3536             (   flexidedrv.asm):00378 [5+6]           PULS    A,B,X,Y                           ; BUT I AM OUT OF TIME FOR TODAY
                      (   flexidedrv.asm):00379         ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
E16D C600             (   flexidedrv.asm):00380 [2]             LDB     #$00                              ; ZERO ON RETURN = OPERATION OK
E16F 35A0             (   flexidedrv.asm):00381 [5+4]           PULS    Y,PC
E171                  (   flexidedrv.asm):00382         IDE_WRITE_SECTOR_ERROR1:
E171 3510             (   flexidedrv.asm):00383 [5+2]           PULS    X
E173                  (   flexidedrv.asm):00384         IDE_WRITE_SECTOR_ERROR:
E173 C6FF             (   flexidedrv.asm):00385 [2]             LDB     #$FF                              ; 1 ON RETURN = OPERATION FAIL
E175 F7E37E           (   flexidedrv.asm):00386 [5]             STB     CDEBSEHD                          ;
E178 F7E37C           (   flexidedrv.asm):00387 [5]             STB     CDEBCYLL                          ;
E17B F7E37D           (   flexidedrv.asm):00388 [5]             STB     CDEBCYLM                          ;
E17E C61F             (   flexidedrv.asm):00389 [2]             LDB     #$1F
E180 57               (   flexidedrv.asm):00390 [2]             ASRB
E181 35A0             (   flexidedrv.asm):00391 [5+4]           PULS    Y,PC
                      (   flexidedrv.asm):00392         
                      (   flexidedrv.asm):00393         ;;*__PPIDE_RESET____________________________________________________________________________________
                      (   flexidedrv.asm):00394         ;;*
                      (   flexidedrv.asm):00395         ;;*  SOFT RESET IDE CHANNEL
                      (   flexidedrv.asm):00396         ;;*
                      (   flexidedrv.asm):00397         ;;*____________________________________________________________________________________________________
E183                  (   flexidedrv.asm):00398         PPIDE_RESET:
                      (   flexidedrv.asm):00399         ;       PRTDBG "IDE RESET$"
E183 8600             (   flexidedrv.asm):00400 [2]             LDA     #$00
E185 B7E381           (   flexidedrv.asm):00401 [5]             STA     DEBSEHD
E188 B7E37F           (   flexidedrv.asm):00402 [5]             STA     DEBCYLL
E18B B7E380           (   flexidedrv.asm):00403 [5]             STA     DEBCYLM
E18E 86FF             (   flexidedrv.asm):00404 [2]             LDA     #$FF                              ;
E190 B7E37E           (   flexidedrv.asm):00405 [5]             STA     CDEBSEHD                          ;
E193 B7E37C           (   flexidedrv.asm):00406 [5]             STA     CDEBCYLL                          ;
E196 B7E37D           (   flexidedrv.asm):00407 [5]             STA     CDEBCYLM                          ;
                      (   flexidedrv.asm):00408         
E199 8680             (   flexidedrv.asm):00409 [2]             LDA     #PPIDE_RST_LINE
E19B B7FE62           (   flexidedrv.asm):00410 [5]             STA     PPIDECNTRL                        ; ASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00411         
E19E 8E0100           (   flexidedrv.asm):00412 [3]             LDX     #$0100
                      (   flexidedrv.asm):00413         ;       PRTDBG "IDE RESET DELAY$"
E1A1                  (   flexidedrv.asm):00414         RST_DLY:
E1A1 301F             (   flexidedrv.asm):00415 [5]             DEX
E1A3 8C0000           (   flexidedrv.asm):00416 [4]             CPX     #$0000
E1A6 26F9             (   flexidedrv.asm):00417 [3]             BNE     RST_DLY
E1A8 8600             (   flexidedrv.asm):00418 [2]             LDA     #$00
E1AA B7FE62           (   flexidedrv.asm):00419 [5]             STA     PPIDECNTRL                        ; DEASSERT RST LINE ON IDE INTERFACE
                      (   flexidedrv.asm):00420         
                      (   flexidedrv.asm):00421         ; IF A DSKYNG IS ACTIVE AND IS ON THE SAME PPI PORT AS THE PPISD BEING
                      (   flexidedrv.asm):00422         ; RESET, THEN THE DSKYNG WILL ALSO BE RESET.  SO, THE DSKY IS ALSO INITIALIZED.
                      (   flexidedrv.asm):00423                 IF      USEDSKYNG = 1
E1AD BDEA3E           (   flexidedrv.asm):00424 [8]                 JSR     DSKY_REINIT
                      (   flexidedrv.asm):00425                     ENDC
                      (   flexidedrv.asm):00426         
E1B0 39               (   flexidedrv.asm):00427 [5]                 RTS
                      (   flexidedrv.asm):00428         
                      (   flexidedrv.asm):00429         
                      (   flexidedrv.asm):00430         ;;*__IDE_WAIT_NOT_BUSY_______________________________________________________________________________
                      (   flexidedrv.asm):00431         ;;*
                      (   flexidedrv.asm):00432         ;;*  WAIT FOR IDE CHANNEL TO BECOME READY
                      (   flexidedrv.asm):00433         ;;*
                      (   flexidedrv.asm):00434         ;;*____________________________________________________________________________________________________
E1B1                  (   flexidedrv.asm):00435         IDE_WAIT_NOT_BUSY:
E1B1 3412             (   flexidedrv.asm):00436 [5+3]               PSHS    X,A
E1B3 8600             (   flexidedrv.asm):00437 [2]                 LDA     #$00
E1B5 B7DF7F           (   flexidedrv.asm):00438 [5]                 STA     PPIDETIMEOUT
E1B8 B7DF80           (   flexidedrv.asm):00439 [5]                 STA     PPIDETIMEOUT+1
E1BB                  (   flexidedrv.asm):00440         IDE_WAIT_NOT_BUSY1:
E1BB 860F             (   flexidedrv.asm):00441 [2]                 LDA     #PPIDE_STATUS                     ;WAIT FOR RDY BIT TO BE SET
E1BD BDE2CA           (   flexidedrv.asm):00442 [8]                 JSR     IDE_READ
E1C0 1F18             (   flexidedrv.asm):00443 [6]                 TFR     X,A
E1C2 8480             (   flexidedrv.asm):00444 [2]                 ANDA    #$80
E1C4 270F             (   flexidedrv.asm):00445 [3]                 BEQ     IDE_WAIT_NOT_BUSY2
E1C6 7CDF7F           (   flexidedrv.asm):00446 [7]                 INC     PPIDETIMEOUT
E1C9 26F0             (   flexidedrv.asm):00447 [3]                 BNE     IDE_WAIT_NOT_BUSY1
E1CB 7CDF80           (   flexidedrv.asm):00448 [7]                 INC     PPIDETIMEOUT+1
E1CE 26EB             (   flexidedrv.asm):00449 [3]                 BNE     IDE_WAIT_NOT_BUSY1
E1D0 1A01             (   flexidedrv.asm):00450 [3]                 SEC
E1D2 7EE1D7           (   flexidedrv.asm):00451 [4]                 JMP     IDE_WAIT_NOT_BUSY3
E1D5                  (   flexidedrv.asm):00452         IDE_WAIT_NOT_BUSY2:
E1D5 1CFE             (   flexidedrv.asm):00453 [3]                 CLC
E1D7                  (   flexidedrv.asm):00454         IDE_WAIT_NOT_BUSY3:
E1D7 3592             (   flexidedrv.asm):00455 [5+5]               PULS    PC,X,A
E1D9 39               (   flexidedrv.asm):00456 [5]                 RTS
                      (   flexidedrv.asm):00457         
                      (   flexidedrv.asm):00458         ;;*__IDE_WAIT_DRQ______________________________________________________________________________________
                      (   flexidedrv.asm):00459         ;;*
                      (   flexidedrv.asm):00460         ;;*     WAIT FOR THE DRIVE TO BE READY TO TRANSFER DATA.
                      (   flexidedrv.asm):00461         ;;*
                      (   flexidedrv.asm):00462         ;;*____________________________________________________________________________________________________
E1DA                  (   flexidedrv.asm):00463         IDE_WAIT_DRQ:
E1DA 3432             (   flexidedrv.asm):00464 [5+5]               PSHS    A,X,Y
E1DC 8600             (   flexidedrv.asm):00465 [2]                 LDA     #$00
E1DE B7DF7F           (   flexidedrv.asm):00466 [5]                 STA     PPIDETIMEOUT
E1E1 B7DF80           (   flexidedrv.asm):00467 [5]                 STA     PPIDETIMEOUT+1
E1E4                  (   flexidedrv.asm):00468         IDE_WAIT_DRQ1:
E1E4 860F             (   flexidedrv.asm):00469 [2]                 LDA     #PPIDE_STATUS                     ;WAIT FOR DRQ BIT TO BE SET
E1E6 BDE2CA           (   flexidedrv.asm):00470 [8]                 JSR     IDE_READ
E1E9 1F18             (   flexidedrv.asm):00471 [6]                 TFR     X,A
E1EB 8488             (   flexidedrv.asm):00472 [2]                 ANDA    #%10001000                        ; MASK OFF BUSY(7) AND DRQ(3)
E1ED 8108             (   flexidedrv.asm):00473 [2]                 CMPA    #%00001000                        ; WE WANT BUSY(7) TO BE 0 AND DRQ (3) TO BE 1
E1EF 2715             (   flexidedrv.asm):00474 [3]                 BEQ     IDE_WAIT_DRQ2
E1F1 8401             (   flexidedrv.asm):00475 [2]                 ANDA    #%00000001                        ; IS ERROR?
E1F3 8101             (   flexidedrv.asm):00476 [2]                 CMPA    #%00000001                        ;
E1F5 270A             (   flexidedrv.asm):00477 [3]                 BEQ     IDE_WAIT_DRQE
E1F7 7CDF7F           (   flexidedrv.asm):00478 [7]                 INC     PPIDETIMEOUT
E1FA 26E8             (   flexidedrv.asm):00479 [3]                 BNE     IDE_WAIT_DRQ1
E1FC 7CDF80           (   flexidedrv.asm):00480 [7]                 INC     PPIDETIMEOUT+1
E1FF 26E3             (   flexidedrv.asm):00481 [3]                 BNE     IDE_WAIT_DRQ1
E201                  (   flexidedrv.asm):00482         IDE_WAIT_DRQE:
E201 1A01             (   flexidedrv.asm):00483 [3]                 SEC
E203 7EE208           (   flexidedrv.asm):00484 [4]                 JMP     IDE_WAIT_DRQ3
E206                  (   flexidedrv.asm):00485         IDE_WAIT_DRQ2:
E206 1CFE             (   flexidedrv.asm):00486 [3]                 CLC
E208                  (   flexidedrv.asm):00487         IDE_WAIT_DRQ3:
E208 35B2             (   flexidedrv.asm):00488 [5+7]               PULS    PC,A,X,Y
                      (   flexidedrv.asm):00489         
                      (   flexidedrv.asm):00490         
                      (   flexidedrv.asm):00491         
                      (   flexidedrv.asm):00492         ;;*__IDE_READ_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00493         ;;*
                      (   flexidedrv.asm):00494         ;;*  READ IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00495         ;;*
                      (   flexidedrv.asm):00496         ;;*____________________________________________________________________________________________________
E20A                  (   flexidedrv.asm):00497         IDE_READ_BUFFER:
E20A 108E0000         (   flexidedrv.asm):00498 [4]                 LDY     #$0000                            ; INDEX
E20E                  (   flexidedrv.asm):00499         IDEBUFRD:
E20E 8608             (   flexidedrv.asm):00500 [2]                 LDA     #PPIDE_DATA
E210 BDE2CD           (   flexidedrv.asm):00501 [8]                 JSR     IDE_READ_NO_SETUP
E213 1F10             (   flexidedrv.asm):00502 [6]                 TFR     X,D
E215 E7A9ECCA         (   flexidedrv.asm):00503 [4+4]               STB     HSTBUF,Y                          ;
E219 3121             (   flexidedrv.asm):00504 [5]                 INY
E21B A7A9ECCA         (   flexidedrv.asm):00505 [4+4]               STA     HSTBUF,Y                          ;
E21F 3121             (   flexidedrv.asm):00506 [5]                 INY
E221 108C0200         (   flexidedrv.asm):00507 [5]                 CMPY    #$0200                            ;
E225 26E7             (   flexidedrv.asm):00508 [3]                 BNE     IDEBUFRD                          ;
E227 39               (   flexidedrv.asm):00509 [5]                 RTS                                       ;
                      (   flexidedrv.asm):00510         
                      (   flexidedrv.asm):00511         ;;*__IDE_WRITE_BUFFER___________________________________________________________________________________
                      (   flexidedrv.asm):00512         ;;*
                      (   flexidedrv.asm):00513         ;;*  WRITE IDE BUFFER LITTLE ENDIAN
                      (   flexidedrv.asm):00514         ;;*
                      (   flexidedrv.asm):00515         ;;*____________________________________________________________________________________________________
E228                  (   flexidedrv.asm):00516         IDE_WRITE_BUFFER:
E228 108E0000         (   flexidedrv.asm):00517 [4]                 LDY     #$0000                            ; INDEX
E22C                  (   flexidedrv.asm):00518         IDEBUFWT:
E22C E6A9ECCA         (   flexidedrv.asm):00519 [4+4]               LDB     HSTBUF,Y                          ; SECTORS ARE LITTLE ENDIAN
E230 3121             (   flexidedrv.asm):00520 [5]                 INY                                       ;
E232 A6A9ECCA         (   flexidedrv.asm):00521 [4+4]               LDA     HSTBUF,Y                          ; SECTORS ARE LITTLE ENDIAN
E236 3121             (   flexidedrv.asm):00522 [5]                 INY
E238 1F01             (   flexidedrv.asm):00523 [6]                 TFR     D,X
E23A 8608             (   flexidedrv.asm):00524 [2]                 LDA     #PPIDE_DATA
E23C BDE2EF           (   flexidedrv.asm):00525 [8]                 JSR     IDE_WRITE
E23F 108C0200         (   flexidedrv.asm):00526 [5]                 CMPY    #$0200                            ;
E243 26E7             (   flexidedrv.asm):00527 [3]                 BNE     IDEBUFWT                          ;
E245 39               (   flexidedrv.asm):00528 [5]                 RTS                                       ;
                      (   flexidedrv.asm):00529         
                      (   flexidedrv.asm):00530         ;;*__IDE_SETUP_LBA_____________________________________________________________________________________
                      (   flexidedrv.asm):00531         ;;*
                      (   flexidedrv.asm):00532         ;;*  SETUP LBA DATA
                      (   flexidedrv.asm):00533         ;;*  A= DRIVE DEVICE
                      (   flexidedrv.asm):00534         ;;*____________________________________________________________________________________________________
E246                  (   flexidedrv.asm):00535         IDE_SETUP_LBA:
                      (   flexidedrv.asm):00536         ;               PRTDBG "PPIDE SETUP LBA$"
E246 B6DE20           (   flexidedrv.asm):00537 [5]                 LDA     CURDRVADDRESS
E249 8401             (   flexidedrv.asm):00538 [2]                 ANDA    #$01                              ; ONLY WANT DRIVE CFG
E24B 48               (   flexidedrv.asm):00539 [2]                 ASLA                                      ; SHIFT 4
E24C 48               (   flexidedrv.asm):00540 [2]                 ASLA                                      ;
E24D 48               (   flexidedrv.asm):00541 [2]                 ASLA                                      ;
E24E 48               (   flexidedrv.asm):00542 [2]                 ASLA                                      ;
E24F 8AE0             (   flexidedrv.asm):00543 [2]                 ORA     #$E0                              ; E0=MST  F0=SLV
E251 1F89             (   flexidedrv.asm):00544 [6]                 TFR     A,B
E253 8600             (   flexidedrv.asm):00545 [2]                 LDA     #$00
E255 1F01             (   flexidedrv.asm):00546 [6]                 TFR     D,X
E257 860E             (   flexidedrv.asm):00547 [2]                 LDA     #PPIDE_DEVICE
E259 BDE2EF           (   flexidedrv.asm):00548 [8]                 JSR     IDE_WRITE
E25C 8600             (   flexidedrv.asm):00549 [2]                 LDA     #$00
E25E F6E380           (   flexidedrv.asm):00550 [5]                 LDB     DEBCYLM
E261 1F01             (   flexidedrv.asm):00551 [6]                 TFR     D,X
E263 860D             (   flexidedrv.asm):00552 [2]                 LDA     #PPIDE_LBAHI
E265 BDE2EF           (   flexidedrv.asm):00553 [8]                 JSR     IDE_WRITE
E268 8600             (   flexidedrv.asm):00554 [2]                 LDA     #$00
E26A F6E37F           (   flexidedrv.asm):00555 [5]                 LDB     DEBCYLL                           ;
E26D 1F01             (   flexidedrv.asm):00556 [6]                 TFR     D,X
E26F 860C             (   flexidedrv.asm):00557 [2]                 LDA     #PPIDE_LBAMID
E271 BDE2EF           (   flexidedrv.asm):00558 [8]                 JSR     IDE_WRITE
E274 8600             (   flexidedrv.asm):00559 [2]                 LDA     #$00
E276 F6E381           (   flexidedrv.asm):00560 [5]                 LDB     DEBSEHD                           ;
E279 1F01             (   flexidedrv.asm):00561 [6]                 TFR     D,X
E27B 860B             (   flexidedrv.asm):00562 [2]                 LDA     #PPIDE_LBALOW
E27D BDE2EF           (   flexidedrv.asm):00563 [8]                 JSR     IDE_WRITE
E280 8E0001           (   flexidedrv.asm):00564 [3]                 LDX     #$0001
E283 860A             (   flexidedrv.asm):00565 [2]                 LDA     #PPIDE_SEC_CNT
E285 BDE2EF           (   flexidedrv.asm):00566 [8]                 JSR     IDE_WRITE
                      (   flexidedrv.asm):00567         
E288 39               (   flexidedrv.asm):00568 [5]                 RTS
                      (   flexidedrv.asm):00569         
                      (   flexidedrv.asm):00570         ;___IDE_CONVERT_SECTOR___________________________________________________________________________________
                      (   flexidedrv.asm):00571         ;
                      (   flexidedrv.asm):00572         ;       TRANSLATE SECTORS INTO IDE FORMAT
                      (   flexidedrv.asm):00573         ;
                      (   flexidedrv.asm):00574         ;                   (A) = Track Number
                      (   flexidedrv.asm):00575         ;                   (B) = Sector Number
                      (   flexidedrv.asm):00576         ;________________________________________________________________________________________________________
E289                  (   flexidedrv.asm):00577         IDE_CONVERT_SECTOR:
E289 54               (   flexidedrv.asm):00578 [2]                 LSRB                                      ; DIVIDE BY 2 (FOR BLOCKING)
E28A 44               (   flexidedrv.asm):00579 [2]                 LSRA                                      ;
E28B 2402             (   flexidedrv.asm):00580 [3]                 BCC     >
E28D CA80             (   flexidedrv.asm):00581 [2]                 ORB     #$80
                      (   flexidedrv.asm):00582         !
E28F F7E381           (   flexidedrv.asm):00583 [5]                 STB     DEBSEHD                           ; STORE IN SECTOR/HEAD
E292 B7E37F           (   flexidedrv.asm):00584 [5]                 STA     DEBCYLL                           ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00585         
                      (   flexidedrv.asm):00586         ;       ADD SLICE OFFSET
E295 FCDE21           (   flexidedrv.asm):00587 [6]                 LDD     CURDRVSLICE
E298 54               (   flexidedrv.asm):00588 [2]                 LSRB                                      ; DIVIDE BY 2 (FOR BLOCKING)
E299 44               (   flexidedrv.asm):00589 [2]                 LSRA                                      ;
E29A 2402             (   flexidedrv.asm):00590 [3]                 BCC     >
E29C CA80             (   flexidedrv.asm):00591 [2]                 ORB     #$80
                      (   flexidedrv.asm):00592         !
E29E F7E380           (   flexidedrv.asm):00593 [5]                 STB     DEBCYLM                           ; STORE IN TRACK (LSB)
E2A1 2408             (   flexidedrv.asm):00594 [3]                 BCC     >
E2A3 B6E37F           (   flexidedrv.asm):00595 [5]                 LDA     DEBCYLL                           ; STORE IN TRACK (LSB)
E2A6 8A80             (   flexidedrv.asm):00596 [2]                 ORA     #$80
E2A8 B7E37F           (   flexidedrv.asm):00597 [5]                 STA     DEBCYLL                           ; STORE IN TRACK (LSB)
                      (   flexidedrv.asm):00598         !
                      (   flexidedrv.asm):00599         
                      (   flexidedrv.asm):00600                     IF      USEDSKYNG = 1
                      (   flexidedrv.asm):00601         ;       PRTDBG "DSKY OUTPUT 1$"
E2AB B6DE1E           (   flexidedrv.asm):00602 [5]                     LDA     CURDRV
E2AE B7EC9B           (   flexidedrv.asm):00603 [5]                     STA     DSKY_HEXBUF
E2B1 B6E380           (   flexidedrv.asm):00604 [5]                     LDA     DEBCYLM
E2B4 B7EC9C           (   flexidedrv.asm):00605 [5]                     STA     DSKY_HEXBUF+1
E2B7 B6E37F           (   flexidedrv.asm):00606 [5]                     LDA     DEBCYLL
E2BA B7EC9D           (   flexidedrv.asm):00607 [5]                     STA     DSKY_HEXBUF+2
E2BD B6E381           (   flexidedrv.asm):00608 [5]                     LDA     DEBSEHD
E2C0 B7EC9E           (   flexidedrv.asm):00609 [5]                     STA     DSKY_HEXBUF+3
E2C3 BDEAD0           (   flexidedrv.asm):00610 [8]                     JSR     DSKY_BIN2SEG
E2C6 BDEB17           (   flexidedrv.asm):00611 [8]                     JSR     DSKY_SHOW
                      (   flexidedrv.asm):00612                         ENDC
E2C9 39               (   flexidedrv.asm):00613 [5]                     RTS
                      (   flexidedrv.asm):00614         
                      (   flexidedrv.asm):00615         
                      (   flexidedrv.asm):00616         ;-------------------------------------------------------------------------------
                      (   flexidedrv.asm):00617         
                      (   flexidedrv.asm):00618         ; LOW LEVEL I/O TO THE DRIVE.  THESE ARE THE ROUTINES THAT TALK
                      (   flexidedrv.asm):00619         ; DIRECTLY TO THE DRIVE, VIA THE 8255 CHIP.  NORMALLY A MAIN
                      (   flexidedrv.asm):00620         ; PROGRAM WOULD NOT CALL TO THESE.
                      (   flexidedrv.asm):00621         
                      (   flexidedrv.asm):00622         ;DO A READ BUS CYCLE TO THE DRIVE, USING THE 8255.
                      (   flexidedrv.asm):00623         ;INPUT A = IDE REGSITER ADDRESS
                      (   flexidedrv.asm):00624         ;OUTPUT X = WORD READ FROM IDE DRIVE
E2CA                  (   flexidedrv.asm):00625         IDE_READ:
E2CA BDE311           (   flexidedrv.asm):00626 [8]                     JSR     SET_PPI_RD                        ; SETUP FOR A READ CYCLE
E2CD                  (   flexidedrv.asm):00627         IDE_READ_NO_SETUP:
E2CD B7FE62           (   flexidedrv.asm):00628 [5]                     STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
E2D0 8A40             (   flexidedrv.asm):00629 [2]                     ORA     #PPIDE_RD_LINE                    ; ASSERT RD PIN
E2D2 B7FE62           (   flexidedrv.asm):00630 [5]                     STA     PPIDECNTRL
E2D5 3402             (   flexidedrv.asm):00631 [5+1]                   PSHS    A
E2D7 F6FE60           (   flexidedrv.asm):00632 [5]                     LDB     PPIDELO                           ; READ LOWER BYTE
E2DA B6FE61           (   flexidedrv.asm):00633 [5]                     LDA     PPIDEHI                           ; READ UPPER BYTE
E2DD 1F01             (   flexidedrv.asm):00634 [6]                     TFR     D,X
E2DF 3502             (   flexidedrv.asm):00635 [5+1]                   PULS    A                                 ; RESTORE REGISTER VALUE
E2E1 B7FE62           (   flexidedrv.asm):00636 [5]                     STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
E2E4 8840             (   flexidedrv.asm):00637 [2]                     EORA    #PPIDE_RD_LINE                    ; ASSERT RD PIN
E2E6 B7FE62           (   flexidedrv.asm):00638 [5]                     STA     PPIDECNTRL
E2E9 8600             (   flexidedrv.asm):00639 [2]                     LDA     #$00
E2EB B7FE62           (   flexidedrv.asm):00640 [5]                     STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
E2EE 39               (   flexidedrv.asm):00641 [5]                     RTS
                      (   flexidedrv.asm):00642         
                      (   flexidedrv.asm):00643         ;DO A WRITE BUS CYCLE TO THE DRIVE, VIA THE 8255
                      (   flexidedrv.asm):00644         ;INPUT A = IDE REGISTER ADDRESS
                      (   flexidedrv.asm):00645         ;INPUT REGISTER X = WORD TO WRITE
                      (   flexidedrv.asm):00646         ;
                      (   flexidedrv.asm):00647         
E2EF                  (   flexidedrv.asm):00648         IDE_WRITE:
E2EF BDE31F           (   flexidedrv.asm):00649 [8]                     JSR     SET_PPI_WR                        ; SETUP FOR A WRITE CYCLE
E2F2 3402             (   flexidedrv.asm):00650 [5+1]                   PSHS    A
E2F4 1F10             (   flexidedrv.asm):00651 [6]                     TFR     X,D
E2F6 F7FE60           (   flexidedrv.asm):00652 [5]                     STB     PPIDELO                           ; WRITE LOWER BYTE
E2F9 B7FE61           (   flexidedrv.asm):00653 [5]                     STA     PPIDEHI                           ; WRITE UPPER BYTE
E2FC 3502             (   flexidedrv.asm):00654 [5+1]                   PULS    A                                 ; RESTORE REGISTER VALUE
E2FE B7FE62           (   flexidedrv.asm):00655 [5]                     STA     PPIDECNTRL                        ;DRIVE ADDRESS ONTO CONTROL LINES
E301 8A20             (   flexidedrv.asm):00656 [2]                     ORA     #PPIDE_WR_LINE                    ; ASSERT WRITE PIN
E303 B7FE62           (   flexidedrv.asm):00657 [5]                     STA     PPIDECNTRL
E306 8820             (   flexidedrv.asm):00658 [2]                     EORA    #PPIDE_WR_LINE                    ; DE ASSERT WR PIN
E308 B7FE62           (   flexidedrv.asm):00659 [5]                     STA     PPIDECNTRL
E30B 8600             (   flexidedrv.asm):00660 [2]                     LDA     #$00
E30D B7FE62           (   flexidedrv.asm):00661 [5]                     STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
E310 39               (   flexidedrv.asm):00662 [5]                     RTS
                      (   flexidedrv.asm):00663         
                      (   flexidedrv.asm):00664         
                      (   flexidedrv.asm):00665         ;-----------------------------------------------------------------------------------
                      (   flexidedrv.asm):00666         ; PPI SETUP ROUTINE TO CONFIGURE THE APPROPRIATE PPI MODE
                      (   flexidedrv.asm):00667         ;
                      (   flexidedrv.asm):00668         ;------------------------------------------------------------------------------------
                      (   flexidedrv.asm):00669         
E311                  (   flexidedrv.asm):00670         SET_PPI_RD:
E311 3402             (   flexidedrv.asm):00671 [5+1]                   PSHS    A
E313 8600             (   flexidedrv.asm):00672 [2]                     LDA     #$00
E315 B7FE62           (   flexidedrv.asm):00673 [5]                     STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
E318 8692             (   flexidedrv.asm):00674 [2]                     LDA     #PPRD_IDE_8255
E31A B7FE63           (   flexidedrv.asm):00675 [5]                     STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, READ MODE
E31D 3582             (   flexidedrv.asm):00676 [5+3]                   PULS    A,PC
                      (   flexidedrv.asm):00677         
E31F                  (   flexidedrv.asm):00678         SET_PPI_WR:
E31F 3402             (   flexidedrv.asm):00679 [5+1]                   PSHS    A
E321 8600             (   flexidedrv.asm):00680 [2]                     LDA     #$00
E323 B7FE62           (   flexidedrv.asm):00681 [5]                     STA     PPIDECNTRL                        ;DEASSERT ALL CONTROL PINS
E326 8680             (   flexidedrv.asm):00682 [2]                     LDA     #PPWR_IDE_8255
E328 B7FE63           (   flexidedrv.asm):00683 [5]                     STA     PPIDEPPIC                         ;CONFIG 8255 CHIP, WRITE MODE
E32B 3582             (   flexidedrv.asm):00684 [5+3]                   PULS    A,PC
                      (   flexidedrv.asm):00685         
E32D                  (   flexidedrv.asm):00686         OUTHEXA:
E32D 3402             (   flexidedrv.asm):00687 [5+1]                   PSHS    A
E32F 3402             (   flexidedrv.asm):00688 [5+1]                   PSHS    A
E331 BDCFD8           (   flexidedrv.asm):00689 [8]                     JSR     OUTHL
E334 3502             (   flexidedrv.asm):00690 [5+1]                   PULS    A
E336 BDCFDC           (   flexidedrv.asm):00691 [8]                     JSR     OUTHR
E339 3582             (   flexidedrv.asm):00692 [5+3]                   PULS    A,PC
                      (   flexidedrv.asm):00693         
E33B                  (   flexidedrv.asm):00694         MESSAGE1
E33B 5050494445203A   (   flexidedrv.asm):00695                         FCC     "PPIDE :"
E342 04               (   flexidedrv.asm):00696                         FCB     EOT
E343                  (   flexidedrv.asm):00697         MESSAGE2
E343 20494F3D3078     (   flexidedrv.asm):00698                         FCC     " IO=0x"
E349 04               (   flexidedrv.asm):00699                         FCB     EOT
E34A                  (   flexidedrv.asm):00700         MESSAGE3
E34A 204E4F5420505245 (   flexidedrv.asm):00701                         FCC     " NOT PRESENT"
     53454E54
E356 04               (   flexidedrv.asm):00702                         FCB     EOT
E357                  (   flexidedrv.asm):00703         MESSAGE4
E357 205050494445303A (   flexidedrv.asm):00704                         FCC     " PPIDE0: BLOCKS="
     20424C4F434B533D
E367 04               (   flexidedrv.asm):00705                         FCB     EOT
E368                  (   flexidedrv.asm):00706         MESSAGE5
E368 205050494445313A (   flexidedrv.asm):00707                         FCC     " PPIDE1: BLOCKS="
     20424C4F434B533D
E378 04               (   flexidedrv.asm):00708                         FCB     EOT
E379                  (   flexidedrv.asm):00709         MESSAGE6
E379 3078             (   flexidedrv.asm):00710                         FCC     "0x"
E37B 04               (   flexidedrv.asm):00711                         FCB     EOT
                      (   flexidedrv.asm):00712         
                      (   flexidedrv.asm):00713         
                      (   flexidedrv.asm):00714         ;ALLOCATE THE FOLLOWING DATA AREAS TO UNUSED RAM SPACE
E37C                  (   flexidedrv.asm):00715         CDEBCYLL:
E37C 00               (   flexidedrv.asm):00716                         .BYTE   0                                 ; DEBLOCKED CYLINDER LSB
E37D                  (   flexidedrv.asm):00717         CDEBCYLM:
E37D 00               (   flexidedrv.asm):00718                         .BYTE   0                                 ; DEBLOCKED CYLINDER MSB
E37E                  (   flexidedrv.asm):00719         CDEBSEHD:
E37E 00               (   flexidedrv.asm):00720                         .BYTE   0                                 ; DEBLOCKED SECTOR AND HEAD (HS)
E37F                  (   flexidedrv.asm):00721         DEBCYLL:
E37F 00               (   flexidedrv.asm):00722                         .BYTE   0                                 ; DEBLOCKED CYLINDER LSB
E380                  (   flexidedrv.asm):00723         DEBCYLM:
E380 00               (   flexidedrv.asm):00724                         .BYTE   0                                 ; DEBLOCKED CYLINDER MSB
E381                  (   flexidedrv.asm):00725         DEBSEHD:
E381 00               (   flexidedrv.asm):00726                         .BYTE   0                                 ; DEBLOCKED SECTOR AND HEAD (HS)
E382                  (   flexidedrv.asm):00727         PPIDETMP:
E382 00               (   flexidedrv.asm):00728                         .BYTE   0                                 ; TEMP
                      (      drivers.asm):00560                     INCLUDE "flexflpy.asm"
                      (     flexflpy.asm):00001         ;__FLOPPY DRIVERS________________________________________________________________________________________________________________
                      (     flexflpy.asm):00002         ;
                      (     flexflpy.asm):00003         ;       ;       Nhyodyne 6809 flex floppy drivers
                      (     flexflpy.asm):00004         ;
                      (     flexflpy.asm):00005         ;       Entry points:
                      (     flexflpy.asm):00006         ;               FL_SETUP        - called during OS init
                      (     flexflpy.asm):00007         ;               FL_READ_SECTOR  - read a sector from drive
                      (     flexflpy.asm):00008         ;               FL_WRITE_SECTOR - write a sector to drive
                      (     flexflpy.asm):00009         ;
                      (     flexflpy.asm):00010         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00011         ;
                      (     flexflpy.asm):00012         ;;*
                      (     flexflpy.asm):00013         ;;* HARDWARE I/O ADDRESSES
                      (     flexflpy.asm):00014         ;;*
     FE30             (     flexflpy.asm):00015         FDC_MSR         = $FE30                           ; ADDRESS OF MAIN STATUS REGISTER
     FE31             (     flexflpy.asm):00016         FDC_DATA        = $FE31                           ; FLOPPY DATA REGISTER
     FE33             (     flexflpy.asm):00017         FDC_RESET       = $FE33                           ; FLOPPY RESET
     FE35             (     flexflpy.asm):00018         FDC_DCR         = $FE35                           ; LOAD CONTROL REGISTER
     FE36             (     flexflpy.asm):00019         FDC_DOR         = $FE36                           ; CONFIGURATION CONTROL REGISTER
     FE37             (     flexflpy.asm):00020         FDC_TC          = $FE37                           ; TERMINAL COUNT
                      (     flexflpy.asm):00021         
                      (     flexflpy.asm):00022         
                      (     flexflpy.asm):00023         ;
                      (     flexflpy.asm):00024         ; FDC COMMANDS
                      (     flexflpy.asm):00025         ;
     0006             (     flexflpy.asm):00026         CFD_READ        = %00000110                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     000C             (     flexflpy.asm):00027         CFD_READDEL     = %00001100                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0005             (     flexflpy.asm):00028         CFD_WRITE       = %00000101                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0009             (     flexflpy.asm):00029         CFD_WRITEDEL    = %00001001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     0002             (     flexflpy.asm):00030         CFD_READTRK     = %00000010                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,DTL --> ST0,ST1,ST2,C,H,R,N
     000A             (     flexflpy.asm):00031         CFD_READID      = %00001010                       ; CMD,HDS/DS --> ST0,ST1,ST2,C,H,R,N
     000D             (     flexflpy.asm):00032         CFD_FMTTRK      = %00001101                       ; CMD,HDS/DS,N,SC,GPL,D --> ST0,ST1,ST2,C,H,R,N
     0011             (     flexflpy.asm):00033         CFD_SCANEQ      = %00010001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     0019             (     flexflpy.asm):00034         CFD_SCANLOEQ    = %00011001                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     001D             (     flexflpy.asm):00035         CFD_SCANHIEQ    = %00011101                       ; CMD,HDS/DS,C,H,R,N,EOT,GPL,STP --> ST0,ST1,ST2,C,H,R,N
     0007             (     flexflpy.asm):00036         CFD_RECAL       = %00000111                       ; CMD,DS --> <EMPTY>
     0008             (     flexflpy.asm):00037         CFD_SENSEINT    = %00001000                       ; CMD --> ST0,PCN
     0003             (     flexflpy.asm):00038         CFD_SPECIFY     = %00000011                       ; CMD,SRT/HUT,HLT/ND --> <EMPTY>
     0004             (     flexflpy.asm):00039         CFD_DRVSTAT     = %00000100                       ; CMD,HDS/DS --> ST3
     000F             (     flexflpy.asm):00040         CFD_SEEK        = %00001111                       ; CMD,HDS/DS --> <EMPTY>
     0010             (     flexflpy.asm):00041         CFD_VERSION     = %00010000                       ; CMD --> ST0
                      (     flexflpy.asm):00042         
     0040             (     flexflpy.asm):00043         CFD_MFM         = %01000000                       ;
                      (     flexflpy.asm):00044         
                      (     flexflpy.asm):00045         ;
                      (     flexflpy.asm):00046         ;
                      (     flexflpy.asm):00047         ; Specify Command:
                      (     flexflpy.asm):00048         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      (     flexflpy.asm):00049         ; |Byte |  7  |  6  |  5  |  4  |  3  |  2  |  1  |  0  |
                      (     flexflpy.asm):00050         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      (     flexflpy.asm):00051         ; |  0  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |  1  |
                      (     flexflpy.asm):00052         ; |  1  | ----- STEP RATE ----- | -- HEAD UNLOAD TIME - |
                      (     flexflpy.asm):00053         ; |  2  | ------------ HEAD LOAD TIME ----------- | NDM |
                      (     flexflpy.asm):00054         ; +-----+-----+-----+-----+-----+-----+-----+-----+-----+
                      (     flexflpy.asm):00055         ;
                      (     flexflpy.asm):00056         ;
                      (     flexflpy.asm):00057         ; Step Rate (milliseconds):              Head Unload Time (milliseconds):       Head Load Time (milliseconds):
                      (     flexflpy.asm):00058         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      (     flexflpy.asm):00059         ; |      |         BITRATE           |   |      |         BITRATE           |   |      |         BITRATE           |
                      (     flexflpy.asm):00060         ; |  VAL | 1.0M | 500K | 300K | 250K |   |  VAL | 1.0M | 500K | 300K | 250K |   |  VAL | 1.0M | 500K | 300K | 250K |
                      (     flexflpy.asm):00061         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      (     flexflpy.asm):00062         ; |    0 |  8.0 | 16.0 | 26.7 | 32.0 |   |    0 |  128 |  256 |  426 |  512 |   |    0 |  128 |  256 |  426 |  512 |
                      (     flexflpy.asm):00063         ; |    1 |  7.5 | 15.0 | 25.0 | 30.0 |   |    1 |    8 |   16 | 26.7 |   32 |   |    1 |    1 |    2 |  3.3 |    4 |
                      (     flexflpy.asm):00064         ; |    2 |  7.0 | 14.0 | 23.3 | 28.0 |   |    2 |   16 |   32 | 53.3 |   64 |   |    2 |    2 |    4 |  6.7 |    8 |
                      (     flexflpy.asm):00065         ; |  ... |  ... |  ... |  ... |  ... |   |  ... |  ... |  ... |  ... |  ... |   |  ... |  ... |  ... |  ... |  ... |
                      (     flexflpy.asm):00066         ; |   14 |  1.0 |  2.0 |  3.3 |  4.0 |   |   14 |  112 |  224 |  373 |  448 |   |  126 |  126 |  252 |  420 |  504 |
                      (     flexflpy.asm):00067         ; |   15 |  0.5 |  1.0 |  1.7 |  2.0 |   |   15 |  120 |  240 |  400 |  480 |   |  127 |  127 |  254 |  423 |  508 |
                      (     flexflpy.asm):00068         ; +------+------+------+------+------+   +------+------+------+------+------+   +------+------+------+------+------+
                      (     flexflpy.asm):00069         ;
                      (     flexflpy.asm):00070         ; IBM PS/2 CALLS FOR:
                      (     flexflpy.asm):00071         ;   STEP RATE: 3ms (6ms FOR ALL 41mm OR 720K DRIVES)
                      (     flexflpy.asm):00072         ;   HEAD LOAD TIME: 15ms
                      (     flexflpy.asm):00073         
     000C             (     flexflpy.asm):00074         DOR_INIT        = %00001100                       ; SOFT RESET INACTIVE, DMA ENABLED
     000C             (     flexflpy.asm):00075         DOR_BR250       = DOR_INIT
     000C             (     flexflpy.asm):00076         DOR_BR500       = DOR_INIT
                      (     flexflpy.asm):00077         
     0006             (     flexflpy.asm):00078         FLOPPY_RETRIES  = 6                               ; HOW ABOUT SIX RETIRES?
     0002             (     flexflpy.asm):00079         FLOPPY_RETRIES1 = 2                               ; TWO ITERATIONS OF RECAL?
                      (     flexflpy.asm):00080         
                      (     flexflpy.asm):00081         ;__FL_SETUP______________________________________________________________________________________________________________________
                      (     flexflpy.asm):00082         ;
                      (     flexflpy.asm):00083         ;       SETUP FLOPPY DRIVE SETTINGS
                      (     flexflpy.asm):00084         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00085         ;
E383                  (     flexflpy.asm):00086         FL_SETUP:
E383 8600             (     flexflpy.asm):00087 [2]             LDA     #$00                              ; RESET TRACK/CYL/SEC STORAGE
E385 B7E987           (     flexflpy.asm):00088 [5]             STA     debhead                           ;
E388 B7E988           (     flexflpy.asm):00089 [5]             STA     debcyl                            ;
E38B B7E989           (     flexflpy.asm):00090 [5]             STA     debsec                            ;
E38E 86FF             (     flexflpy.asm):00091 [2]             LDA     #$FF                              ; SET CACHE TO INVALID
E390 B7E98A           (     flexflpy.asm):00092 [5]             STA     Cdebhead                          ;
E393 B7E98B           (     flexflpy.asm):00093 [5]             STA     Cdebcyl                           ;
E396 B7E98C           (     flexflpy.asm):00094 [5]             STA     Cdebsec                           ;
                      (     flexflpy.asm):00095         
                      (     flexflpy.asm):00096         
E399 8EE993           (     flexflpy.asm):00097 [3]             LDX     #FLOPPYMESSAGE1
E39C BDCE7B           (     flexflpy.asm):00098 [8]             JSR     >PDATA1                           ; DO PROMPT
E39F BDCEB1           (     flexflpy.asm):00099 [8]             JSR     >PCRLF                            ; AND CRLF
                      (     flexflpy.asm):00100         ;
E3A2 8EE9A0           (     flexflpy.asm):00101 [3]             LDX     #FLOPPYMESSAGE2
E3A5 BDCE7B           (     flexflpy.asm):00102 [8]             JSR     >PDATA1                           ; DO PROMPT
                      (     flexflpy.asm):00103         
E3A8 CCFE30           (     flexflpy.asm):00104 [3]             LDD     #FDC_MSR                          ; GET BASE PORT
E3AB FDE9BD           (     flexflpy.asm):00105 [6]             STD     FLOPPYWORKVAR
E3AE 8EE9BD           (     flexflpy.asm):00106 [3]             LDX     #FLOPPYWORKVAR
E3B1 BDCFCC           (     flexflpy.asm):00107 [8]             JSR     OUTADR                            ; PRINT BASE PORT
                      (     flexflpy.asm):00108         
E3B4 BDE916           (     flexflpy.asm):00109 [8]             JSR     FD_DETECT                         ; CHECK FOR FDC
E3B7 8100             (     flexflpy.asm):00110 [2]             CMPA    #$00
E3B9 270C             (     flexflpy.asm):00111 [3]             BEQ     >                                 ; CONTINUE IF FOUND
                      (     flexflpy.asm):00112         
E3BB 8EE9A7           (     flexflpy.asm):00113 [3]             LDX     #FLOPPYMESSAGE3
E3BE BDCE7B           (     flexflpy.asm):00114 [8]             JSR     >PDATA1                           ; DO PROMPT
E3C1 BDCEB1           (     flexflpy.asm):00115 [8]             JSR     >PCRLF                            ; AND CRLF
E3C4 86FF             (     flexflpy.asm):00116 [2]             LDA     #$FF
E3C6 39               (     flexflpy.asm):00117 [5]             RTS                                       ; BAIL OUT
                      (     flexflpy.asm):00118         !
E3C7 8EE9B4           (     flexflpy.asm):00119 [3]             LDX     #FLOPPYMESSAGE4
E3CA BDCE7B           (     flexflpy.asm):00120 [8]             JSR     >PDATA1                           ; DO PROMPT
E3CD BDCEB1           (     flexflpy.asm):00121 [8]             JSR     >PCRLF                            ; AND CRLF
E3D0 860C             (     flexflpy.asm):00122 [2]             LDA     #DOR_INIT                         ; RESET SETTINGS
E3D2 B7FE36           (     flexflpy.asm):00123 [5]             STA     FDC_DOR
                      (     flexflpy.asm):00124         
E3D5 BDE8A8           (     flexflpy.asm):00125 [8]             JSR     CHECKINT                          ;
E3D8 8603             (     flexflpy.asm):00126 [2]             LDA     #CFD_SPECIFY                      ; SPECIFY COMMAND
E3DA BDE847           (     flexflpy.asm):00127 [8]             JSR     PFDATA                            ; OUTPUT TO FDC
E3DD 867F             (     flexflpy.asm):00128 [2]             LDA     #$7F                              ; 6 MS STEP, 480 MS HEAD UNLOAD
E3DF BDE847           (     flexflpy.asm):00129 [8]             JSR     PFDATA                            ; OUTPUT TO FDC
E3E2 8605             (     flexflpy.asm):00130 [2]             LDA     #$05                              ; 508 MS HEAD LOAD, NON-DMA MODE
E3E4 BDE847           (     flexflpy.asm):00131 [8]             JSR     PFDATA                            ; OUTPUT TO FDC
                      (     flexflpy.asm):00132         
E3E7 BDE8A8           (     flexflpy.asm):00133 [8]             JSR     CHECKINT                          ; SEND SEVERAL INTERRUPTS TO ENSURE PROPER STATE
E3EA BDE8A8           (     flexflpy.asm):00134 [8]             JSR     CHECKINT                          ;
E3ED BDE8A8           (     flexflpy.asm):00135 [8]             JSR     CHECKINT                          ;
E3F0 BDE8A8           (     flexflpy.asm):00136 [8]             JSR     CHECKINT                          ;
E3F3 BDE8A8           (     flexflpy.asm):00137 [8]             JSR     CHECKINT                          ;
E3F6 BDE8A8           (     flexflpy.asm):00138 [8]             JSR     CHECKINT                          ;
                      (     flexflpy.asm):00139         
E3F9 3436             (     flexflpy.asm):00140 [5+6]           PSHS    A,B,X,Y
E3FB 863C             (     flexflpy.asm):00141 [2]             LDA     #'<'
E3FD BDDE4C           (     flexflpy.asm):00142 [8]             JSR     VOUTCH
E400 BDDE4C           (     flexflpy.asm):00143 [8]             JSR     VOUTCH
E403 BDDE4C           (     flexflpy.asm):00144 [8]             JSR     VOUTCH
E406 BDDE4C           (     flexflpy.asm):00145 [8]             JSR     VOUTCH
E409 3536             (     flexflpy.asm):00146 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00147         
E40B 8600             (     flexflpy.asm):00148 [2]             LDA     #00
E40D B7DE20           (     flexflpy.asm):00149 [5]             STA     CURDRVADDRESS
E410 BDE81D           (     flexflpy.asm):00150 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00151         
E413 3436             (     flexflpy.asm):00152 [5+6]           PSHS    A,B,X,Y
E415 863E             (     flexflpy.asm):00153 [2]             LDA     #'>'
E417 BDDE4C           (     flexflpy.asm):00154 [8]             JSR     VOUTCH
E41A BDDE4C           (     flexflpy.asm):00155 [8]             JSR     VOUTCH
E41D BDDE4C           (     flexflpy.asm):00156 [8]             JSR     VOUTCH
E420 BDDE4C           (     flexflpy.asm):00157 [8]             JSR     VOUTCH
E423 3536             (     flexflpy.asm):00158 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00159         
                      (     flexflpy.asm):00160         
E425 8627             (     flexflpy.asm):00161 [2]             LDA     #39                               ;
E427 B7E988           (     flexflpy.asm):00162 [5]             STA     debcyl                            ;
E42A BDE7EE           (     flexflpy.asm):00163 [8]             JSR     SETTRACK
E42D BDE81D           (     flexflpy.asm):00164 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00165         
E430 3436             (     flexflpy.asm):00166 [5+6]           PSHS    A,B,X,Y
E432 863C             (     flexflpy.asm):00167 [2]             LDA     #'<'
E434 BDDE4C           (     flexflpy.asm):00168 [8]             JSR     VOUTCH
E437 BDDE4C           (     flexflpy.asm):00169 [8]             JSR     VOUTCH
E43A BDDE4C           (     flexflpy.asm):00170 [8]             JSR     VOUTCH
E43D BDDE4C           (     flexflpy.asm):00171 [8]             JSR     VOUTCH
E440 3536             (     flexflpy.asm):00172 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00173         
E442 8600             (     flexflpy.asm):00174 [2]             LDA     #00
E444 B7DE20           (     flexflpy.asm):00175 [5]             STA     CURDRVADDRESS
E447 BDE81D           (     flexflpy.asm):00176 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00177         
E44A 3436             (     flexflpy.asm):00178 [5+6]           PSHS    A,B,X,Y
E44C 863E             (     flexflpy.asm):00179 [2]             LDA     #'>'
E44E BDDE4C           (     flexflpy.asm):00180 [8]             JSR     VOUTCH
E451 BDDE4C           (     flexflpy.asm):00181 [8]             JSR     VOUTCH
E454 BDDE4C           (     flexflpy.asm):00182 [8]             JSR     VOUTCH
E457 BDDE4C           (     flexflpy.asm):00183 [8]             JSR     VOUTCH
E45A 3536             (     flexflpy.asm):00184 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00185         
E45C 8627             (     flexflpy.asm):00186 [2]             LDA     #39                               ;
E45E B7E988           (     flexflpy.asm):00187 [5]             STA     debcyl                            ;
E461 BDE7EE           (     flexflpy.asm):00188 [8]             JSR     SETTRACK
                      (     flexflpy.asm):00189         
E464 3436             (     flexflpy.asm):00190 [5+6]           PSHS    A,B,X,Y
E466 863C             (     flexflpy.asm):00191 [2]             LDA     #'<'
E468 BDDE4C           (     flexflpy.asm):00192 [8]             JSR     VOUTCH
E46B BDDE4C           (     flexflpy.asm):00193 [8]             JSR     VOUTCH
E46E BDDE4C           (     flexflpy.asm):00194 [8]             JSR     VOUTCH
E471 BDDE4C           (     flexflpy.asm):00195 [8]             JSR     VOUTCH
E474 3536             (     flexflpy.asm):00196 [5+6]           PULS    A,B,X,Y
E476 BDE81D           (     flexflpy.asm):00197 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00198         
                      (     flexflpy.asm):00199         
                      (     flexflpy.asm):00200         
E479 3436             (     flexflpy.asm):00201 [5+6]           PSHS    A,B,X,Y
E47B 863C             (     flexflpy.asm):00202 [2]             LDA     #'<'
E47D BDDE4C           (     flexflpy.asm):00203 [8]             JSR     VOUTCH
E480 BDDE4C           (     flexflpy.asm):00204 [8]             JSR     VOUTCH
E483 BDDE4C           (     flexflpy.asm):00205 [8]             JSR     VOUTCH
E486 BDDE4C           (     flexflpy.asm):00206 [8]             JSR     VOUTCH
E489 3536             (     flexflpy.asm):00207 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00208         
E48B 8601             (     flexflpy.asm):00209 [2]             LDA     #01
E48D B7DE20           (     flexflpy.asm):00210 [5]             STA     CURDRVADDRESS
E490 BDE81D           (     flexflpy.asm):00211 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00212         
E493 3436             (     flexflpy.asm):00213 [5+6]           PSHS    A,B,X,Y
E495 863E             (     flexflpy.asm):00214 [2]             LDA     #'>'
E497 BDDE4C           (     flexflpy.asm):00215 [8]             JSR     VOUTCH
E49A BDDE4C           (     flexflpy.asm):00216 [8]             JSR     VOUTCH
E49D BDDE4C           (     flexflpy.asm):00217 [8]             JSR     VOUTCH
E4A0 BDDE4C           (     flexflpy.asm):00218 [8]             JSR     VOUTCH
E4A3 3536             (     flexflpy.asm):00219 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00220         
                      (     flexflpy.asm):00221         
E4A5 8627             (     flexflpy.asm):00222 [2]             LDA     #39                               ;
E4A7 B7E988           (     flexflpy.asm):00223 [5]             STA     debcyl                            ;
E4AA BDE7EE           (     flexflpy.asm):00224 [8]             JSR     SETTRACK
E4AD BDE81D           (     flexflpy.asm):00225 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00226         
E4B0 3436             (     flexflpy.asm):00227 [5+6]           PSHS    A,B,X,Y
E4B2 863C             (     flexflpy.asm):00228 [2]             LDA     #'<'
E4B4 BDDE4C           (     flexflpy.asm):00229 [8]             JSR     VOUTCH
E4B7 BDDE4C           (     flexflpy.asm):00230 [8]             JSR     VOUTCH
E4BA BDDE4C           (     flexflpy.asm):00231 [8]             JSR     VOUTCH
E4BD BDDE4C           (     flexflpy.asm):00232 [8]             JSR     VOUTCH
E4C0 3536             (     flexflpy.asm):00233 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00234         
E4C2 8600             (     flexflpy.asm):00235 [2]             LDA     #00
E4C4 B7DE20           (     flexflpy.asm):00236 [5]             STA     CURDRVADDRESS
E4C7 BDE81D           (     flexflpy.asm):00237 [8]             JSR     RECAL                             ;
                      (     flexflpy.asm):00238         
E4CA 3436             (     flexflpy.asm):00239 [5+6]           PSHS    A,B,X,Y
E4CC 863E             (     flexflpy.asm):00240 [2]             LDA     #'>'
E4CE BDDE4C           (     flexflpy.asm):00241 [8]             JSR     VOUTCH
E4D1 BDDE4C           (     flexflpy.asm):00242 [8]             JSR     VOUTCH
E4D4 BDDE4C           (     flexflpy.asm):00243 [8]             JSR     VOUTCH
E4D7 BDDE4C           (     flexflpy.asm):00244 [8]             JSR     VOUTCH
E4DA 3536             (     flexflpy.asm):00245 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00246         
E4DC 8627             (     flexflpy.asm):00247 [2]             LDA     #39                               ;
E4DE B7E988           (     flexflpy.asm):00248 [5]             STA     debcyl                            ;
E4E1 BDE7EE           (     flexflpy.asm):00249 [8]             JSR     SETTRACK
                      (     flexflpy.asm):00250         
E4E4 3436             (     flexflpy.asm):00251 [5+6]           PSHS    A,B,X,Y
E4E6 863C             (     flexflpy.asm):00252 [2]             LDA     #'<'
E4E8 BDDE4C           (     flexflpy.asm):00253 [8]             JSR     VOUTCH
E4EB BDDE4C           (     flexflpy.asm):00254 [8]             JSR     VOUTCH
E4EE BDDE4C           (     flexflpy.asm):00255 [8]             JSR     VOUTCH
E4F1 BDDE4C           (     flexflpy.asm):00256 [8]             JSR     VOUTCH
E4F4 3536             (     flexflpy.asm):00257 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00258         
                      (     flexflpy.asm):00259         
E4F6 7EE81D           (     flexflpy.asm):00260 [4]             JMP     RECAL                             ;
                      (     flexflpy.asm):00261         
                      (     flexflpy.asm):00262         
                      (     flexflpy.asm):00263         ;__FL_READ_SECTOR________________________________________________________________________________________________________________
                      (     flexflpy.asm):00264         ;
                      (     flexflpy.asm):00265         ;       READ A FLOPPY SECTOR
                      (     flexflpy.asm):00266         ;
                      (     flexflpy.asm):00267         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (     flexflpy.asm):00268         ;                   (A) = Track Number
                      (     flexflpy.asm):00269         ;                   (B) = Sector Number
                      (     flexflpy.asm):00270         ;
                      (     flexflpy.asm):00271         ;           EXIT -  (X) May be destroyed
                      (     flexflpy.asm):00272         ;                   (A) May be destroyed
                      (     flexflpy.asm):00273         ;                   (B) = Error condition
                      (     flexflpy.asm):00274         ;                   (Z) = 1 if no error
                      (     flexflpy.asm):00275         ;                       = 0 if an error
                      (     flexflpy.asm):00276         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00277         ;
                      (     flexflpy.asm):00278         ;
E4F9                  (     flexflpy.asm):00279         FL_READ_SECTOR:
                      (     flexflpy.asm):00280         
E4F9 3436             (     flexflpy.asm):00281 [5+6]           PSHS    A,B,X,y
E4FB FDE9BD           (     flexflpy.asm):00282 [6]             STD     FLOPPYWORKVAR
E4FE 8EE9BD           (     flexflpy.asm):00283 [3]             LDX     #FLOPPYWORKVAR
E501 BDCFCC           (     flexflpy.asm):00284 [8]             JSR     OUTADR                            ; PRINT BASE PORT
E504 BDCEB1           (     flexflpy.asm):00285 [8]             JSR     >PCRLF                            ; AND CRLF
E507 3536             (     flexflpy.asm):00286 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00287         
E509 3402             (     flexflpy.asm):00288 [5+1]           PSHS    A
E50B B6E986           (     flexflpy.asm):00289 [5]             LDA     HARDWARE_DETCT
E50E 8100             (     flexflpy.asm):00290 [2]             CMPA    #$00
E510 2706             (     flexflpy.asm):00291 [3]             BEQ     >
E512 3502             (     flexflpy.asm):00292 [5+1]           PULS    A
E514                  (     flexflpy.asm):00293         FL_READ_SECTOR_ERROR:
E514 C61F             (     flexflpy.asm):00294 [2]             LDB     #$1F
E516 57               (     flexflpy.asm):00295 [2]             ASRB
E517 39               (     flexflpy.asm):00296 [5]             RTS
                      (     flexflpy.asm):00297         !
E518 B7E991           (     flexflpy.asm):00298 [5]             STA     FLRETRY                           ; BLANK RETRIES
E51B B7E992           (     flexflpy.asm):00299 [5]             STA     FLRETRY1
                      (     flexflpy.asm):00300         
E51E 3502             (     flexflpy.asm):00301 [5+1]           PULS    A
E520 3410             (     flexflpy.asm):00302 [5+2]           PSHS    X
E522 F7E9BD           (     flexflpy.asm):00303 [5]             STB     FLOPPYWORKVAR                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E525 BDE545           (     flexflpy.asm):00304 [8]             JSR     FL_READ_SECTOR_RAW
E528 3510             (     flexflpy.asm):00305 [5+2]           PULS    X
E52A 26E8             (     flexflpy.asm):00306 [3]             BNE     FL_READ_SECTOR_ERROR
                      (     flexflpy.asm):00307         
E52C B6E9BD           (     flexflpy.asm):00308 [5]             LDA     FLOPPYWORKVAR
E52F 8401             (     flexflpy.asm):00309 [2]             ANDA    #$01
E531 C600             (     flexflpy.asm):00310 [2]             LDB     #$00
E533 1F02             (     flexflpy.asm):00311 [6]             TFR     D,Y                               ; Y NOW HAS HSTBUF OFFSET
E535 C600             (     flexflpy.asm):00312 [2]             LDB     #$00                              ; DEBLOCK TO ADDRESS IN "X"
                      (     flexflpy.asm):00313         !
E537 A6A9ECCA         (     flexflpy.asm):00314 [4+4]           LDA     HSTBUF,Y
E53B A780             (     flexflpy.asm):00315 [4+2]           STA     ,X+
E53D 3121             (     flexflpy.asm):00316 [5]             INY
E53F 5C               (     flexflpy.asm):00317 [2]             INCB
E540 C100             (     flexflpy.asm):00318 [2]             CMPB    #$00
E542 26F3             (     flexflpy.asm):00319 [3]             BNE     <
E544 39               (     flexflpy.asm):00320 [5]             RTS
                      (     flexflpy.asm):00321         
E545                  (     flexflpy.asm):00322         FL_READ_SECTOR_RAW:
E545 BDE6E8           (     flexflpy.asm):00323 [8]             JSR     SETUP_FD_CHS
                      (     flexflpy.asm):00324         ;  DBGFLAG 'A'
E548 3436             (     flexflpy.asm):00325 [5+6]           PSHS    A,B,X,Y
E54A 8641             (     flexflpy.asm):00326 [2]             LDA     #'A'
E54C BDDE4C           (     flexflpy.asm):00327 [8]             JSR     VOUTCH
E54F BDDE4C           (     flexflpy.asm):00328 [8]             JSR     VOUTCH
E552 BDDE4C           (     flexflpy.asm):00329 [8]             JSR     VOUTCH
E555 BDDE4C           (     flexflpy.asm):00330 [8]             JSR     VOUTCH
E558 BDDE4C           (     flexflpy.asm):00331 [8]             JSR     VOUTCH
E55B BDDE4C           (     flexflpy.asm):00332 [8]             JSR     VOUTCH
E55E 3536             (     flexflpy.asm):00333 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00334         
                      (     flexflpy.asm):00335         
E560 860C             (     flexflpy.asm):00336 [2]             LDA     #DOR_INIT                         ; POINT TO FDC_DOR
E562 BADE20           (     flexflpy.asm):00337 [5]             ORA     CURDRVADDRESS
E565 B7FE36           (     flexflpy.asm):00338 [5]             STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      (     flexflpy.asm):00339         ;   DBGFLAG 'B'
E568 3436             (     flexflpy.asm):00340 [5+6]           PSHS    A,B,X,Y
E56A 8642             (     flexflpy.asm):00341 [2]             LDA     #'B'
E56C BDDE4C           (     flexflpy.asm):00342 [8]             JSR     VOUTCH
E56F BDDE4C           (     flexflpy.asm):00343 [8]             JSR     VOUTCH
E572 BDDE4C           (     flexflpy.asm):00344 [8]             JSR     VOUTCH
E575 BDDE4C           (     flexflpy.asm):00345 [8]             JSR     VOUTCH
E578 BDDE4C           (     flexflpy.asm):00346 [8]             JSR     VOUTCH
E57B 3536             (     flexflpy.asm):00347 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00348         
                      (     flexflpy.asm):00349         ;    DBGFLAG 'C'
E57D B6E987           (     flexflpy.asm):00350 [5]             LDA     debhead                           ;
E580 B1E98A           (     flexflpy.asm):00351 [5]             CMPA    Cdebhead                          ;
E583 2628             (     flexflpy.asm):00352 [3]             BNE     READFL_DIRTY
E585 B6E988           (     flexflpy.asm):00353 [5]             LDA     debcyl                            ;
E588 B1E98B           (     flexflpy.asm):00354 [5]             CMPA    Cdebcyl                           ;
E58B 2620             (     flexflpy.asm):00355 [3]             BNE     READFL_DIRTY
E58D B6E989           (     flexflpy.asm):00356 [5]             LDA     debsec                            ;
E590 B1E98C           (     flexflpy.asm):00357 [5]             CMPA    Cdebsec                           ;
E593 2618             (     flexflpy.asm):00358 [3]             BNE     READFL_DIRTY
                      (     flexflpy.asm):00359         ; SECTOR ALREADY IN CACHE, DEBLOCK
                      (     flexflpy.asm):00360         ;   DBGFLAG 'D'
E595 3436             (     flexflpy.asm):00361 [5+6]           PSHS    A,B,X,Y
E597 8644             (     flexflpy.asm):00362 [2]             LDA     #'D'
E599 BDDE4C           (     flexflpy.asm):00363 [8]             JSR     VOUTCH
E59C BDDE4C           (     flexflpy.asm):00364 [8]             JSR     VOUTCH
E59F BDDE4C           (     flexflpy.asm):00365 [8]             JSR     VOUTCH
E5A2 BDDE4C           (     flexflpy.asm):00366 [8]             JSR     VOUTCH
E5A5 BDDE4C           (     flexflpy.asm):00367 [8]             JSR     VOUTCH
E5A8 3536             (     flexflpy.asm):00368 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00369         
E5AA 8600             (     flexflpy.asm):00370 [2]             LDA     #$00
E5AC 39               (     flexflpy.asm):00371 [5]             RTS
E5AD                  (     flexflpy.asm):00372         READFL_DIRTY:
                      (     flexflpy.asm):00373         ;   DBGFLAG 'E'
E5AD 3436             (     flexflpy.asm):00374 [5+6]           PSHS    A,B,X,Y
E5AF 8645             (     flexflpy.asm):00375 [2]             LDA     #'E'
E5B1 BDDE4C           (     flexflpy.asm):00376 [8]             JSR     VOUTCH
E5B4 BDDE4C           (     flexflpy.asm):00377 [8]             JSR     VOUTCH
E5B7 BDDE4C           (     flexflpy.asm):00378 [8]             JSR     VOUTCH
E5BA BDDE4C           (     flexflpy.asm):00379 [8]             JSR     VOUTCH
E5BD BDDE4C           (     flexflpy.asm):00380 [8]             JSR     VOUTCH
E5C0 3536             (     flexflpy.asm):00381 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00382         
E5C2 B6E987           (     flexflpy.asm):00383 [5]             LDA     debhead                           ; STORE CURRENT PARMS
E5C5 B7E98A           (     flexflpy.asm):00384 [5]             STA     Cdebhead                          ;
E5C8 B6E988           (     flexflpy.asm):00385 [5]             LDA     debcyl                            ;
E5CB B7E98B           (     flexflpy.asm):00386 [5]             STA     Cdebcyl                           ;
E5CE B6E989           (     flexflpy.asm):00387 [5]             LDA     debsec                            ;
E5D1 B7E98C           (     flexflpy.asm):00388 [5]             STA     Cdebsec                           ;
                      (     flexflpy.asm):00389         
E5D4                  (     flexflpy.asm):00390         READFL1:
                      (     flexflpy.asm):00391         ;  DBGFLAG 'F'
E5D4 3436             (     flexflpy.asm):00392 [5+6]           PSHS    A,B,X,Y
E5D6 8646             (     flexflpy.asm):00393 [2]             LDA     #'F'
E5D8 BDDE4C           (     flexflpy.asm):00394 [8]             JSR     VOUTCH
E5DB BDDE4C           (     flexflpy.asm):00395 [8]             JSR     VOUTCH
E5DE BDDE4C           (     flexflpy.asm):00396 [8]             JSR     VOUTCH
E5E1 BDDE4C           (     flexflpy.asm):00397 [8]             JSR     VOUTCH
E5E4 BDDE4C           (     flexflpy.asm):00398 [8]             JSR     VOUTCH
E5E7 3536             (     flexflpy.asm):00399 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00400         
E5E9 8646             (     flexflpy.asm):00401 [2]             LDA     #CFD_READ|CFD_MFM                 ; BIT 6 SETS MFM, 06H IS READ COMMAND
E5EB B7E98F           (     flexflpy.asm):00402 [5]             STA     FCMD                              ; SET COMMAND
E5EE BDE718           (     flexflpy.asm):00403 [8]             JSR     DSKOP                             ; DO DISK OPERATION
                      (     flexflpy.asm):00404         
                      (     flexflpy.asm):00405         ;  DBGFLAG '!'
E5F1 3436             (     flexflpy.asm):00406 [5+6]           PSHS    A,B,X,Y
E5F3 8621             (     flexflpy.asm):00407 [2]             LDA     #'!'
E5F5 BDDE4C           (     flexflpy.asm):00408 [8]             JSR     VOUTCH
E5F8 BDDE4C           (     flexflpy.asm):00409 [8]             JSR     VOUTCH
E5FB BDDE4C           (     flexflpy.asm):00410 [8]             JSR     VOUTCH
E5FE BDDE4C           (     flexflpy.asm):00411 [8]             JSR     VOUTCH
E601 BDDE4C           (     flexflpy.asm):00412 [8]             JSR     VOUTCH
E604 3536             (     flexflpy.asm):00413 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00414         
E606 8100             (     flexflpy.asm):00415 [2]             CMPA    #$00
E608 2743             (     flexflpy.asm):00416 [3]             BEQ     READFLDONE                        ; OPERATION SUCCESSFUL
E60A 7CE991           (     flexflpy.asm):00417 [7]             INC     FLRETRY                           ; LET'S RETRY
E60D B6E991           (     flexflpy.asm):00418 [5]             LDA     FLRETRY
E610 8106             (     flexflpy.asm):00419 [2]             CMPA    #FLOPPY_RETRIES
E612 26C0             (     flexflpy.asm):00420 [3]             BNE     READFL1
E614 BDE81D           (     flexflpy.asm):00421 [8]             JSR     RECAL                             ; AFTER X RETRIES, LET'S RECAL THE HEAD
E617 BDE7EE           (     flexflpy.asm):00422 [8]             JSR     SETTRACK                          ;
E61A 8600             (     flexflpy.asm):00423 [2]             LDA     #$00                              ;
E61C B7E991           (     flexflpy.asm):00424 [5]             STA     FLRETRY                           ; MORE RETRIES!
E61F 7CE992           (     flexflpy.asm):00425 [7]             INC     FLRETRY1
E622 B6E992           (     flexflpy.asm):00426 [5]             LDA     FLRETRY1
E625 8102             (     flexflpy.asm):00427 [2]             CMPA    #FLOPPY_RETRIES1
E627 26AB             (     flexflpy.asm):00428 [3]             BNE     READFL1
                      (     flexflpy.asm):00429         
E629 86FF             (     flexflpy.asm):00430 [2]             LDA     #$FF                              ; RETRIES FAILED, INVALIDATE CACHE AND REPORT ERROR
E62B B7E98A           (     flexflpy.asm):00431 [5]             STA     Cdebhead                          ;
E62E B7E98B           (     flexflpy.asm):00432 [5]             STA     Cdebcyl                           ;
E631 B7E98C           (     flexflpy.asm):00433 [5]             STA     Cdebsec                           ;
                      (     flexflpy.asm):00434         ;  DBGFLAG 'G'
E634 3436             (     flexflpy.asm):00435 [5+6]           PSHS    A,B,X,Y
E636 8647             (     flexflpy.asm):00436 [2]             LDA     #'G'
E638 BDDE4C           (     flexflpy.asm):00437 [8]             JSR     VOUTCH
E63B BDDE4C           (     flexflpy.asm):00438 [8]             JSR     VOUTCH
E63E BDDE4C           (     flexflpy.asm):00439 [8]             JSR     VOUTCH
E641 BDDE4C           (     flexflpy.asm):00440 [8]             JSR     VOUTCH
E644 BDDE4C           (     flexflpy.asm):00441 [8]             JSR     VOUTCH
E647 3536             (     flexflpy.asm):00442 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00443         
E649 C61F             (     flexflpy.asm):00444 [2]             LDB     #$1F
E64B 57               (     flexflpy.asm):00445 [2]             ASRB
E64C 39               (     flexflpy.asm):00446 [5]             RTS                                       ; B = $1F ON RETURN = OPERATION ERROR
E64D                  (     flexflpy.asm):00447         READFLDONE:
                      (     flexflpy.asm):00448         ;   DBGFLAG 'H'
E64D 3436             (     flexflpy.asm):00449 [5+6]           PSHS    A,B,X,Y
E64F 8648             (     flexflpy.asm):00450 [2]             LDA     #'H'
E651 BDDE4C           (     flexflpy.asm):00451 [8]             JSR     VOUTCH
E654 BDDE4C           (     flexflpy.asm):00452 [8]             JSR     VOUTCH
E657 BDDE4C           (     flexflpy.asm):00453 [8]             JSR     VOUTCH
E65A BDDE4C           (     flexflpy.asm):00454 [8]             JSR     VOUTCH
E65D BDDE4C           (     flexflpy.asm):00455 [8]             JSR     VOUTCH
E660 3536             (     flexflpy.asm):00456 [5+6]           PULS    A,B,X,Y
                      (     flexflpy.asm):00457         
E662 C600             (     flexflpy.asm):00458 [2]             LDB     #$00                              ; B = 0 ON RETURN = OPERATION OK
E664 39               (     flexflpy.asm):00459 [5]             RTS
                      (     flexflpy.asm):00460         
                      (     flexflpy.asm):00461         ;__FL_WRITE_SECTOR_______________________________________________________________________________________________________________
                      (     flexflpy.asm):00462         ;
                      (     flexflpy.asm):00463         ;       WRITE A FLOPPY SECTOR
                      (     flexflpy.asm):00464         ;
                      (     flexflpy.asm):00465         ;           ENTRY - (X) = Address in memory where sector is to be placed.
                      (     flexflpy.asm):00466         ;                   (A) = Track Number
                      (     flexflpy.asm):00467         ;                   (B) = Sector Number
                      (     flexflpy.asm):00468         ;
                      (     flexflpy.asm):00469         ;           EXIT -  (X) May be destroyed
                      (     flexflpy.asm):00470         ;                   (A) May be destroyed
                      (     flexflpy.asm):00471         ;                   (B) = Error condition
                      (     flexflpy.asm):00472         ;                   (Z) = 1 if no error
                      (     flexflpy.asm):00473         ;                       = 0 if an error
                      (     flexflpy.asm):00474         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00475         ;
E665                  (     flexflpy.asm):00476         FL_WRITE_SECTOR:
E665 3402             (     flexflpy.asm):00477 [5+1]           PSHS    A
E667 B6E986           (     flexflpy.asm):00478 [5]             LDA     HARDWARE_DETCT
E66A 8100             (     flexflpy.asm):00479 [2]             CMPA    #$00
E66C 2706             (     flexflpy.asm):00480 [3]             BEQ     >
E66E 3502             (     flexflpy.asm):00481 [5+1]           PULS    A
E670                  (     flexflpy.asm):00482         FL_WRITE_SECTOR_ERROR:
E670 C61F             (     flexflpy.asm):00483 [2]             LDB     #$1F
E672 57               (     flexflpy.asm):00484 [2]             ASRB
E673 39               (     flexflpy.asm):00485 [5]             RTS
                      (     flexflpy.asm):00486         !
E674 3502             (     flexflpy.asm):00487 [5+1]           PULS    A
E676 3410             (     flexflpy.asm):00488 [5+2]           PSHS    X
E678 F7E9BD           (     flexflpy.asm):00489 [5]             STB     FLOPPYWORKVAR                     ; KEEP SECTOR NUMBER HERE FOR DEBLOCKING
E67B BDE545           (     flexflpy.asm):00490 [8]             JSR     FL_READ_SECTOR_RAW
E67E 3510             (     flexflpy.asm):00491 [5+2]           PULS    X
E680 26EE             (     flexflpy.asm):00492 [3]             BNE     FL_WRITE_SECTOR_ERROR
                      (     flexflpy.asm):00493         
E682 B6E9BD           (     flexflpy.asm):00494 [5]             LDA     FLOPPYWORKVAR
E685 8401             (     flexflpy.asm):00495 [2]             ANDA    #$01
E687 C600             (     flexflpy.asm):00496 [2]             LDB     #$00
E689 1F02             (     flexflpy.asm):00497 [6]             TFR     D,Y                               ; Y NOW HAS HSTBUF OFFSET
E68B C600             (     flexflpy.asm):00498 [2]             LDB     #$00                              ; BLOCK TO ADDRESS IN "X"
                      (     flexflpy.asm):00499         !
E68D A680             (     flexflpy.asm):00500 [4+2]           LDA     ,X+
E68F A7A9ECCA         (     flexflpy.asm):00501 [4+4]           STA     HSTBUF,Y
E693 3121             (     flexflpy.asm):00502 [5]             INY
E695 5C               (     flexflpy.asm):00503 [2]             INCB
E696 C100             (     flexflpy.asm):00504 [2]             CMPB    #$00
E698 26F3             (     flexflpy.asm):00505 [3]             BNE     <
                      (     flexflpy.asm):00506         
E69A F7E991           (     flexflpy.asm):00507 [5]             STB     FLRETRY                           ; BLANK RETRIES
E69D F7E992           (     flexflpy.asm):00508 [5]             STB     FLRETRY1
                      (     flexflpy.asm):00509         
E6A0 86FF             (     flexflpy.asm):00510 [2]             LDA     #$FF
E6A2 B7E98A           (     flexflpy.asm):00511 [5]             STA     Cdebhead                          ; INVALIDATE CACHE
E6A5 B7E98B           (     flexflpy.asm):00512 [5]             STA     Cdebcyl                           ;
E6A8 B7E98C           (     flexflpy.asm):00513 [5]             STA     Cdebsec                           ;
                      (     flexflpy.asm):00514         
E6AB                  (     flexflpy.asm):00515         WRITEFL1:
E6AB 8645             (     flexflpy.asm):00516 [2]             LDA     #CFD_WRITE|CFD_MFM                ; BIT 6 SETS MFM, 05H IS WRITE COMMAND
E6AD B7E98F           (     flexflpy.asm):00517 [5]             STA     FCMD
E6B0 BDE718           (     flexflpy.asm):00518 [8]             JSR     DSKOP
                      (     flexflpy.asm):00519         
E6B3 8100             (     flexflpy.asm):00520 [2]             CMPA    #$00
E6B5 272E             (     flexflpy.asm):00521 [3]             BEQ     WRITEFLDONE
E6B7 7CE991           (     flexflpy.asm):00522 [7]             INC     FLRETRY
E6BA B6E991           (     flexflpy.asm):00523 [5]             LDA     FLRETRY
E6BD 8106             (     flexflpy.asm):00524 [2]             CMPA    #FLOPPY_RETRIES
E6BF 26EA             (     flexflpy.asm):00525 [3]             BNE     WRITEFL1
E6C1 BDE81D           (     flexflpy.asm):00526 [8]             JSR     RECAL
E6C4 BDE7EE           (     flexflpy.asm):00527 [8]             JSR     SETTRACK
E6C7 8600             (     flexflpy.asm):00528 [2]             LDA     #$00
E6C9 B7E991           (     flexflpy.asm):00529 [5]             STA     FLRETRY
E6CC 7CE992           (     flexflpy.asm):00530 [7]             INC     FLRETRY1
E6CF B6E992           (     flexflpy.asm):00531 [5]             LDA     FLRETRY1
E6D2 8102             (     flexflpy.asm):00532 [2]             CMPA    #FLOPPY_RETRIES1
E6D4 26D5             (     flexflpy.asm):00533 [3]             BNE     WRITEFL1
E6D6 86FF             (     flexflpy.asm):00534 [2]             LDA     #$FF                              ; INVALIDATE CACHE
E6D8 B7E98A           (     flexflpy.asm):00535 [5]             STA     Cdebhead                          ;
E6DB B7E98B           (     flexflpy.asm):00536 [5]             STA     Cdebcyl                           ;
E6DE B7E98C           (     flexflpy.asm):00537 [5]             STA     Cdebsec                           ;
E6E1 C61F             (     flexflpy.asm):00538 [2]             LDB     #$1F
E6E3 57               (     flexflpy.asm):00539 [2]             ASRB
E6E4 39               (     flexflpy.asm):00540 [5]             RTS                                       ; B = $1F ON RETURN = OPERATION ERROR
                      (     flexflpy.asm):00541         
E6E5                  (     flexflpy.asm):00542         WRITEFLDONE:
E6E5 8600             (     flexflpy.asm):00543 [2]             LDA     #$00                              ; B = 0 ON RETURN = OPERATION OK
E6E7 39               (     flexflpy.asm):00544 [5]             RTS
                      (     flexflpy.asm):00545         
                      (     flexflpy.asm):00546         
                      (     flexflpy.asm):00547         ;__SETUP_FD_CHS__________________________________________________________________________________________________________________
                      (     flexflpy.asm):00548         ;
                      (     flexflpy.asm):00549         ;       TRANSFORM FLEX CHS TO FLOPPY
                      (     flexflpy.asm):00550         ;
                      (     flexflpy.asm):00551         ;                   (A) = Track Number
                      (     flexflpy.asm):00552         ;                   (B) = Sector Number
                      (     flexflpy.asm):00553         ;
                      (     flexflpy.asm):00554         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00555         ;
E6E8                  (     flexflpy.asm):00556         SETUP_FD_CHS:
E6E8 3402             (     flexflpy.asm):00557 [5+1]           PSHS    A                                 ; STORE TRACK #
E6EA 8401             (     flexflpy.asm):00558 [2]             ANDA    #$01                              ; FILTER OUT HEAD
E6EC B7E987           (     flexflpy.asm):00559 [5]             STA     debhead                           ; STORE HEAD
E6EF 3502             (     flexflpy.asm):00560 [5+1]           PULS    A                                 ; TRACK# BACK IN A
E6F1 44               (     flexflpy.asm):00561 [2]             LSRA                                      ; REMOVE HEAD BIT
E6F2 B7E988           (     flexflpy.asm):00562 [5]             STA     debcyl                            ; STORE IN TRACK
E6F5 54               (     flexflpy.asm):00563 [2]             LSRB                                      ; SECTOR DIVIDE BY 2 (FOR BLOCKING)
E6F6 F7E989           (     flexflpy.asm):00564 [5]             STB     debsec                            ; STORE IN SECTOR
                      (     flexflpy.asm):00565         
                      (     flexflpy.asm):00566                 IF      USEDSKYNG = 1
                      (     flexflpy.asm):00567         ;PRTDBG "DSKY OUTPUT 1$"
E6F9 B6DE1E           (     flexflpy.asm):00568 [5]                 LDA     CURDRV
E6FC B7EC9B           (     flexflpy.asm):00569 [5]                 STA     DSKY_HEXBUF
E6FF B6E987           (     flexflpy.asm):00570 [5]                 LDA     debhead
E702 B7EC9C           (     flexflpy.asm):00571 [5]                 STA     DSKY_HEXBUF+1
E705 B6E988           (     flexflpy.asm):00572 [5]                 LDA     debcyl
E708 B7EC9D           (     flexflpy.asm):00573 [5]                 STA     DSKY_HEXBUF+2
E70B B6E989           (     flexflpy.asm):00574 [5]                 LDA     debsec
E70E B7EC9E           (     flexflpy.asm):00575 [5]                 STA     DSKY_HEXBUF+3
E711 BDEAD0           (     flexflpy.asm):00576 [8]                 JSR     DSKY_BIN2SEG
E714 BDEB17           (     flexflpy.asm):00577 [8]                 JSR     DSKY_SHOW
                      (     flexflpy.asm):00578                     ENDC
E717 39               (     flexflpy.asm):00579 [5]                 RTS
                      (     flexflpy.asm):00580         
                      (     flexflpy.asm):00581         ;__DSKOP__________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00582         ;
                      (     flexflpy.asm):00583         ;       PERFORM A DISK OPERATION
                      (     flexflpy.asm):00584         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00585         ;
E718                  (     flexflpy.asm):00586         DSKOP:
E718 1A10             (     flexflpy.asm):00587 [3]                 SEI
E71A BDE8A8           (     flexflpy.asm):00588 [8]                 JSR     CHECKINT                          ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
E71D 81FF             (     flexflpy.asm):00589 [2]                 CMPA    #$FF                              ; DID IT RETURN WITH ERROR CODE?
E71F 2710             (     flexflpy.asm):00590 [3]                 BEQ     DSKEXIT                           ; IF YES, EXIT WITH ERROR CODE
                      (     flexflpy.asm):00591         ;
E721 BDE7EE           (     flexflpy.asm):00592 [8]                 JSR     SETTRACK                          ; PERFORM SEEK TO TRACK
                      (     flexflpy.asm):00593         ;
E724 B6E98F           (     flexflpy.asm):00594 [5]                 LDA     FCMD                              ; WHAT COMMAND IS PENDING?
E727 8146             (     flexflpy.asm):00595 [2]                 CMPA    #CFD_READ|CFD_MFM                 ; IS IT A READ COMMAND?
E729 2603             (     flexflpy.asm):00596 [3]                 BNE     GWRR_POLL                         ;
E72B 7EE785           (     flexflpy.asm):00597 [4]                 JMP     RDD_POLL                          ;
E72E                  (     flexflpy.asm):00598         GWRR_POLL:
E72E 7EE7CF           (     flexflpy.asm):00599 [4]                 JMP     WRR_POLL                          ;
E731                  (     flexflpy.asm):00600         DSKEXIT:
E731 8600             (     flexflpy.asm):00601 [2]                 LDA     #$00                              ; SET MOTOR OFF
E733 B7FE36           (     flexflpy.asm):00602 [5]                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
E736 86FF             (     flexflpy.asm):00603 [2]                 LDA     #$FF                              ; SET IF ERROR
E738 1CEF             (     flexflpy.asm):00604 [3]                 CLI
E73A 39               (     flexflpy.asm):00605 [5]                 RTS
                      (     flexflpy.asm):00606         
E73B                  (     flexflpy.asm):00607         SNDFDWR:
E73B 1CFE             (     flexflpy.asm):00608 [3]                 CLC
E73D B6DE20           (     flexflpy.asm):00609 [5]                 LDA     CURDRVADDRESS                     ; GET DISK UNIT NUMBER
E740 8403             (     flexflpy.asm):00610 [2]                 ANDA    #$03                              ; MASK FOR FOUR DRIVES.
E742 B7E98E           (     flexflpy.asm):00611 [5]                 STA     UNIT                              ; PARK IT IN TEMP
E745 B6E987           (     flexflpy.asm):00612 [5]                 LDA     debhead                           ; GET HEAD SELECTION
E748 8401             (     flexflpy.asm):00613 [2]                 ANDA    #$01                              ; INSURE SINGLE BIT
E74A 48               (     flexflpy.asm):00614 [2]                 ASLA                                      ;
E74B 48               (     flexflpy.asm):00615 [2]                 ASLA                                      ; MOVE HEAD TO BIT 2 POSITION
E74C BAE98E           (     flexflpy.asm):00616 [5]                 ORA     UNIT                              ; OR HEAD TO UNIT BYTE IN COMMAND BLOCK
E74F B7E98E           (     flexflpy.asm):00617 [5]                 STA     UNIT                              ; STORE IN UNIT
E752 B6E98F           (     flexflpy.asm):00618 [5]                 LDA     FCMD                              ;
E755 BDE847           (     flexflpy.asm):00619 [8]                 JSR     PFDATA                            ; PUSH COMMAND TO I8272
E758 B6E98E           (     flexflpy.asm):00620 [5]                 LDA     UNIT                              ;
E75B BDE847           (     flexflpy.asm):00621 [8]                 JSR     PFDATA                            ;
E75E B6E988           (     flexflpy.asm):00622 [5]                 LDA     debcyl                            ;
E761 BDE847           (     flexflpy.asm):00623 [8]                 JSR     PFDATA                            ;
E764 B6E987           (     flexflpy.asm):00624 [5]                 LDA     debhead                           ;
E767 BDE847           (     flexflpy.asm):00625 [8]                 JSR     PFDATA                            ;
E76A B6E989           (     flexflpy.asm):00626 [5]                 LDA     debsec                            ;
E76D BDE847           (     flexflpy.asm):00627 [8]                 JSR     PFDATA                            ;
E770 8602             (     flexflpy.asm):00628 [2]                 LDA     #$02                              ;
E772 BDE847           (     flexflpy.asm):00629 [8]                 JSR     PFDATA                            ; WHAT DENSITY
E775 8609             (     flexflpy.asm):00630 [2]                 LDA     #$09                              ;
E777 BDE847           (     flexflpy.asm):00631 [8]                 JSR     PFDATA                            ; ASSUME SC (SECTOR COUNT)  EOT
E77A 861B             (     flexflpy.asm):00632 [2]                 LDA     #$1B                              ;
E77C BDE847           (     flexflpy.asm):00633 [8]                 JSR     PFDATA                            ; WHAT GAP IS NEEDED
E77F 86FF             (     flexflpy.asm):00634 [2]                 LDA     #$FF                              ; DTL, IS THE LAST COMMAND BYTE TO I8272
E781 BDE878           (     flexflpy.asm):00635 [8]                 JSR     PFDATAS
E784 39               (     flexflpy.asm):00636 [5]                 RTS
                      (     flexflpy.asm):00637         ; PERFORM READ
                      (     flexflpy.asm):00638         ; FROM READ TO READ MUST NOT EXCEED 27US WORST CASE MIN.
                      (     flexflpy.asm):00639         ; AT  4MHZ is 1us/c, 6Mhz is .667us/c,  8mhz is .5 us/c
                      (     flexflpy.asm):00640         ; 27/40/54 CYCLE BUDGET -- read currently takes 32 cycles !!!
                      (     flexflpy.asm):00641         ; These can be doubled if FM mode is chosen -- which MAY be necessary for a 4mHz 6809
E785                  (     flexflpy.asm):00642         RDD_POLL:
E785 3436             (     flexflpy.asm):00643 [5+6]               PSHS    A,B,X,Y
E787 863C             (     flexflpy.asm):00644 [2]                 LDA     #'<'
E789 BDDE4C           (     flexflpy.asm):00645 [8]                 JSR     VOUTCH
E78C BDDE4C           (     flexflpy.asm):00646 [8]                 JSR     VOUTCH
E78F BDDE4C           (     flexflpy.asm):00647 [8]                 JSR     VOUTCH
E792 BDDE4C           (     flexflpy.asm):00648 [8]                 JSR     VOUTCH
E795 BDDE4C           (     flexflpy.asm):00649 [8]                 JSR     VOUTCH
E798 3536             (     flexflpy.asm):00650 [5+6]               PULS    A,B,X,Y
                      (     flexflpy.asm):00651         
E79A 8EECCA           (     flexflpy.asm):00652 [3]                 LDX     #HSTBUF                           ; SET DESTINATION BUFFER
E79D 108E0200         (     flexflpy.asm):00653 [4]                 LDY     #$0200                            ; SET SECTOR LENGTH
E7A1 BDE73B           (     flexflpy.asm):00654 [8]                 JSR     SNDFDWR                           ;
E7A4                  (     flexflpy.asm):00655         RDS1:
E7A4 B6FE30           (     flexflpy.asm):00656 [5]                 LDA     FDC_MSR                           ; GET STATUS
E7A7 2AFB             (     flexflpy.asm):00657 [3]                 BPL     RDS1                              ; FDC IS NOT READY, WAIT FOR IT
E7A9 8520             (     flexflpy.asm):00658 [2]                 BITA    #%00100000                        ; EXECUTION MODE?
E7AB 2709             (     flexflpy.asm):00659 [3]                 BEQ     DSKOPEND                          ; NO, ERROR
E7AD B6FE31           (     flexflpy.asm):00660 [5]                 LDA     FDC_DATA                          ; GET DATA
E7B0 A780             (     flexflpy.asm):00661 [4+2]               STA     ,X+                               ; WRITE IT
E7B2 313F             (     flexflpy.asm):00662 [4+1]               LEAY    -1,Y                              ;
E7B4 26EE             (     flexflpy.asm):00663 [3]                 BNE     RDS1                              ; KEEP GOING
E7B6                  (     flexflpy.asm):00664         DSKOPEND:
                      (     flexflpy.asm):00665                                                               ;DBGFLAG 'Y'
E7B6 B6FE37           (     flexflpy.asm):00666 [5]                 LDA     FDC_TC
E7B9 BDE96F           (     flexflpy.asm):00667 [8]                 JSR     FDDELAY
E7BC BDE8FA           (     flexflpy.asm):00668 [8]                 JSR     GFDATA                            ;GET ERROR TYPE
E7BF B7E98D           (     flexflpy.asm):00669 [5]                 STA     FLERR
                      (     flexflpy.asm):00670         ;DBGFLAG '('
                      (     flexflpy.asm):00671         ;;* CLEAR OUT ANY REMAINING DATA
E7C2                  (     flexflpy.asm):00672         RESUL3:
E7C2 BDE8FA           (     flexflpy.asm):00673 [8]                 JSR     GFDATA                            ;READ BYTE FROM FDC
E7C5 8100             (     flexflpy.asm):00674 [2]                 CMPA    #$00
E7C7 26F9             (     flexflpy.asm):00675 [3]                 BNE     RESUL3                            ;CLEAR THEM ALL
                      (     flexflpy.asm):00676         ;DBGFLAG ')'
E7C9 B6E98D           (     flexflpy.asm):00677 [5]                 LDA     FLERR                             ;
E7CC 84C0             (     flexflpy.asm):00678 [2]                 ANDA    #%11000000                        ;
E7CE 39               (     flexflpy.asm):00679 [5]                 RTS
                      (     flexflpy.asm):00680         
E7CF                  (     flexflpy.asm):00681         WRR_POLL:
E7CF 8EECCA           (     flexflpy.asm):00682 [3]                 LDX     #HSTBUF                           ; SET DESTINATION BUFFER
E7D2 108E0200         (     flexflpy.asm):00683 [4]                 LDY     #$0200                            ; SET SECTOR LENGTH
E7D6 BDE73B           (     flexflpy.asm):00684 [8]                 JSR     SNDFDWR                           ;
E7D9                  (     flexflpy.asm):00685         WRS1:
E7D9 E680             (     flexflpy.asm):00686 [4+2]               LDB     ,X+                               ; GET DATA
E7DB                  (     flexflpy.asm):00687         WRS2:
E7DB B6FE30           (     flexflpy.asm):00688 [5]                 LDA     FDC_MSR                           ; GET STATUS
E7DE 2AFB             (     flexflpy.asm):00689 [3]                 BPL     WRS2                              ; NOT READY
E7E0 8520             (     flexflpy.asm):00690 [2]                 BITA    #%00100000                        ; EXECUTION MODE?
E7E2 2707             (     flexflpy.asm):00691 [3]                 BEQ     WRS3                              ; NO, ERROR
E7E4 B7FE31           (     flexflpy.asm):00692 [5]                 STA     FDC_DATA                          ; WRITE TO FDC
E7E7 313F             (     flexflpy.asm):00693 [4+1]               LEAY    -1,Y                              ;
E7E9 26EE             (     flexflpy.asm):00694 [3]                 BNE     WRS1                              ; DO NEXT
E7EB                  (     flexflpy.asm):00695         WRS3:
E7EB 7EE7B6           (     flexflpy.asm):00696 [4]                 JMP     DSKOPEND                          ;
                      (     flexflpy.asm):00697         
                      (     flexflpy.asm):00698         
                      (     flexflpy.asm):00699         ;__SETTRACK__________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00700         ;
                      (     flexflpy.asm):00701         ;       SEEK TO A TRACK ON GIVEN UNIT
                      (     flexflpy.asm):00702         ;       A: TRACK #
                      (     flexflpy.asm):00703         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00704         ;
E7EE                  (     flexflpy.asm):00705         SETTRACK:
E7EE 860C             (     flexflpy.asm):00706 [2]                 LDA     #DOR_INIT
E7F0 BADE20           (     flexflpy.asm):00707 [5]                 ORA     CURDRVADDRESS                     ; SET MOTOR ON
E7F3 B7FE36           (     flexflpy.asm):00708 [5]                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
                      (     flexflpy.asm):00709         
                      (     flexflpy.asm):00710         ; ANY INTERUPT PENDING
                      (     flexflpy.asm):00711         ; IF YES FIND OUT WHY/CLEAR
E7F6 BDE8A8           (     flexflpy.asm):00712 [8]                 JSR     CHECKINT                          ; CHECK INTERRUPT STATUS, MAKE SURE IT IS CLEAR
E7F9 81FF             (     flexflpy.asm):00713 [2]                 CMPA    #$FF                              ; DID IT RTSURN WITH ERROR CODE?
E7FB 2603             (     flexflpy.asm):00714 [3]                 BNE     SETTRK1
E7FD 7EE846           (     flexflpy.asm):00715 [4]                 JMP     SETTRKEXIT                        ;
                      (     flexflpy.asm):00716         
                      (     flexflpy.asm):00717         ;
E800                  (     flexflpy.asm):00718         SETTRK1:
E800 B6E988           (     flexflpy.asm):00719 [5]                 LDA     debcyl                            ; GET TRACK
E803 8100             (     flexflpy.asm):00720 [2]                 CMPA    #$00                              ;
E805 2716             (     flexflpy.asm):00721 [3]                 BEQ     RECAL                             ; IF 0 PERFORM RECAL INSTEAD OF SEEK
E807 860F             (     flexflpy.asm):00722 [2]                 LDA     #CFD_SEEK                         ; SEEK COMMAND
E809 BDE847           (     flexflpy.asm):00723 [8]                 JSR     PFDATA                            ; PUSH COMMAND
E80C B6DE20           (     flexflpy.asm):00724 [5]                 LDA     CURDRVADDRESS                     ; SAY WHICH UNIT
E80F 8401             (     flexflpy.asm):00725 [2]                 ANDA    #$01
E811 BDE847           (     flexflpy.asm):00726 [8]                 JSR     PFDATA                            ; SEND THAT
E814 B6E988           (     flexflpy.asm):00727 [5]                 LDA     debcyl                            ; TO WHAT TRACK
E817 BDE847           (     flexflpy.asm):00728 [8]                 JSR     PFDATA                            ; SEND THAT TOO
E81A 7EE832           (     flexflpy.asm):00729 [4]                 JMP     WAINT                             ; WAIT FOR INTERRUPT SAYING DONE
E81D                  (     flexflpy.asm):00730         RECAL:
E81D 860C             (     flexflpy.asm):00731 [2]                 LDA     #DOR_INIT
E81F BADE20           (     flexflpy.asm):00732 [5]                 ORA     CURDRVADDRESS                     ; SET MOTOR ON
E822 B7FE36           (     flexflpy.asm):00733 [5]                 STA     FDC_DOR                           ; OUTPUT TO CONTROLLER
E825 8607             (     flexflpy.asm):00734 [2]                 LDA     #CFD_RECAL                        ; RECAL TO TRACK 0
E827 BDE847           (     flexflpy.asm):00735 [8]                 JSR     PFDATA                            ; SEND IT
E82A B6DE20           (     flexflpy.asm):00736 [5]                 LDA     CURDRVADDRESS                     ; WHICH UNIT
E82D 8401             (     flexflpy.asm):00737 [2]                 ANDA    #$01
E82F BDE847           (     flexflpy.asm):00738 [8]                 JSR     PFDATA                            ; SEND THAT TOO
                      (     flexflpy.asm):00739         ;
E832                  (     flexflpy.asm):00740         WAINT:
E832 3410             (     flexflpy.asm):00741 [5+2]               PSHS    X
E834 8E0100           (     flexflpy.asm):00742 [3]                 LDX     #$0100
E837 BDE978           (     flexflpy.asm):00743 [8]                 JSR     FDVDELAY
E83A 3510             (     flexflpy.asm):00744 [5+2]               PULS    X
                      (     flexflpy.asm):00745         !
E83C BDE8A8           (     flexflpy.asm):00746 [8]                 JSR     CHECKINT
E83F B6FE30           (     flexflpy.asm):00747 [5]                 LDA     FDC_MSR                           ; READ SEEK STATUS
E842 840F             (     flexflpy.asm):00748 [2]                 ANDA    #%00001111                        ; ANY DRIVES SEEKING?
E844 26F6             (     flexflpy.asm):00749 [3]                 BNE     <                                 ; YES, WAIT FOR THEM
                      (     flexflpy.asm):00750         ;
E846                  (     flexflpy.asm):00751         SETTRKEXIT:
E846 39               (     flexflpy.asm):00752 [5]                 RTS
                      (     flexflpy.asm):00753         
                      (     flexflpy.asm):00754         ;__PFDATA__________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00755         ;
                      (     flexflpy.asm):00756         ; WRITE A COMMAND OR PARAMETER SEQUENCE
                      (     flexflpy.asm):00757         ;
                      (     flexflpy.asm):00758         ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
                      (     flexflpy.asm):00759         ;       RQM  DIO
                      (     flexflpy.asm):00760         ;       0       0       BUSY
                      (     flexflpy.asm):00761         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      (     flexflpy.asm):00762         ;       1       1       BYTE FOR READ BY HOST PENDING
                      (     flexflpy.asm):00763         ;       0       1       BUSY
                      (     flexflpy.asm):00764         ;
                      (     flexflpy.asm):00765         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00766         ;
E847                  (     flexflpy.asm):00767         PFDATA:
E847 3402             (     flexflpy.asm):00768 [5+1]               PSHS    A                                 ; SAVE DATA BYTE
E849 108E0100         (     flexflpy.asm):00769 [4]                 LDY     #$0100                            ; SET RETRIES
E84D                  (     flexflpy.asm):00770         WRF1:
E84D B6FE30           (     flexflpy.asm):00771 [5]                 LDA     FDC_MSR                           ; READ FDC STATUS
E850 1F89             (     flexflpy.asm):00772 [6]                 TFR     A,B
E852 8480             (     flexflpy.asm):00773 [2]                 ANDA    #$80                              ;
E854 2609             (     flexflpy.asm):00774 [3]                 BNE     >
E856 313F             (     flexflpy.asm):00775 [5]                 DEY
E858 26F3             (     flexflpy.asm):00776 [3]                 BNE     WRF1                              ; FDC IS NOT READY, WAIT FOR IT
E85A 3502             (     flexflpy.asm):00777 [5+1]               PULS    A
E85C 86FF             (     flexflpy.asm):00778 [2]                 LDA     #$FF
E85E 39               (     flexflpy.asm):00779 [5]                 RTS
                      (     flexflpy.asm):00780         !
E85F C440             (     flexflpy.asm):00781 [2]                 ANDB    #$40                              ; TEST DIO BIT
E861 260F             (     flexflpy.asm):00782 [3]                 BNE     WRF2                              ; FDC IS OUT OF SYNC
E863 3502             (     flexflpy.asm):00783 [5+1]               PULS    A                                 ; RESTORE DATA
                      (     flexflpy.asm):00784         
E865 B7FE31           (     flexflpy.asm):00785 [5]                 STA     FDC_DATA                          ; WRITE TO FDC
E868 BDE96F           (     flexflpy.asm):00786 [8]                 JSR     FDDELAY
E86B BDE96F           (     flexflpy.asm):00787 [8]                 JSR     FDDELAY
E86E BDE96F           (     flexflpy.asm):00788 [8]                 JSR     FDDELAY
E871 39               (     flexflpy.asm):00789 [5]                 RTS
                      (     flexflpy.asm):00790         ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
E872                  (     flexflpy.asm):00791         WRF2:
E872 B6FE31           (     flexflpy.asm):00792 [5]                 LDA     FDC_DATA                          ; READ DATA REGISTER
E875 7EE84D           (     flexflpy.asm):00793 [4]                 JMP     WRF1                              ; AND CONTINUE
                      (     flexflpy.asm):00794         
                      (     flexflpy.asm):00795         ;__PFDATAS_________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00796         ;
                      (     flexflpy.asm):00797         ; WRITE A COMMAND OR PARAMETER SEQUENCE (NO PAUSE)
                      (     flexflpy.asm):00798         ;
                      (     flexflpy.asm):00799         ; TRANSFERS ARE SYNCHONIZED BY MSR D7 <RQM> AND D6 <DIO>
                      (     flexflpy.asm):00800         ;       RQM  DIO
                      (     flexflpy.asm):00801         ;       0       0       BUSY
                      (     flexflpy.asm):00802         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      (     flexflpy.asm):00803         ;       1       1       BYTE FOR READ BY HOST PENDING
                      (     flexflpy.asm):00804         ;       0       1       BUSY
                      (     flexflpy.asm):00805         ;
                      (     flexflpy.asm):00806         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00807         ;
E878                  (     flexflpy.asm):00808         PFDATAS:
E878 3402             (     flexflpy.asm):00809 [5+1]               PSHS    A                                 ; SAVE DATA BYTE
E87A                  (     flexflpy.asm):00810         WRF1S:
E87A B6FE30           (     flexflpy.asm):00811 [5]                 LDA     FDC_MSR                           ; READ FDC STATUS
E87D 1F89             (     flexflpy.asm):00812 [6]                 TFR     A,B
E87F 8480             (     flexflpy.asm):00813 [2]                 ANDA    #$80                              ;
E881 27F7             (     flexflpy.asm):00814 [3]                 BEQ     WRF1S                             ; FDC IS NOT READY, WAIT FOR IT
E883 C440             (     flexflpy.asm):00815 [2]                 ANDB    #$40                              ; TEST DIO BIT
E885 2606             (     flexflpy.asm):00816 [3]                 BNE     WRF2S                             ; FDC IS OUT OF SYNC
E887 3502             (     flexflpy.asm):00817 [5+1]               PULS    A                                 ; RESTORE DATA
E889 B7FE31           (     flexflpy.asm):00818 [5]                 STA     FDC_DATA                          ; WRITE TO FDC
E88C 39               (     flexflpy.asm):00819 [5]                 RTS
                      (     flexflpy.asm):00820         ; FDC IS OUT OF SYNC CLEAR IT OUT AND RE-TRY
E88D                  (     flexflpy.asm):00821         WRF2S:
E88D 3436             (     flexflpy.asm):00822 [5+6]               PSHS    A,B,X,Y
E88F 867E             (     flexflpy.asm):00823 [2]                 LDA     #'~'
E891 BDDE4C           (     flexflpy.asm):00824 [8]                 JSR     VOUTCH
E894 BDDE4C           (     flexflpy.asm):00825 [8]                 JSR     VOUTCH
E897 BDDE4C           (     flexflpy.asm):00826 [8]                 JSR     VOUTCH
E89A BDDE4C           (     flexflpy.asm):00827 [8]                 JSR     VOUTCH
E89D BDDE4C           (     flexflpy.asm):00828 [8]                 JSR     VOUTCH
E8A0 3536             (     flexflpy.asm):00829 [5+6]               PULS    A,B,X,Y
E8A2 B6FE31           (     flexflpy.asm):00830 [5]                 LDA     FDC_DATA                          ; READ DATA REGISTER
E8A5 7EE87A           (     flexflpy.asm):00831 [4]                 JMP     WRF1S                             ; AND CONTINUE
                      (     flexflpy.asm):00832         
                      (     flexflpy.asm):00833         
                      (     flexflpy.asm):00834         
                      (     flexflpy.asm):00835         ;__CHECKINT__________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00836         ;
                      (     flexflpy.asm):00837         ; CHECK FOR ACTIVE FDC INTERRUPTS BEFORE GIVING I8272 COMMANDS
                      (     flexflpy.asm):00838         ; POLL RQM FOR WHEN NOT BUSY AND THEN SEND FDC
                      (     flexflpy.asm):00839         ; SENSE INTERRUPT COMMAND.  IF IT RTSURNS WITH NON ZERO
                      (     flexflpy.asm):00840         ; ERROR CODE, PASS BACK TO JSRING ROUTINE FOR HANDLING
                      (     flexflpy.asm):00841         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00842         ;
E8A8                  (     flexflpy.asm):00843         CHECKINT:
E8A8 108E0200         (     flexflpy.asm):00844 [4]                 LDY     #$0200
                      (     flexflpy.asm):00845         !
E8AC B6FE30           (     flexflpy.asm):00846 [5]                 LDA     FDC_MSR                           ; READING OR WRITING IS KEYS TO D7 RQM
E8AF 8480             (     flexflpy.asm):00847 [2]                 ANDA    #$80
E8B1 260A             (     flexflpy.asm):00848 [3]                 BNE     >                                 ; WAIT FOR RQM TO BE TRUE. WAIT UNTIL DONE
E8B3 BDE96F           (     flexflpy.asm):00849 [8]                 JSR     FDDELAY
E8B6 313F             (     flexflpy.asm):00850 [5]                 DEY
E8B8 26F2             (     flexflpy.asm):00851 [3]                 BNE     <
E8BA 7EE8C5           (     flexflpy.asm):00852 [4]                 JMP     ERRCLR
                      (     flexflpy.asm):00853         
                      (     flexflpy.asm):00854         !
E8BD B6FE30           (     flexflpy.asm):00855 [5]                 LDA     FDC_MSR                           ; READING OR WRITING IS KEYS TO D7 RQM
E8C0 8440             (     flexflpy.asm):00856 [2]                 ANDA    #$40                              ; WAITING FOR INPUT?
E8C2 2719             (     flexflpy.asm):00857 [3]                 BEQ     SENDINT
E8C4 39               (     flexflpy.asm):00858 [5]                 RTS
                      (     flexflpy.asm):00859         
E8C5                  (     flexflpy.asm):00860         ERRCLR:
E8C5 108E0200         (     flexflpy.asm):00861 [4]                 LDY     #$0200
                      (     flexflpy.asm):00862         !
E8C9 B6FE31           (     flexflpy.asm):00863 [5]                 LDA     FDC_DATA                          ; CLEAR THE JUNK OUT OF DATA REGISTER
E8CC B6FE30           (     flexflpy.asm):00864 [5]                 LDA     FDC_MSR                           ; CHECK WITH RQM
E8CF 8480             (     flexflpy.asm):00865 [2]                 ANDA    #$80                              ; IF STILL NOT READY, READ OUT MORE JUNK
E8D1 2607             (     flexflpy.asm):00866 [3]                 BNE     >                                 ;
E8D3 BDE96F           (     flexflpy.asm):00867 [8]                 JSR     FDDELAY
E8D6 313F             (     flexflpy.asm):00868 [5]                 DEY
E8D8 26EF             (     flexflpy.asm):00869 [3]                 BNE     <
                      (     flexflpy.asm):00870         !
E8DA 86FF             (     flexflpy.asm):00871 [2]                 LDA     #$FF                              ; RETURN ERROR CODE -1
                      (     flexflpy.asm):00872         ;
E8DC 39               (     flexflpy.asm):00873 [5]                 RTS
                      (     flexflpy.asm):00874         
                      (     flexflpy.asm):00875         ;__SENDINT__________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00876         ;
                      (     flexflpy.asm):00877         ; SENSE INTERRUPT COMMAND
                      (     flexflpy.asm):00878         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00879         ;
E8DD                  (     flexflpy.asm):00880         SENDINT:
E8DD 8608             (     flexflpy.asm):00881 [2]                 LDA     #CFD_SENSEINT                     ; SENSE INTERRUPT COMMAND
E8DF BDE847           (     flexflpy.asm):00882 [8]                 JSR     PFDATA                            ; SEND IT
E8E2 BDE8FA           (     flexflpy.asm):00883 [8]                 JSR     GFDATA                            ; GET RESULTS
E8E5 B7E990           (     flexflpy.asm):00884 [5]                 STA     ST0                               ; STORE THAT
E8E8 84C0             (     flexflpy.asm):00885 [2]                 ANDA    #$C0                              ; MASK OFF INTERRUPT STATUS BITS
E8EA 8180             (     flexflpy.asm):00886 [2]                 CMPA    #$80                              ; CHECK IF INVALID COMMAND
E8EC 2709             (     flexflpy.asm):00887 [3]                 BEQ     ENDSENDINT                        ; YES, EXIT
E8EE BDE8FA           (     flexflpy.asm):00888 [8]                 JSR     GFDATA                            ; GET ANOTHER (STATUS CODE 1)
E8F1 B6E990           (     flexflpy.asm):00889 [5]                 LDA     ST0                               ; GET FIRST ONE
E8F4 84C0             (     flexflpy.asm):00890 [2]                 ANDA    #$C0                              ; MASK OFF ALL BUT INTERRUPT CODE 00 IS NORMAL
E8F6 39               (     flexflpy.asm):00891 [5]                 RTS
E8F7                  (     flexflpy.asm):00892         ENDSENDINT:
E8F7 86FF             (     flexflpy.asm):00893 [2]                 LDA     #$FF                              ; RETURN ERROR CODE -1
E8F9 39               (     flexflpy.asm):00894 [5]                 RTS                                       ; ANYTHING ELSE IS AN ERROR
                      (     flexflpy.asm):00895         
                      (     flexflpy.asm):00896         
                      (     flexflpy.asm):00897         ;__GFDATA__________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00898         ;
                      (     flexflpy.asm):00899         ; GET DATA FROM FLOPPY CONTROLLER
                      (     flexflpy.asm):00900         ;
                      (     flexflpy.asm):00901         ; TRANSFERS ARE SYNCHONIZED BYT MSR D7 <RQM> AND D6 <DIO>
                      (     flexflpy.asm):00902         ;       RQM  DIO
                      (     flexflpy.asm):00903         ;       0       0       BUSY
                      (     flexflpy.asm):00904         ;       1       0       WRITE TO DATA REGISTER PERMITTED
                      (     flexflpy.asm):00905         ;       1       1       BYTE FOR READ BY HOST PENDING
                      (     flexflpy.asm):00906         ;       0       1       BUSY
                      (     flexflpy.asm):00907         ;
                      (     flexflpy.asm):00908         ;________________________________________________________________________________________________________________________________
                      (     flexflpy.asm):00909         ;
E8FA                  (     flexflpy.asm):00910         GFDATA:
E8FA 108E0200         (     flexflpy.asm):00911 [4]                 LDY     #$0200
                      (     flexflpy.asm):00912         !
E8FE B6FE30           (     flexflpy.asm):00913 [5]                 LDA     FDC_MSR                           ; GET STATUS
E901 1F89             (     flexflpy.asm):00914 [6]                 TFR     A,B                               ;
E903 8480             (     flexflpy.asm):00915 [2]                 ANDA    #%10000000                        ; NOT READY, WAIT
E905 2607             (     flexflpy.asm):00916 [3]                 BNE     >                                 ;
E907 313F             (     flexflpy.asm):00917 [5]                 DEY
E909 26F3             (     flexflpy.asm):00918 [3]                 BNE     <
E90B 8600             (     flexflpy.asm):00919 [2]                 LDA     #$00
E90D 39               (     flexflpy.asm):00920 [5]                 RTS
                      (     flexflpy.asm):00921         !
E90E C440             (     flexflpy.asm):00922 [2]                 ANDB    #%01000000                        ; ANY DATA FOR US?
E910 2703             (     flexflpy.asm):00923 [3]                 BEQ     GFDATA1                           ; NO, SKIP IT
E912 B6FE31           (     flexflpy.asm):00924 [5]                 LDA     FDC_DATA                          ; GET FDC DATA
E915                  (     flexflpy.asm):00925         GFDATA1:
E915 39               (     flexflpy.asm):00926 [5]                 RTS
                      (     flexflpy.asm):00927         
                      (     flexflpy.asm):00928         ;__FD_DETECT______________________________________________________________________________________________________________________
                      (     flexflpy.asm):00929         ;
                      (     flexflpy.asm):00930         ;       DETECT FLOPPY HARDWARE
                      (     flexflpy.asm):00931         ;________________________________________________________________________________________________________________________________
E916                  (     flexflpy.asm):00932         FD_DETECT:
                      (     flexflpy.asm):00933         ; BLINDLY RESET FDC (WHICH MAY OR MAY NOT EXIST)
E916 860C             (     flexflpy.asm):00934 [2]                 LDA     #DOR_INIT                         ; MAKE SURE INITIAL DOR VALUE IS SETUP
E918 B7FE36           (     flexflpy.asm):00935 [5]                 STA     FDC_DOR                           ;
                      (     flexflpy.asm):00936         
E91B BDE94C           (     flexflpy.asm):00937 [8]                 JSR     FC_RESETFDC                       ; RESET FDC
E91E B6FE30           (     flexflpy.asm):00938 [5]                 LDA     FDC_MSR                           ; READ MSR
                      (     flexflpy.asm):00939         
E921 8180             (     flexflpy.asm):00940 [2]                 CMPA    #$80
E923 270A             (     flexflpy.asm):00941 [3]                 BEQ     FD_DETECT1                        ; $80 IS OK
E925 81D0             (     flexflpy.asm):00942 [2]                 CMPA    #$D0
E927 2706             (     flexflpy.asm):00943 [3]                 BEQ     FD_DETECT1                        ; $D0 IS OK
E929 86FF             (     flexflpy.asm):00944 [2]                 LDA     #$FF                              ; NOT OK
E92B B7E986           (     flexflpy.asm):00945 [5]                 STA     HARDWARE_DETCT
E92E 39               (     flexflpy.asm):00946 [5]                 RTS
                      (     flexflpy.asm):00947         ;
E92F                  (     flexflpy.asm):00948         FD_DETECT1:
E92F 8E1000           (     flexflpy.asm):00949 [3]                 LDX     #$1000
E932 BDE978           (     flexflpy.asm):00950 [8]                 JSR     FDVDELAY                          ; WAIT A BIT FOR FDC
E935 B6FE30           (     flexflpy.asm):00951 [5]                 LDA     FDC_MSR                           ; READ MSR AGAIN
                      (     flexflpy.asm):00952         
E938 8180             (     flexflpy.asm):00953 [2]                 CMPA    #$80
E93A 270A             (     flexflpy.asm):00954 [3]                 BEQ     >                                 ; $80 IS OK
E93C 81D0             (     flexflpy.asm):00955 [2]                 CMPA    #$D0
E93E 2706             (     flexflpy.asm):00956 [3]                 BEQ     >                                 ; $D0 IS OK
                      (     flexflpy.asm):00957         
E940 86FF             (     flexflpy.asm):00958 [2]                 LDA     #$FF                              ; NOT OK
E942 B7E986           (     flexflpy.asm):00959 [5]                 STA     HARDWARE_DETCT
E945 39               (     flexflpy.asm):00960 [5]                 RTS
                      (     flexflpy.asm):00961         !
E946 8600             (     flexflpy.asm):00962 [2]                 LDA     #$00                              ; OK
E948 B7E986           (     flexflpy.asm):00963 [5]                 STA     HARDWARE_DETCT
E94B 39               (     flexflpy.asm):00964 [5]                 RTS
                      (     flexflpy.asm):00965         
E94C                  (     flexflpy.asm):00966         FC_RESETFDC:
E94C B6FE33           (     flexflpy.asm):00967 [5]                 LDA     FDC_RESET
E94F B6FE33           (     flexflpy.asm):00968 [5]                 LDA     FDC_RESET
E952 8E0200           (     flexflpy.asm):00969 [3]                 LDX     #$0200
E955 BDE978           (     flexflpy.asm):00970 [8]                 JSR     FDVDELAY                          ; WAIT A BIT FOR FDC
E958 8600             (     flexflpy.asm):00971 [2]                 LDA     #$00
E95A B7FE36           (     flexflpy.asm):00972 [5]                 STA     FDC_DOR
E95D 8E0200           (     flexflpy.asm):00973 [3]                 LDX     #$0200
E960 BDE96F           (     flexflpy.asm):00974 [8]                 JSR     FDDELAY                           ; WAIT A BIT FOR FDC
E963 860C             (     flexflpy.asm):00975 [2]                 LDA     #DOR_INIT                         ; MAKE SURE INITIAL DOR VALUE IS SETUP
E965 B7FE36           (     flexflpy.asm):00976 [5]                 STA     FDC_DOR
E968 8E0200           (     flexflpy.asm):00977 [3]                 LDX     #$0200                            ;
E96B BDE978           (     flexflpy.asm):00978 [8]                 JSR     FDVDELAY
E96E 39               (     flexflpy.asm):00979 [5]                 RTS
                      (     flexflpy.asm):00980         
                      (     flexflpy.asm):00981         
E96F                  (     flexflpy.asm):00982         FDDELAY:
E96F 3402             (     flexflpy.asm):00983 [5+1]               PSHS    A
E971 3502             (     flexflpy.asm):00984 [5+1]               PULS    A
E973 3402             (     flexflpy.asm):00985 [5+1]               PSHS    A
E975 3502             (     flexflpy.asm):00986 [5+1]               PULS    A
E977 39               (     flexflpy.asm):00987 [5]                 RTS
E978                  (     flexflpy.asm):00988         FDVDELAY:
E978 301F             (     flexflpy.asm):00989 [5]                 DEX
E97A 8C0000           (     flexflpy.asm):00990 [4]                 CMPX    #$00
E97D 8C0000           (     flexflpy.asm):00991 [4]                 CMPX    #$00
E980 8C0000           (     flexflpy.asm):00992 [4]                 CMPX    #$00
E983 26F3             (     flexflpy.asm):00993 [3]                 BNE     FDVDELAY
E985 39               (     flexflpy.asm):00994 [5]                 RTS
                      (     flexflpy.asm):00995         
                      (     flexflpy.asm):00996         
                      (     flexflpy.asm):00997         
E986                  (     flexflpy.asm):00998         HARDWARE_DETCT:
E986 00               (     flexflpy.asm):00999                     .BYTE   0                                 ; HARDWARE DETECTED
E987                  (     flexflpy.asm):01000         debhead:
E987 00               (     flexflpy.asm):01001                     .BYTE   0                                 ; DEBLOCKED HEAD
E988                  (     flexflpy.asm):01002         debcyl:
E988 00               (     flexflpy.asm):01003                     .BYTE   0                                 ; DEBLOCKED CYLINDER
E989                  (     flexflpy.asm):01004         debsec:
E989 00               (     flexflpy.asm):01005                     .BYTE   0                                 ; DEBLOCKED SECTOR
E98A                  (     flexflpy.asm):01006         Cdebhead:
E98A 00               (     flexflpy.asm):01007                     .BYTE   0                                 ; DEBLOCKED HEAD (cache)
E98B                  (     flexflpy.asm):01008         Cdebcyl:
E98B 00               (     flexflpy.asm):01009                     .BYTE   0                                 ; DEBLOCKED CYLINDER (cache)
E98C                  (     flexflpy.asm):01010         Cdebsec:
E98C 00               (     flexflpy.asm):01011                     .BYTE   0                                 ; DEBLOCKED SECTOR (cache)
E98D                  (     flexflpy.asm):01012         FLERR:
E98D 00               (     flexflpy.asm):01013                     .BYTE   $00                               ;
E98E                  (     flexflpy.asm):01014         UNIT:
E98E 00               (     flexflpy.asm):01015                     .BYTE   $00                               ;
E98F                  (     flexflpy.asm):01016         FCMD:
E98F 00               (     flexflpy.asm):01017                     .BYTE   0                                 ; COMMAND READ OR WRITE,
E990                  (     flexflpy.asm):01018         ST0:
E990 00               (     flexflpy.asm):01019                     .BYTE   0                                 ; COMMAND READ OR WRITE,
E991                  (     flexflpy.asm):01020         FLRETRY:
E991 00               (     flexflpy.asm):01021                     .BYTE   00
E992                  (     flexflpy.asm):01022         FLRETRY1:
E992 00               (     flexflpy.asm):01023                     .BYTE   00
E993                  (     flexflpy.asm):01024         FLOPPYMESSAGE1:
E993 46443A204D4F4445 (     flexflpy.asm):01025                     FCC     "FD: MODE=MBC"
     3D4D4243
E99F 04               (     flexflpy.asm):01026                     FCB     EOT
E9A0                  (     flexflpy.asm):01027         FLOPPYMESSAGE2:
E9A0 20494F3D3078     (     flexflpy.asm):01028                     FCC     " IO=0x"
E9A6 04               (     flexflpy.asm):01029                     FCB     EOT
E9A7                  (     flexflpy.asm):01030         FLOPPYMESSAGE3:
E9A7 204E4F5420505245 (     flexflpy.asm):01031                     FCC     " NOT PRESENT"
     53454E54
E9B3 04               (     flexflpy.asm):01032                     FCB     EOT
E9B4                  (     flexflpy.asm):01033         FLOPPYMESSAGE4:
E9B4 2050524553454E54 (     flexflpy.asm):01034                     FCC     " PRESENT"
E9BC 04               (     flexflpy.asm):01035                     FCB     EOT
E9BD                  (     flexflpy.asm):01036         FLOPPYWORKVAR:
E9BD 0000             (     flexflpy.asm):01037                     .BYTE   $00,$00
                      (      drivers.asm):00561                     IF      USEDSKYNG = 1
                      (      drivers.asm):00562                         INCLUDE "flxdsky.asm"
                      (      flxdsky.asm):00001         ;__DSKYNG DRIVERS_________________________________________________________________________________________________________________
                      (      flxdsky.asm):00002         ;
                      (      flxdsky.asm):00003         ;       Nhyodyne DSKY/NG drivers
                      (      flxdsky.asm):00004         ;
                      (      flxdsky.asm):00005         ;       Entry points:
                      (      flxdsky.asm):00006         ;               DSKY_INIT
                      (      flxdsky.asm):00007         ;               DSKY_SHOW
                      (      flxdsky.asm):00008         ;               DSKY_BIN2SEG
                      (      flxdsky.asm):00009         ;               DSKY_RESET
                      (      flxdsky.asm):00010         ;               DSKY_STAT
                      (      flxdsky.asm):00011         ;               DSKY_GETKEY
                      (      flxdsky.asm):00012         ;               DSKY_BEEP
                      (      flxdsky.asm):00013         ;               DSKY_L1ON
                      (      flxdsky.asm):00014         ;               DSKY_L2ON
                      (      flxdsky.asm):00015         ;               DSKY_L1OFF
                      (      flxdsky.asm):00016         ;               DSKY_L2OFF
                      (      flxdsky.asm):00017         ;               DSKY_PUTLED
                      (      flxdsky.asm):00018         ;               DSKY_BLANK
                      (      flxdsky.asm):00019         ;________________________________________________________________________________________________________________________________
                      (      flxdsky.asm):00020         ;
                      (      flxdsky.asm):00021         ;
                      (      flxdsky.asm):00022         ; A DSKYNG CAN SHARE A PPI BUS WITH EITHER A PPIDE OR PPISD.
                      (      flxdsky.asm):00023         ;
                      (      flxdsky.asm):00024         ; LED SEGMENTS (BIT VALUES)
                      (      flxdsky.asm):00025         ;
                      (      flxdsky.asm):00026         ;       +--01--+
                      (      flxdsky.asm):00027         ;       20    02
                      (      flxdsky.asm):00028         ;       +--40--+
                      (      flxdsky.asm):00029         ;       10    04
                      (      flxdsky.asm):00030         ;       +--08--+  80
                      (      flxdsky.asm):00031         ;
                      (      flxdsky.asm):00032         ; KEY CODE MAP (KEY CODES) CSCCCRRR
                      (      flxdsky.asm):00033         ;                          ||||||||
                      (      flxdsky.asm):00034         ;                          |||||+++-- ROW
                      (      flxdsky.asm):00035         ;                          ||+++----- COL
                      (      flxdsky.asm):00036         ;                          |+-------- SHIFT
                      (      flxdsky.asm):00037         ;                          +--------- CONTROL
                      (      flxdsky.asm):00038         ;
                      (      flxdsky.asm):00039         ;       00      08      10      18      23
                      (      flxdsky.asm):00040         ;       01      09      11      19      22
                      (      flxdsky.asm):00041         ;       02      0A      12      1A      21
                      (      flxdsky.asm):00042         ;       03      0B      13      1B      20
                      (      flxdsky.asm):00043         ;       04      0C      14      1C      SHIFT
                      (      flxdsky.asm):00044         ;       05      0D      15      1D      CTRL
                      (      flxdsky.asm):00045         ;
                      (      flxdsky.asm):00046         ; LED BIT MAP (BIT VALUES)
                      (      flxdsky.asm):00047         ;
                      (      flxdsky.asm):00048         ;       $08     $09     $0A     $0B     $0C     $0D     $0E     $0F
                      (      flxdsky.asm):00049         ;       ---     ---     ---     ---     ---     ---     ---     ---
                      (      flxdsky.asm):00050         ;       01      01      01      01      01
                      (      flxdsky.asm):00051         ;       02      02      02      02      02
                      (      flxdsky.asm):00052         ;       04      04      04      04      04
                      (      flxdsky.asm):00053         ;       08      08      08      08      08
                      (      flxdsky.asm):00054         ;       10      10      10      10      10
                      (      flxdsky.asm):00055         ;       20      20      20      20      20      L1      L2      BUZZ
                      (      flxdsky.asm):00056         ;
     FE60             (      flxdsky.asm):00057         DSKY_PPI        = $FE60                           ; PORT
     FE60             (      flxdsky.asm):00058         DSKY_PPIA       = DSKY_PPI+0                      ; PORT A
     FE61             (      flxdsky.asm):00059         DSKY_PPIB       = DSKY_PPI+1                      ; PORT B
     FE62             (      flxdsky.asm):00060         DSKY_PPIC       = DSKY_PPI+2                      ; PORT C
     FE63             (      flxdsky.asm):00061         DSKY_PPIX       = DSKY_PPI+3                      ; PPI CONTROL PORT
                      (      flxdsky.asm):00062         ;
     0092             (      flxdsky.asm):00063         DSKY_PPIX_RD    = %10010010                       ; PPIX VALUE FOR READS
     0082             (      flxdsky.asm):00064         DSKY_PPIX_WR    = %10000010                       ; PPIX VALUE FOR WRITES
                      (      flxdsky.asm):00065         ;
                      (      flxdsky.asm):00066         ; PIO CHANNEL C:
                      (      flxdsky.asm):00067         ;
                      (      flxdsky.asm):00068         ;       7       6       5       4       3       2       1       0
                      (      flxdsky.asm):00069         ;       RES     0       0       CS      CS      /RD     /WR     A0
                      (      flxdsky.asm):00070         ;
                      (      flxdsky.asm):00071         ; SETTING BITS 3 & 4 WILL ASSERT /CS ON 3279
                      (      flxdsky.asm):00072         ; CLEAR BITS 1 OR 2 TO ASSERT READ/WRITE
                      (      flxdsky.asm):00073         ;
     0006             (      flxdsky.asm):00074         DSKY_PPI_IDLE   = %00000110
                      (      flxdsky.asm):00075         ;
     00DF             (      flxdsky.asm):00076         DSKY_CMD_CLR    = %11011111                       ; CLEAR (ALL OFF)
     00D3             (      flxdsky.asm):00077         DSKY_CMD_CLRX   = %11010011                       ; CLEAR (ALL ON)
     0090             (      flxdsky.asm):00078         DSKY_CMD_WDSP   = %10010000                       ; WRITE DISPLAY RAM
     0070             (      flxdsky.asm):00079         DSKY_CMD_RDSP   = %01110000                       ; READ DISPLAY RAM
     0020             (      flxdsky.asm):00080         DSKY_CMD_CLK    = %00100000                       ; SET CLK PRESCALE
     0040             (      flxdsky.asm):00081         DSKY_CMD_FIFO   = %01000000                       ; READ FIFO
                      (      flxdsky.asm):00082         ;
     ????             (      flxdsky.asm):00083         DSKY_PRESCL     = DSKYOSC/100000                  ; PRESCALER
                      (      flxdsky.asm):00084         ;
                      (      flxdsky.asm):00085         ;__DSKY_INIT_________________________________________________________________________________________
                      (      flxdsky.asm):00086         ;
                      (      flxdsky.asm):00087         ;  DISPLAY DSKY INFO
                      (      flxdsky.asm):00088         ;____________________________________________________________________________________________________
                      (      flxdsky.asm):00089         ;
E9BF                  (      flxdsky.asm):00090         DSKY_INIT:
                      (      flxdsky.asm):00091         ; PRTDBG "DSKY INIT:$"
E9BF BDEA0E           (      flxdsky.asm):00092 [8]             JSR     DSKY_PREINIT
E9C2 8EECA7           (      flxdsky.asm):00093 [3]             LDX     #DSKYMESSAGE1
E9C5 BDCE7B           (      flxdsky.asm):00094 [8]             JSR     >PDATA1                           ; DO PROMPT
E9C8 BDCEB1           (      flxdsky.asm):00095 [8]             JSR     >PCRLF                            ; AND CRLF
                      (      flxdsky.asm):00096         
E9CB 8EECAD           (      flxdsky.asm):00097 [3]             LDX     #DSKYMESSAGE2
E9CE BDCE7B           (      flxdsky.asm):00098 [8]             JSR     >PDATA1                           ; DO PROMPT
E9D1 CCFE60           (      flxdsky.asm):00099 [3]             LDD     #PPIDE_PPI                        ; GET BASE PORT
E9D4 FDEC91           (      flxdsky.asm):00100 [6]             STD     DSKYWORKVAR
E9D7 8EEC91           (      flxdsky.asm):00101 [3]             LDX     #DSKYWORKVAR
E9DA BDCFCC           (      flxdsky.asm):00102 [8]             JSR     OUTADR                            ; PRINT BASE PORT
                      (      flxdsky.asm):00103         
E9DD 8EECB4           (      flxdsky.asm):00104 [3]             LDX     #DSKYMESSAGE3
E9E0 BDCE7B           (      flxdsky.asm):00105 [8]             JSR     >PDATA1                           ; DO PROMPT
                      (      flxdsky.asm):00106         ;
                      (      flxdsky.asm):00107         ;
E9E3 B6EC90           (      flxdsky.asm):00108 [5]             LDA     DSKY_PRESENT                      ; PRESENT?
E9E6 81FF             (      flxdsky.asm):00109 [2]             CMPA    #$FF                              ; SET FLAGS
E9E8 2708             (      flxdsky.asm):00110 [3]             BEQ     DSKY_INITA
E9EA 8EECBD           (      flxdsky.asm):00111 [3]             LDX     #DSKYMESSAGE4
E9ED BDCE7B           (      flxdsky.asm):00112 [8]             JSR     >PDATA1                           ; DO PROMPT
E9F0 2018             (      flxdsky.asm):00113 [3]             BRA     DSKY_INITB
E9F2                  (      flxdsky.asm):00114         DSKY_INITA:
E9F2 8E0000           (      flxdsky.asm):00115 [3]             LDX     #$00
                      (      flxdsky.asm):00116         !
E9F5 A689EC9F         (      flxdsky.asm):00117 [4+4]           LDA     DSKYINITMSG,X
E9F9 A789EC93         (      flxdsky.asm):00118 [4+4]           STA     DSKY_BUF,X
E9FD 3001             (      flxdsky.asm):00119 [5]             INX
E9FF 8C0008           (      flxdsky.asm):00120 [4]             CMPX    #$0008
EA02 26F1             (      flxdsky.asm):00121 [3]             BNE     <
EA04 BDEB17           (      flxdsky.asm):00122 [8]             JSR     DSKY_SHOW
EA07 BDEBE9           (      flxdsky.asm):00123 [8]             JSR     DSKY_BEEP
                      (      flxdsky.asm):00124         
EA0A                  (      flxdsky.asm):00125         DSKY_INITB:
EA0A BDCEB1           (      flxdsky.asm):00126 [8]             JSR     >PCRLF                            ; AND CRLF
EA0D 39               (      flxdsky.asm):00127 [5]             RTS                                       ; DONE
                      (      flxdsky.asm):00128         ;
                      (      flxdsky.asm):00129         ;__DSKY_PREINIT______________________________________________________________________________________
                      (      flxdsky.asm):00130         ;
                      (      flxdsky.asm):00131         ;  CONFIGURE PARALLEL PORT AND INITIALIZE 8279
                      (      flxdsky.asm):00132         ;____________________________________________________________________________________________________
                      (      flxdsky.asm):00133         ; HARDWARE RESET 8279 BY PULSING RESET LINE
EA0E                  (      flxdsky.asm):00134         DSKY_PREINIT:
                      (      flxdsky.asm):00135         ; CHECK FOR PPI
EA0E BDEA57           (      flxdsky.asm):00136 [8]             JSR     DSKY_PPIDETECT                    ; TEST FOR PPI HARDWARE
EA11 262A             (      flxdsky.asm):00137 [3]             BNE     DSKY_ABORT                        ; BAIL OUT IF NOT THERE
                      (      flxdsky.asm):00138         
                      (      flxdsky.asm):00139         ; SETUP PPI TO DEFAULT MODE
EA13 BDEC68           (      flxdsky.asm):00140 [8]             JSR     DSKY_PPIRD
                      (      flxdsky.asm):00141         ; INIT 8279 VALUES TO IDLE STATE
EA16 8606             (      flxdsky.asm):00142 [2]             LDA     #DSKY_PPI_IDLE
EA18 B7FE62           (      flxdsky.asm):00143 [5]             STA     DSKY_PPIC
                      (      flxdsky.asm):00144         ; PULSE RESET SIGNAL ON 8279
EA1B 8A80             (      flxdsky.asm):00145 [2]             ORA     #%10000000
EA1D B7FE62           (      flxdsky.asm):00146 [5]             STA     DSKY_PPIC
EA20 847F             (      flxdsky.asm):00147 [2]             ANDA    #%01111111
EA22 B7FE62           (      flxdsky.asm):00148 [5]             STA     DSKY_PPIC
                      (      flxdsky.asm):00149         ; INITIALIZE 8279
EA25 BDEA3E           (      flxdsky.asm):00150 [8]             JSR     DSKY_REINIT
                      (      flxdsky.asm):00151         ; NOW SEE IF A DSKYNG IS REALLY THERE...
EA28 86A5             (      flxdsky.asm):00152 [2]             LDA     #$A5
EA2A C600             (      flxdsky.asm):00153 [2]             LDB     #$00
EA2C BDEBB2           (      flxdsky.asm):00154 [8]             JSR     DSKY_PUTBYTE
EA2F C600             (      flxdsky.asm):00155 [2]             LDB     #$00
EA31 BDEBC5           (      flxdsky.asm):00156 [8]             JSR     DSKY_GETBYTE
EA34 81A5             (      flxdsky.asm):00157 [2]             CMPA    #$A5
EA36 2605             (      flxdsky.asm):00158 [3]             BNE     DSKY_ABORT                        ; BAIL OUT IF MISCOMPARE
EA38 86FF             (      flxdsky.asm):00159 [2]             LDA     #$FF
EA3A B7EC90           (      flxdsky.asm):00160 [5]             STA     DSKY_PRESENT
EA3D                  (      flxdsky.asm):00161         DSKY_ABORT:
EA3D 39               (      flxdsky.asm):00162 [5]             RTS
                      (      flxdsky.asm):00163         ;
EA3E                  (      flxdsky.asm):00164         DSKY_REINIT:
EA3E BDEC7B           (      flxdsky.asm):00165 [8]             JSR     DSKY_PPIIDLE
                      (      flxdsky.asm):00166         ; SET CLOCK SCALER TO 20
EA41 8620             (      flxdsky.asm):00167 [2]             LDA     #DSKY_CMD_CLK | DSKY_PRESCL
EA43 BDEB2E           (      flxdsky.asm):00168 [8]             JSR     DSKY_CMD
                      (      flxdsky.asm):00169         ; FALL THRU
                      (      flxdsky.asm):00170         ;
EA46                  (      flxdsky.asm):00171         DSKY_RESET:
                      (      flxdsky.asm):00172         ; RESET DSKY -- CLEAR RAM AND FIFO
EA46 86DF             (      flxdsky.asm):00173 [2]             LDA     #DSKY_CMD_CLR
EA48 BDEB2E           (      flxdsky.asm):00174 [8]             JSR     DSKY_CMD
                      (      flxdsky.asm):00175         ;
                      (      flxdsky.asm):00176         ; 8259 TAKES ~160US TO CLEAR RAM DURING WHICH TIME WRITES TO
                      (      flxdsky.asm):00177         ; DISPLAY RAM ARE INHIBITED.  HIGH BIT OF STATUS BYTE IS SET
                      (      flxdsky.asm):00178         ; DURING THIS WINDOW.  TO PREVENT A DEADLOCK, A LOOP COUNTER
                      (      flxdsky.asm):00179         ; IS USED TO IMPLEMENT A TIMEOUT.
EA4B 8E0000           (      flxdsky.asm):00180 [3]             LDX     #0                                ; TIMEOUT LOOP COUNTER
EA4E                  (      flxdsky.asm):00181         DSKY_RESET1:
EA4E 3410             (      flxdsky.asm):00182 [5+2]           PSHS    X                                 ; SAVE COUNTER
                      (      flxdsky.asm):00183         ;JSR    DSKY_ST                 ; GET STATUS BYTE
EA50 3510             (      flxdsky.asm):00184 [5+2]           PULS    X                                 ; RECOVER COUNTER
                      (      flxdsky.asm):00185         ;  AND     #%10000000
                      (      flxdsky.asm):00186         ;  BEQ     DSKY_RESET2          ; MOVE ON IF DONE
EA52 301F             (      flxdsky.asm):00187 [5]             DEX
EA54 26F8             (      flxdsky.asm):00188 [3]             BNE     DSKY_RESET1                       ; LOOP TILL TIMEOUT
                      (      flxdsky.asm):00189         ;
EA56                  (      flxdsky.asm):00190         DSKY_RESET2:
EA56 39               (      flxdsky.asm):00191 [5]             RTS
                      (      flxdsky.asm):00192         ;
                      (      flxdsky.asm):00193         ;
                      (      flxdsky.asm):00194         ;
                      (      flxdsky.asm):00195         ;__DSKY_PPIDETECT____________________________________________________________________________________
                      (      flxdsky.asm):00196         ;
                      (      flxdsky.asm):00197         ;  PROBE FOR PPI HARDWARE
                      (      flxdsky.asm):00198         ;____________________________________________________________________________________________________
                      (      flxdsky.asm):00199         ;
EA57                  (      flxdsky.asm):00200         DSKY_PPIDETECT:
                      (      flxdsky.asm):00201         ;
                      (      flxdsky.asm):00202         ; TEST FOR PPI EXISTENCE
                      (      flxdsky.asm):00203         ; WE SETUP THE PPI TO WRITE, THEN WRITE A VALUE OF ZERO
                      (      flxdsky.asm):00204         ; TO PORT A (DATALO), THEN READ IT BACK.  IF THE PPI IS THERE
                      (      flxdsky.asm):00205         ; THEN THE BUS HOLD CIRCUITRY WILL READ BACK THE ZERO. SINCE
                      (      flxdsky.asm):00206         ; WE ARE IN WRITE MODE, AN IDE CONTROLLER WILL NOT BE ABLE TO
                      (      flxdsky.asm):00207         ; INTERFERE WITH THE VALUE BEING READ.
EA57 BDEC50           (      flxdsky.asm):00208 [8]             JSR     DSKY_PPIWR
                      (      flxdsky.asm):00209         ;
EA5A 8600             (      flxdsky.asm):00210 [2]             LDA     #$00                              ; VALUE ZERO
EA5C B7FE60           (      flxdsky.asm):00211 [5]             STA     DSKY_PPIA                         ; PUSH VALUE TO PORT
EA5F B6FE60           (      flxdsky.asm):00212 [5]             LDA     DSKY_PPIA                         ; GET PORT VALUE
EA62 8100             (      flxdsky.asm):00213 [2]             CMPA    #$00
EA64 39               (      flxdsky.asm):00214 [5]             RTS                                       ; AND RETURN
                      (      flxdsky.asm):00215         ;
                      (      flxdsky.asm):00216                 IF      USEDSKYKB = 1
                      (      flxdsky.asm):00217         ;
     0000             (      flxdsky.asm):00218         KY_0                = $00
     0001             (      flxdsky.asm):00219         KY_1                = $01
     0002             (      flxdsky.asm):00220         KY_2                = $02
     0003             (      flxdsky.asm):00221         KY_3                = $03
     0004             (      flxdsky.asm):00222         KY_4                = $04
     0005             (      flxdsky.asm):00223         KY_5                = $05
     0006             (      flxdsky.asm):00224         KY_6                = $06
     0007             (      flxdsky.asm):00225         KY_7                = $07
     0008             (      flxdsky.asm):00226         KY_8                = $08
     0009             (      flxdsky.asm):00227         KY_9                = $09
     000A             (      flxdsky.asm):00228         KY_A                = $0A
     000B             (      flxdsky.asm):00229         KY_B                = $0B
     000C             (      flxdsky.asm):00230         KY_C                = $0C
     000D             (      flxdsky.asm):00231         KY_D                = $0D
     000E             (      flxdsky.asm):00232         KY_E                = $0E
     000F             (      flxdsky.asm):00233         KY_F                = $0F
     0010             (      flxdsky.asm):00234         KY_FW               = $10                             ; FORWARD
     0011             (      flxdsky.asm):00235         KY_BK               = $11                             ; BACKWARD
     0012             (      flxdsky.asm):00236         KY_CL               = $12                             ; CLEAR
     0013             (      flxdsky.asm):00237         KY_EN               = $13                             ; ENTER
     0014             (      flxdsky.asm):00238         KY_DE               = $14                             ; DEPOSIT
     0015             (      flxdsky.asm):00239         KY_EX               = $15                             ; EXAMINE
     0016             (      flxdsky.asm):00240         KY_GO               = $16                             ; GO
     0017             (      flxdsky.asm):00241         KY_BO               = $17                             ; BOOT
     0018             (      flxdsky.asm):00242         KY_F4               = $18                             ; F4
     0019             (      flxdsky.asm):00243         KY_F3               = $19                             ; F3
     0020             (      flxdsky.asm):00244         KY_F2               = $20                             ; F2
     0021             (      flxdsky.asm):00245         KY_F1               = $21                             ; F1
                      (      flxdsky.asm):00246         ;
                      (      flxdsky.asm):00247         ;__DSKY_STAT_________________________________________________________________________________________
                      (      flxdsky.asm):00248         ;
                      (      flxdsky.asm):00249         ;  CHECK FOR KEY PRESS, SAVE RAW VALUE, RETURN STATUS
                      (      flxdsky.asm):00250         ;____________________________________________________________________________________________________
                      (      flxdsky.asm):00251         ;
EA65                  (      flxdsky.asm):00252         DSKY_STAT:
EA65 B6EC90           (      flxdsky.asm):00253 [5]                 LDA     DSKY_PRESENT                      ; DOES IT EXIST?
EA68 81FF             (      flxdsky.asm):00254 [2]                 CMPA    #$FF                              ; SET FLAGS
EA6A 2605             (      flxdsky.asm):00255 [3]                 BNE     DSKY_STATA                        ; ABORT WITH A=0 IF NOT THERE
EA6C BDEB6A           (      flxdsky.asm):00256 [8]                 JSR     DSKY_ST
EA6F 840F             (      flxdsky.asm):00257 [2]                 ANDA    #$0F                              ; ISOLATE THE CUR FIFO LEN
EA71                  (      flxdsky.asm):00258         DSKY_STATA:
EA71 39               (      flxdsky.asm):00259 [5]                 RTS
                      (      flxdsky.asm):00260         ;
                      (      flxdsky.asm):00261         ;__DSKY_GETKEY_____________________________________________________________________________________
                      (      flxdsky.asm):00262         ;
                      (      flxdsky.asm):00263         ;  WAIT FOR A DSKY KEYPRESS AND RETURN
                      (      flxdsky.asm):00264         ;____________________________________________________________________________________________________
                      (      flxdsky.asm):00265         ;
EA72                  (      flxdsky.asm):00266         DSKY_GETKEY:
EA72 B6EC90           (      flxdsky.asm):00267 [5]                 LDA     DSKY_PRESENT                      ; DOES IT EXIST?
EA75 81FF             (      flxdsky.asm):00268 [2]                 CMPA    #$FF                              ; SET FLAGS
EA77 2629             (      flxdsky.asm):00269 [3]                 BNE     DSKY_GETKEY1A                     ; ABORT WITH A=0 IF NOT THERE
EA79 BDEA65           (      flxdsky.asm):00270 [8]                 JSR     DSKY_STAT
EA7C 27F4             (      flxdsky.asm):00271 [3]                 BEQ     DSKY_GETKEY                       ; LOOP IF NOTHING THERE
EA7E 8640             (      flxdsky.asm):00272 [2]                 LDA     #DSKY_CMD_FIFO
EA80 BDEB2E           (      flxdsky.asm):00273 [8]                 JSR     DSKY_CMD
EA83 BDEB6F           (      flxdsky.asm):00274 [8]                 JSR     DSKY_DIN
EA86 88C0             (      flxdsky.asm):00275 [2]                 EORA    #%11000000                        ; FLIP POLARITY OF SHIFT/CTL BITS
EA88 3402             (      flxdsky.asm):00276 [5+1]               PSHS    A
EA8A 843F             (      flxdsky.asm):00277 [2]                 ANDA    #$3F                              ; STRIP SHIFT/CTL BITS FOR LOOKUP
EA8C B7EC8E           (      flxdsky.asm):00278 [5]                 STA     DSKY_TEMP_VAL
EA8F 8E0000           (      flxdsky.asm):00279 [3]                 LDX     #0                                ; INDEX
EA92                  (      flxdsky.asm):00280         DSKY_GETKEY1:
EA92 A689EAB4         (      flxdsky.asm):00281 [4+4]               LDA     DSKY_KEYMAP,X
EA96 B1EC8E           (      flxdsky.asm):00282 [5]                 CMPA    DSKY_TEMP_VAL                     ; MATCH?
EA99 270C             (      flxdsky.asm):00283 [3]                 BEQ     DSKY_GETKEY2                      ; FOUND, DONE
EA9B 3001             (      flxdsky.asm):00284 [5]                 INX
EA9D 8C001C           (      flxdsky.asm):00285 [4]                 CMPX    #28
EAA0 26F0             (      flxdsky.asm):00286 [3]                 BNE     DSKY_GETKEY1                      ; LOOP UNTIL EOT
EAA2                  (      flxdsky.asm):00287         DSKY_GETKEY1A:
EAA2 3502             (      flxdsky.asm):00288 [5+1]               PULS    A
EAA4 86FF             (      flxdsky.asm):00289 [2]                 LDA     #$FF                              ; NOT FOUND ERR, RETURN $FF
EAA6 39               (      flxdsky.asm):00290 [5]                 RTS
                      (      flxdsky.asm):00291         
EAA7                  (      flxdsky.asm):00292         DSKY_GETKEY2:
                      (      flxdsky.asm):00293         ; RETURN THE INDEX POSITION WHERE THE SCAN CODE WAS FOUND
                      (      flxdsky.asm):00294         ; THE ORIGINAL SHIFT/CTRL BITS ARE RESTORED
EAA7 3502             (      flxdsky.asm):00295 [5+1]               PULS    A                                 ; RESTORE RAW VALUE
EAA9 94C0             (      flxdsky.asm):00296 [4]                 ANDA    %11000000                         ; ISOLATE SHIFT/CTRL BITS
EAAB B7EC8E           (      flxdsky.asm):00297 [5]                 STA     DSKY_TEMP_VAL
EAAE 1F18             (      flxdsky.asm):00298 [6]                 TFR     X,A
EAB0 BAEC8E           (      flxdsky.asm):00299 [5]                 ORA     DSKY_TEMP_VAL                     ; COMBINE WITH INDEX VALUE
EAB3 39               (      flxdsky.asm):00300 [5]                 RTS
                      (      flxdsky.asm):00301         ;
                      (      flxdsky.asm):00302         ;_KEYMAP_TABLE_____________________________________________________________________________________________________________
                      (      flxdsky.asm):00303         ;
EAB4                  (      flxdsky.asm):00304         DSKY_KEYMAP:
                      (      flxdsky.asm):00305         ; POS   $00  $01  $02  $03  $04  $05  $06  $07
                      (      flxdsky.asm):00306         ; KEY   [0]  [1]  [2]  [3]  [4]  [5]  [6]  [7]
EAB4 0D040C14030B1302 (      flxdsky.asm):00307                     .BYTE   $0D,$04,$0C,$14,$03,$0B,$13,$02
                      (      flxdsky.asm):00308         ;
                      (      flxdsky.asm):00309         ; POS   $08  $09  $0A  $0B  $0C  $0D  $0E  $0F
                      (      flxdsky.asm):00310         ; KEY   [8]  [9]  [A]  [B]  [C]  [D]  [E]  [F]
EABC 0A12010911000810 (      flxdsky.asm):00311                     .BYTE   $0A,$12,$01,$09,$11,$00,$08,$10
                      (      flxdsky.asm):00312         ;
                      (      flxdsky.asm):00313         ; POS   $10  $11  $12  $13  $14  $15  $16  $17
                      (      flxdsky.asm):00314         ; KEY   [FW] [BK] [CL] [EN] [DE] [EX] [GO] [BO]
EAC4 05151D1C1B1A1918 (      flxdsky.asm):00315                     .BYTE   $05,$15,$1D,$1C,$1B,$1A,$19,$18
                      (      flxdsky.asm):00316         
                      (      flxdsky.asm):00317         ; POS   $18  $19  $20  $21
                      (      flxdsky.asm):00318         ; KEY   [F4] [F3] [F2] [F1]
EACC 23222120         (      flxdsky.asm):00319                     .BYTE   $23,$22,$21,$20
                      (      flxdsky.asm):00320         
                      (      flxdsky.asm):00321         ;
                      (      flxdsky.asm):00322                     ENDC                                      ; DSKY_KBD
                      (      flxdsky.asm):00323         ;
                      (      flxdsky.asm):00324         ;__DSKY_BIN2SEG________________________________________________________________________________________
                      (      flxdsky.asm):00325         ;
                      (      flxdsky.asm):00326         ; CONVERT 32 BIT BINARY TO 8 BYTE HEX SEGMENT DISPLAY
                      (      flxdsky.asm):00327         ;
                      (      flxdsky.asm):00328         ; DSKY_BUF: 32 BIT BINARY
                      (      flxdsky.asm):00329         ; DSKY_HEXBUF: DEST LED SEGMENT DISPLAY BUFFER (8 BYTES)
                      (      flxdsky.asm):00330         ;____________________________________________________________________________________________________
                      (      flxdsky.asm):00331         ;
EAD0                  (      flxdsky.asm):00332         DSKY_BIN2SEG:
EAD0 8E0000           (      flxdsky.asm):00333 [3]                 LDX     #$0000
EAD3                  (      flxdsky.asm):00334         DSKY_BIN2SEG1:
EAD3 A689EC9B         (      flxdsky.asm):00335 [4+4]               LDA     DSKY_HEXBUF,X                     ; FIRST NIBBLE
EAD7 44               (      flxdsky.asm):00336 [2]                 LSRA
EAD8 44               (      flxdsky.asm):00337 [2]                 LSRA
EAD9 44               (      flxdsky.asm):00338 [2]                 LSRA
EADA 44               (      flxdsky.asm):00339 [2]                 LSRA
EADB C600             (      flxdsky.asm):00340 [2]                 LDB     #$00
EADD 1E89             (      flxdsky.asm):00341 [8]                 EXG     A,B                               ; MOVE DIGIT TO LOOKUP INDEX
EADF 1F02             (      flxdsky.asm):00342 [6]                 TFR     D,Y
EAE1 A6A9EC7E         (      flxdsky.asm):00343 [4+4]               LDA     DSKY_HEXMAP,Y                     ; GET DECODED DIGIT INTO A
EAE5 3402             (      flxdsky.asm):00344 [5+1]               PSHS    A
EAE7 1F10             (      flxdsky.asm):00345 [6]                 TFR     X,D
EAE9 58               (      flxdsky.asm):00346 [2]                 ASLB
EAEA 1F02             (      flxdsky.asm):00347 [6]                 TFR     D,Y
EAEC 3502             (      flxdsky.asm):00348 [5+1]               PULS    A
EAEE A7A9EC93         (      flxdsky.asm):00349 [4+4]               STA     DSKY_BUF,Y                        ;STORE HIGH BYTE IN OUT BUFFER
EAF2 A689EC9B         (      flxdsky.asm):00350 [4+4]               LDA     DSKY_HEXBUF,X                     ; SECOND NIBBLE
EAF6 840F             (      flxdsky.asm):00351 [2]                 ANDA    #$0F
EAF8 C600             (      flxdsky.asm):00352 [2]                 LDB     #$00
EAFA 1E89             (      flxdsky.asm):00353 [8]                 EXG     A,B                               ; MOVE DIGIT TO LOOKUP INDEX
EAFC 1F02             (      flxdsky.asm):00354 [6]                 TFR     D,Y
EAFE A6A9EC7E         (      flxdsky.asm):00355 [4+4]               LDA     DSKY_HEXMAP,Y                     ; GET DECODED DIGIT INTO A
EB02 3402             (      flxdsky.asm):00356 [5+1]               PSHS    A
EB04 1F10             (      flxdsky.asm):00357 [6]                 TFR     X,D
EB06 58               (      flxdsky.asm):00358 [2]                 ASLB
EB07 1F02             (      flxdsky.asm):00359 [6]                 TFR     D,Y
EB09 3502             (      flxdsky.asm):00360 [5+1]               PULS    A
EB0B A7A9EC94         (      flxdsky.asm):00361 [4+4]               STA     DSKY_BUF+1,Y                      ;STORE HIGH BYTE IN OUT BUFFER
EB0F 3001             (      flxdsky.asm):00362 [5]                 INX
EB11 8C0004           (      flxdsky.asm):00363 [4]                 CMPX    #4
EB14 26BD             (      flxdsky.asm):00364 [3]                 BNE     DSKY_BIN2SEG1
EB16 39               (      flxdsky.asm):00365 [5]                 RTS
                      (      flxdsky.asm):00366         ;
                      (      flxdsky.asm):00367         ;__DSKY_SHOW___________________________________________________________________________________________
                      (      flxdsky.asm):00368         ; DSKY SHOW BUFFER
                      (      flxdsky.asm):00369         ;______________________________________________________________________________________________________
                      (      flxdsky.asm):00370         ;
EB17                  (      flxdsky.asm):00371         DSKY_SHOW:
EB17 3436             (      flxdsky.asm):00372 [5+6]               PSHS    A,B,X,Y
EB19 8E0000           (      flxdsky.asm):00373 [3]                 LDX     #0
EB1C                  (      flxdsky.asm):00374         DSKY_SHOW1:
EB1C A689EC93         (      flxdsky.asm):00375 [4+4]               LDA     DSKY_BUF,X
EB20 1F19             (      flxdsky.asm):00376 [6]                 TFR     X,B
EB22 BDEBB2           (      flxdsky.asm):00377 [8]                 JSR     DSKY_PUTBYTE
EB25 3001             (      flxdsky.asm):00378 [5]                 INX
EB27 8C0008           (      flxdsky.asm):00379 [4]                 CMPX    #8
EB2A 26F0             (      flxdsky.asm):00380 [3]                 BNE     DSKY_SHOW1
EB2C 35B6             (      flxdsky.asm):00381 [5+8]               PULS    A,B,X,Y,PC
                      (      flxdsky.asm):00382         
                      (      flxdsky.asm):00383         ;______________________________________________________________________________________________________
                      (      flxdsky.asm):00384         ; DSKYNG OUTPUT ROUTINES
                      (      flxdsky.asm):00385         ;______________________________________________________________________________________________________
                      (      flxdsky.asm):00386         
                      (      flxdsky.asm):00387         ; SEND DSKY COMMAND BYTE IN REGISTER A
EB2E                  (      flxdsky.asm):00388         DSKY_CMD:
EB2E 3402             (      flxdsky.asm):00389 [5+1]               PSHS    A
EB30 8601             (      flxdsky.asm):00390 [2]                 LDA     #$01
EB32 7EEB39           (      flxdsky.asm):00391 [4]                 JMP     DSKY_DOUT2
                      (      flxdsky.asm):00392         ;
                      (      flxdsky.asm):00393         ; SEND DSKY DATA BYTE IN REGISTER A
                      (      flxdsky.asm):00394         ; TRASHES BC
                      (      flxdsky.asm):00395         ;
EB35                  (      flxdsky.asm):00396         DSKY_DOUT:
EB35 3402             (      flxdsky.asm):00397 [5+1]               PSHS    A
EB37 8600             (      flxdsky.asm):00398 [2]                 LDA     #$00
                      (      flxdsky.asm):00399         ;
EB39                  (      flxdsky.asm):00400         DSKY_DOUT2:
                      (      flxdsky.asm):00401         ; SET PPI LINE CONFIG TO WRITE MODE
EB39 BDEC50           (      flxdsky.asm):00402 [8]                 JSR     DSKY_PPIWR
                      (      flxdsky.asm):00403         ;
                      (      flxdsky.asm):00404         ; SET ADDRESS FIRST
EB3C 8A06             (      flxdsky.asm):00405 [2]                 ORA     #DSKY_PPI_IDLE
EB3E B7FE62           (      flxdsky.asm):00406 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00407         ;
                      (      flxdsky.asm):00408         ; ASSERT 8279 /CS
EB41 8A18             (      flxdsky.asm):00409 [2]                 ORA     #%00011000
EB43 B7FE62           (      flxdsky.asm):00410 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00411         ;
                      (      flxdsky.asm):00412         ; PPIC WORKING VALUE TO DSKY_TEMP_VAL
EB46 B7EC8E           (      flxdsky.asm):00413 [5]                 STA     DSKY_TEMP_VAL
                      (      flxdsky.asm):00414         ;
                      (      flxdsky.asm):00415         ; ASSERT DATA BYTE VALUE
EB49 3502             (      flxdsky.asm):00416 [5+1]               PULS    A
EB4B B7FE60           (      flxdsky.asm):00417 [5]                 STA     DSKY_PPIA
                      (      flxdsky.asm):00418         ;
                      (      flxdsky.asm):00419         ; PULSE /WR
EB4E B6EC8E           (      flxdsky.asm):00420 [5]                 LDA     DSKY_TEMP_VAL
EB51 84FD             (      flxdsky.asm):00421 [2]                 ANDA    #%11111101
EB53 B7FE62           (      flxdsky.asm):00422 [5]                 STA     DSKY_PPIC
EB56 12               (      flxdsky.asm):00423 [2]                 NOP                                       ; MAY NOT BE NEEDED
EB57 8A02             (      flxdsky.asm):00424 [2]                 ORA     #%00000010
EB59 B7FE62           (      flxdsky.asm):00425 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00426         ;
                      (      flxdsky.asm):00427         ; DEASSERT /CS
EB5C 84E7             (      flxdsky.asm):00428 [2]                 ANDA    #%11100111
EB5E B7FE62           (      flxdsky.asm):00429 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00430         ;
                      (      flxdsky.asm):00431         ; CLEAR ADDRESS BIT
EB61 84E6             (      flxdsky.asm):00432 [2]                 ANDA    #%11100110
EB63 B7FE62           (      flxdsky.asm):00433 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00434         ;
                      (      flxdsky.asm):00435         ; DONE
EB66 BDEC7B           (      flxdsky.asm):00436 [8]                 JSR     DSKY_PPIIDLE
EB69 39               (      flxdsky.asm):00437 [5]                 RTS
                      (      flxdsky.asm):00438         ;
                      (      flxdsky.asm):00439         ;==================================================================================================
                      (      flxdsky.asm):00440         ; DSKYNG OUTPUT ROUTINES
                      (      flxdsky.asm):00441         ;==================================================================================================
                      (      flxdsky.asm):00442         ;
                      (      flxdsky.asm):00443         ; RETURN DSKY STATUS VALUE IN A
                      (      flxdsky.asm):00444         ;
EB6A                  (      flxdsky.asm):00445         DSKY_ST:
EB6A 8601             (      flxdsky.asm):00446 [2]                 LDA     #$01
EB6C 7EEB71           (      flxdsky.asm):00447 [4]                 JMP     DSKY_DIN2
                      (      flxdsky.asm):00448         ;
                      (      flxdsky.asm):00449         ; RETURN NEXT DATA VALUE IN A
                      (      flxdsky.asm):00450         ;
EB6F                  (      flxdsky.asm):00451         DSKY_DIN:
EB6F 8600             (      flxdsky.asm):00452 [2]                 LDA     #$00
                      (      flxdsky.asm):00453         ;
EB71                  (      flxdsky.asm):00454         DSKY_DIN2:
                      (      flxdsky.asm):00455         ; SET PPI LINE CONFIG TO READ MODE
EB71 BDEC68           (      flxdsky.asm):00456 [8]                 JSR     DSKY_PPIRD
                      (      flxdsky.asm):00457         ;
                      (      flxdsky.asm):00458         ; SET ADDRESS FIRST
EB74 8A06             (      flxdsky.asm):00459 [2]                 ORA     #DSKY_PPI_IDLE
EB76 B7FE62           (      flxdsky.asm):00460 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00461         ;
                      (      flxdsky.asm):00462         ; ASSERT 8279 /CS
EB79 8A18             (      flxdsky.asm):00463 [2]                 ORA     #%00011000
EB7B B7FE62           (      flxdsky.asm):00464 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00465         ;
                      (      flxdsky.asm):00466         ; ASSERT /RD
EB7E 847B             (      flxdsky.asm):00467 [2]                 ANDA    #%01111011
EB80 B7FE62           (      flxdsky.asm):00468 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00469         ;
EB83 B7EC8E           (      flxdsky.asm):00470 [5]                 STA     DSKY_TEMP_VAL
                      (      flxdsky.asm):00471         ; GET VALUE
EB86 B6FE60           (      flxdsky.asm):00472 [5]                 LDA     DSKY_PPIA
EB89 3402             (      flxdsky.asm):00473 [5+1]               PSHS    A
EB8B B6EC8E           (      flxdsky.asm):00474 [5]                 LDA     DSKY_TEMP_VAL
                      (      flxdsky.asm):00475         ; DEASSERT /RD
EB8E 8A04             (      flxdsky.asm):00476 [2]                 ORA     #%00000100
EB90 B7FE62           (      flxdsky.asm):00477 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00478         ;
                      (      flxdsky.asm):00479         ; DEASSERT /CS
EB93 84E7             (      flxdsky.asm):00480 [2]                 ANDA    #%11100111
EB95 B7FE62           (      flxdsky.asm):00481 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00482         ;
                      (      flxdsky.asm):00483         ; CLEAR ADDRESS BIT
EB98 84E6             (      flxdsky.asm):00484 [2]                 ANDA    #%11100110
EB9A B7FE62           (      flxdsky.asm):00485 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00486         ;
                      (      flxdsky.asm):00487         ; DONE
EB9D BDEC7B           (      flxdsky.asm):00488 [8]                 JSR     DSKY_PPIIDLE
EBA0 3582             (      flxdsky.asm):00489 [5+3]               PULS    A,PC
                      (      flxdsky.asm):00490         
                      (      flxdsky.asm):00491         ;__DSKY_BLANK_____________________________________________________________________________________
                      (      flxdsky.asm):00492         ;
                      (      flxdsky.asm):00493         ; BLANK DSKYNG DISPLAY  (WITHOUT USING CLEAR)
                      (      flxdsky.asm):00494         ;
                      (      flxdsky.asm):00495         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00496         ;
EBA2                  (      flxdsky.asm):00497         DSKY_BLANK:
EBA2 8690             (      flxdsky.asm):00498 [2]                 LDA     #DSKY_CMD_WDSP
EBA4 BDEB2E           (      flxdsky.asm):00499 [8]                 JSR     DSKY_CMD
EBA7 C610             (      flxdsky.asm):00500 [2]                 LDB     #16
EBA9                  (      flxdsky.asm):00501         DSKY_BLANK1:
EBA9 86FF             (      flxdsky.asm):00502 [2]                 LDA     #$FF
EBAB BDEB35           (      flxdsky.asm):00503 [8]                 JSR     DSKY_DOUT
EBAE 5A               (      flxdsky.asm):00504 [2]                 DECB
EBAF 26F8             (      flxdsky.asm):00505 [3]                 BNE     DSKY_BLANK1
EBB1 39               (      flxdsky.asm):00506 [5]                 RTS
                      (      flxdsky.asm):00507         ;
                      (      flxdsky.asm):00508         ;__DSKY_PUTBYTE____________________________________________________________________________________
                      (      flxdsky.asm):00509         ;
                      (      flxdsky.asm):00510         ; WRITE A RAW BYTE VALUE TO DSKY DISPLAY RAM
                      (      flxdsky.asm):00511         ; AT LOCATION IN REGISTER B, VALUE IN A.
                      (      flxdsky.asm):00512         ;
                      (      flxdsky.asm):00513         ;__________________________________________________________________________________________________
                      (      flxdsky.asm):00514         ;
EBB2                  (      flxdsky.asm):00515         DSKY_PUTBYTE:
EBB2 3402             (      flxdsky.asm):00516 [5+1]               PSHS    A
EBB4 1CFE             (      flxdsky.asm):00517 [3]                 CLC
EBB6 C990             (      flxdsky.asm):00518 [2]                 ADCB    #DSKY_CMD_WDSP
EBB8 1F98             (      flxdsky.asm):00519 [6]                 TFR     B,A
EBBA BDEB2E           (      flxdsky.asm):00520 [8]                 JSR     DSKY_CMD
EBBD 3502             (      flxdsky.asm):00521 [5+1]               PULS    A
EBBF 88FF             (      flxdsky.asm):00522 [2]                 EORA    #$FF
EBC1 BDEB35           (      flxdsky.asm):00523 [8]                 JSR     DSKY_DOUT
EBC4 39               (      flxdsky.asm):00524 [5]                 RTS
                      (      flxdsky.asm):00525         ;
                      (      flxdsky.asm):00526         ;__DSKY_GETBYTE___________________________________________________________________________________
                      (      flxdsky.asm):00527         ; READ A RAW BYTE VALUE FROM DSKY DISPLAY RAM
                      (      flxdsky.asm):00528         ; AT LOCATION IN REGISTER B, VALUE RETURNED IN A
                      (      flxdsky.asm):00529         ;
                      (      flxdsky.asm):00530         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00531         ;
EBC5                  (      flxdsky.asm):00532         DSKY_GETBYTE:
EBC5 1CFE             (      flxdsky.asm):00533 [3]                 CLC
EBC7 C970             (      flxdsky.asm):00534 [2]                 ADCB    #DSKY_CMD_RDSP
EBC9 1F98             (      flxdsky.asm):00535 [6]                 TFR     B,A
EBCB BDEB2E           (      flxdsky.asm):00536 [8]                 JSR     DSKY_CMD
EBCE BDEB6F           (      flxdsky.asm):00537 [8]                 JSR     DSKY_DIN
EBD1 88FF             (      flxdsky.asm):00538 [2]                 EORA    #$FF
EBD3 39               (      flxdsky.asm):00539 [5]                 RTS
                      (      flxdsky.asm):00540         
                      (      flxdsky.asm):00541         ;
                      (      flxdsky.asm):00542         ;__DSKY_PUTLED____________________________________________________________________________________
                      (      flxdsky.asm):00543         ;
                      (      flxdsky.asm):00544         ;       This function is intended to update the LEDs.
                      (      flxdsky.asm):00545         ;       VALUES SHOULD BE IN DSKY_BUF
                      (      flxdsky.asm):00546         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00547         ;
EBD4                  (      flxdsky.asm):00548         DSKY_PUTLED:
EBD4 3416             (      flxdsky.asm):00549 [5+4]               PSHS    A,B,X
EBD6 C600             (      flxdsky.asm):00550 [2]                 LDB     #$00
EBD8 8EEC93           (      flxdsky.asm):00551 [3]                 LDX     #DSKY_BUF
EBDB                  (      flxdsky.asm):00552         DSKY_PUTLED_1:
EBDB A684             (      flxdsky.asm):00553 [4+0]               LDA     ,X                                ; GET BYTE
EBDD BDEBB2           (      flxdsky.asm):00554 [8]                 JSR     DSKY_PUTBYTE                      ; SEND IT TO DSKY
EBE0 5C               (      flxdsky.asm):00555 [2]                 INCB
EBE1 3001             (      flxdsky.asm):00556 [5]                 INX
EBE3 C108             (      flxdsky.asm):00557 [2]                 CMPB    #8
EBE5 26F4             (      flxdsky.asm):00558 [3]                 BNE     DSKY_PUTLED_1
EBE7 3596             (      flxdsky.asm):00559 [5+6]               PULS    A,B,X,PC
                      (      flxdsky.asm):00560         
                      (      flxdsky.asm):00561         ;
                      (      flxdsky.asm):00562         ;__DSKY_BEEP______________________________________________________________________________________
                      (      flxdsky.asm):00563         ;       This function is intended to beep the speaker on the DSKY
                      (      flxdsky.asm):00564         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00565         ;
EBE9                  (      flxdsky.asm):00566         DSKY_BEEP:
EBE9 3416             (      flxdsky.asm):00567 [5+4]               PSHS    A,B,X
EBEB C60F             (      flxdsky.asm):00568 [2]                 LDB     #$0F
EBED BDEBC5           (      flxdsky.asm):00569 [8]                 JSR     DSKY_GETBYTE
EBF0 8A20             (      flxdsky.asm):00570 [2]                 ORA     #$20
EBF2 8620             (      flxdsky.asm):00571 [2]                 LDA     #$20
EBF4 C60F             (      flxdsky.asm):00572 [2]                 LDB     #$0F
EBF6 BDEBB2           (      flxdsky.asm):00573 [8]                 JSR     DSKY_PUTBYTE
                      (      flxdsky.asm):00574         
EBF9 8E8FFF           (      flxdsky.asm):00575 [3]                 LDX     #$8FFF
EBFC                  (      flxdsky.asm):00576         DSKY_BEEP1:
EBFC 301F             (      flxdsky.asm):00577 [5]                 DEX
EBFE 26FC             (      flxdsky.asm):00578 [3]                 BNE     DSKY_BEEP1
                      (      flxdsky.asm):00579         
EC00 C60F             (      flxdsky.asm):00580 [2]                 LDB     #$0F
EC02 BDEBC5           (      flxdsky.asm):00581 [8]                 JSR     DSKY_GETBYTE
EC05 84DF             (      flxdsky.asm):00582 [2]                 ANDA    #$DF
EC07 86DF             (      flxdsky.asm):00583 [2]                 LDA     #$DF
EC09 C60F             (      flxdsky.asm):00584 [2]                 LDB     #$0F
EC0B BDEBB2           (      flxdsky.asm):00585 [8]                 JSR     DSKY_PUTBYTE
EC0E 3596             (      flxdsky.asm):00586 [5+6]               PULS    A,B,X,PC
                      (      flxdsky.asm):00587         
                      (      flxdsky.asm):00588         ;
                      (      flxdsky.asm):00589         ;__DSKY_L1ON______________________________________________________________________________________
                      (      flxdsky.asm):00590         ;       This function is intended to turn on DSKY L1
                      (      flxdsky.asm):00591         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00592         ;
EC10                  (      flxdsky.asm):00593         DSKY_L1ON:
EC10 3406             (      flxdsky.asm):00594 [5+2]               PSHS    A,B
EC12 C60D             (      flxdsky.asm):00595 [2]                 LDB     #$0D
EC14 BDEBC5           (      flxdsky.asm):00596 [8]                 JSR     DSKY_GETBYTE
EC17 8A20             (      flxdsky.asm):00597 [2]                 ORA     #$20
EC19 C60D             (      flxdsky.asm):00598 [2]                 LDB     #$0D
EC1B BDEBB2           (      flxdsky.asm):00599 [8]                 JSR     DSKY_PUTBYTE
EC1E 3586             (      flxdsky.asm):00600 [5+4]               PULS    A,B,PC
                      (      flxdsky.asm):00601         
                      (      flxdsky.asm):00602         ;
                      (      flxdsky.asm):00603         ;__DSKY_L2ON______________________________________________________________________________________
                      (      flxdsky.asm):00604         ;       This function is intended to turn on DSKY L2
                      (      flxdsky.asm):00605         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00606         ;
EC20                  (      flxdsky.asm):00607         DSKY_L2ON:
EC20 3406             (      flxdsky.asm):00608 [5+2]               PSHS    A,B
EC22 C60D             (      flxdsky.asm):00609 [2]                 LDB     #$0D
EC24 BDEBC5           (      flxdsky.asm):00610 [8]                 JSR     DSKY_GETBYTE
EC27 8A20             (      flxdsky.asm):00611 [2]                 ORA     #$20
EC29 C60E             (      flxdsky.asm):00612 [2]                 LDB     #$0E
EC2B BDEBB2           (      flxdsky.asm):00613 [8]                 JSR     DSKY_PUTBYTE
EC2E 3586             (      flxdsky.asm):00614 [5+4]               PULS    A,B,PC
                      (      flxdsky.asm):00615         ;
                      (      flxdsky.asm):00616         ;__DSKY_L1OFF_____________________________________________________________________________________
                      (      flxdsky.asm):00617         ;       This function is intended to turn off DSKY L1
                      (      flxdsky.asm):00618         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00619         ;
EC30                  (      flxdsky.asm):00620         DSKY_L1OFF:
EC30 3406             (      flxdsky.asm):00621 [5+2]               PSHS    A,B
EC32 C60D             (      flxdsky.asm):00622 [2]                 LDB     #$0D
EC34 BDEBC5           (      flxdsky.asm):00623 [8]                 JSR     DSKY_GETBYTE
EC37 84DF             (      flxdsky.asm):00624 [2]                 ANDA    #$DF
EC39 C60D             (      flxdsky.asm):00625 [2]                 LDB     #$0D
EC3B BDEBB2           (      flxdsky.asm):00626 [8]                 JSR     DSKY_PUTBYTE
EC3E 3586             (      flxdsky.asm):00627 [5+4]               PULS    A,B,PC
                      (      flxdsky.asm):00628         
                      (      flxdsky.asm):00629         
                      (      flxdsky.asm):00630         ;
                      (      flxdsky.asm):00631         ;__DSKY_L2OFF_____________________________________________________________________________________
                      (      flxdsky.asm):00632         ;       This function is intended to turn off DSKY L2
                      (      flxdsky.asm):00633         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00634         ;
EC40                  (      flxdsky.asm):00635         DSKY_L2OFF:
EC40 3406             (      flxdsky.asm):00636 [5+2]               PSHS    A,B
EC42 C60D             (      flxdsky.asm):00637 [2]                 LDB     #$0D
EC44 BDEBC5           (      flxdsky.asm):00638 [8]                 JSR     DSKY_GETBYTE
EC47 84DF             (      flxdsky.asm):00639 [2]                 ANDA    #$DF
EC49 C60E             (      flxdsky.asm):00640 [2]                 LDB     #$0E
EC4B BDEBB2           (      flxdsky.asm):00641 [8]                 JSR     DSKY_PUTBYTE
EC4E 3586             (      flxdsky.asm):00642 [5+4]               PULS    A,B,PC
                      (      flxdsky.asm):00643         
                      (      flxdsky.asm):00644         ;
                      (      flxdsky.asm):00645         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00646         ; DSKYNG LINE CONTROL ROUTINES
                      (      flxdsky.asm):00647         ;
                      (      flxdsky.asm):00648         ; SETUP PPI FOR WRITING: PUT PPI PORT A IN OUTPUT MODE
                      (      flxdsky.asm):00649         ; AVOID REWRTING PPIX IF ALREADY IN OUTPUT MODE
                      (      flxdsky.asm):00650         ;
                      (      flxdsky.asm):00651         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00652         ;
EC50                  (      flxdsky.asm):00653         DSKY_PPIWR:
EC50 3402             (      flxdsky.asm):00654 [5+1]               PSHS    A
                      (      flxdsky.asm):00655         ;
                      (      flxdsky.asm):00656         ; CHECK FOR WRITE MODE
EC52 B6EC8F           (      flxdsky.asm):00657 [5]                 LDA     DSKY_PPIX_VAL
EC55 8182             (      flxdsky.asm):00658 [2]                 CMPA    #DSKY_PPIX_WR
EC57 270D             (      flxdsky.asm):00659 [3]                 BEQ     DSKY_PPIWR1
                      (      flxdsky.asm):00660         ;
                      (      flxdsky.asm):00661         ; SET PPI TO WRITE MODE
EC59 8682             (      flxdsky.asm):00662 [2]                 LDA     #DSKY_PPIX_WR
EC5B B7FE63           (      flxdsky.asm):00663 [5]                 STA     DSKY_PPIX
EC5E B7EC8F           (      flxdsky.asm):00664 [5]                 STA     DSKY_PPIX_VAL
                      (      flxdsky.asm):00665         ;
                      (      flxdsky.asm):00666         ; RESTORE PORT C (MAY NOT BE NEEDED)
EC61 8606             (      flxdsky.asm):00667 [2]                 LDA     #DSKY_PPI_IDLE
EC63 B7FE62           (      flxdsky.asm):00668 [5]                 STA     DSKY_PPIC
                      (      flxdsky.asm):00669         ;
EC66                  (      flxdsky.asm):00670         DSKY_PPIWR1:
                      (      flxdsky.asm):00671         ;
EC66 3582             (      flxdsky.asm):00672 [5+3]               PULS    A,PC
                      (      flxdsky.asm):00673         
                      (      flxdsky.asm):00674         ;
                      (      flxdsky.asm):00675         ; SETUP PPI FOR READING: PUT PPI PORT A IN INPUT MODE
                      (      flxdsky.asm):00676         ; AVOID REWRTING PPIX IF ALREADY IN INPUT MODE
                      (      flxdsky.asm):00677         ;
EC68                  (      flxdsky.asm):00678         DSKY_PPIRD:
EC68 3402             (      flxdsky.asm):00679 [5+1]               PSHS    A
                      (      flxdsky.asm):00680         ;
                      (      flxdsky.asm):00681         ; CHECK FOR READ MODE
EC6A B6EC8F           (      flxdsky.asm):00682 [5]                 LDA     DSKY_PPIX_VAL
EC6D 8192             (      flxdsky.asm):00683 [2]                 CMPA    #DSKY_PPIX_RD
EC6F 2708             (      flxdsky.asm):00684 [3]                 BEQ     DSKY_PPIRD1
                      (      flxdsky.asm):00685         ;
                      (      flxdsky.asm):00686         ; SET PPI TO READ MODE
EC71 8692             (      flxdsky.asm):00687 [2]                 LDA     #DSKY_PPIX_RD
EC73 B7FE63           (      flxdsky.asm):00688 [5]                 STA     DSKY_PPIX
EC76 B7EC8F           (      flxdsky.asm):00689 [5]                 STA     DSKY_PPIX_VAL
                      (      flxdsky.asm):00690         ;
EC79                  (      flxdsky.asm):00691         DSKY_PPIRD1:
EC79 3582             (      flxdsky.asm):00692 [5+3]               PULS    A,PC
                      (      flxdsky.asm):00693         
                      (      flxdsky.asm):00694         ;
                      (      flxdsky.asm):00695         ; RELEASE USE OF PPI
                      (      flxdsky.asm):00696         ;
EC7B                  (      flxdsky.asm):00697         DSKY_PPIIDLE:
EC7B 7EEC68           (      flxdsky.asm):00698 [4]                 JMP     DSKY_PPIRD                        ; SAME AS READ MODE
                      (      flxdsky.asm):00699         ;
                      (      flxdsky.asm):00700         ;__STORAGE_________________________________________________________________________________________
                      (      flxdsky.asm):00701         ; CODES FOR NUMERICS
                      (      flxdsky.asm):00702         ; HIGH BIT ALWAYS CLEAR TO SUPPRESS DECIMAL POINT
                      (      flxdsky.asm):00703         ; SET HIGH BIT TO SHOW DECIMAL POINT
                      (      flxdsky.asm):00704         ;_________________________________________________________________________________________________
                      (      flxdsky.asm):00705         ;
EC7E                  (      flxdsky.asm):00706         DSKY_HEXMAP:
EC7E 3F               (      flxdsky.asm):00707                     .BYTE   $3F                               ; 0
EC7F 06               (      flxdsky.asm):00708                     .BYTE   $06                               ; 1
EC80 5B               (      flxdsky.asm):00709                     .BYTE   $5B                               ; 2
EC81 4F               (      flxdsky.asm):00710                     .BYTE   $4F                               ; 3
EC82 66               (      flxdsky.asm):00711                     .BYTE   $66                               ; 4
EC83 6D               (      flxdsky.asm):00712                     .BYTE   $6D                               ; 5
EC84 7D               (      flxdsky.asm):00713                     .BYTE   $7D                               ; 6
EC85 07               (      flxdsky.asm):00714                     .BYTE   $07                               ; 7
EC86 7F               (      flxdsky.asm):00715                     .BYTE   $7F                               ; 8
EC87 67               (      flxdsky.asm):00716                     .BYTE   $67                               ; 9
EC88 77               (      flxdsky.asm):00717                     .BYTE   $77                               ; A
EC89 7C               (      flxdsky.asm):00718                     .BYTE   $7C                               ; B
EC8A 39               (      flxdsky.asm):00719                     .BYTE   $39                               ; C
EC8B 5E               (      flxdsky.asm):00720                     .BYTE   $5E                               ; D
EC8C 79               (      flxdsky.asm):00721                     .BYTE   $79                               ; E
EC8D 71               (      flxdsky.asm):00722                     .BYTE   $71                               ; F
                      (      flxdsky.asm):00723         ;
EC8E                  (      flxdsky.asm):00724         DSKY_TEMP_VAL:
EC8E 00               (      flxdsky.asm):00725                     .BYTE   0
EC8F                  (      flxdsky.asm):00726         DSKY_PPIX_VAL:
EC8F 00               (      flxdsky.asm):00727                     .BYTE   0
EC90                  (      flxdsky.asm):00728         DSKY_PRESENT:
EC90 00               (      flxdsky.asm):00729                     .BYTE   0
EC91                  (      flxdsky.asm):00730         DSKYWORKVAR:
EC91 0000             (      flxdsky.asm):00731                     .BYTE   $00,$00
EC93                  (      flxdsky.asm):00732         DSKY_BUF:
EC93 0000000000000000 (      flxdsky.asm):00733                     .BYTE   $00,$00,$00,$00,$00,$00,$00,$00
EC9B                  (      flxdsky.asm):00734         DSKY_HEXBUF:
EC9B 00000000         (      flxdsky.asm):00735                     .BYTE   $00,$00,$00,$00
EC9F                  (      flxdsky.asm):00736         DSKYINITMSG:
EC9F 546E5C5E6E547940 (      flxdsky.asm):00737                     .BYTE   $54,$6E,$5C,$5E,$6E,$54,$79,$40
                      (      flxdsky.asm):00738         
ECA7                  (      flxdsky.asm):00739         DSKYMESSAGE1:
ECA7 44534B593A       (      flxdsky.asm):00740                     FCC     "DSKY:"
ECAC 04               (      flxdsky.asm):00741                     FCB     EOT
ECAD                  (      flxdsky.asm):00742         DSKYMESSAGE2:
ECAD 20494F3D3078     (      flxdsky.asm):00743                     FCC     " IO=0x"
ECB3 04               (      flxdsky.asm):00744                     FCB     EOT
ECB4                  (      flxdsky.asm):00745         DSKYMESSAGE3:
ECB4 204D4F44453D4E47 (      flxdsky.asm):00746                     FCC     " MODE=NG"                        ; PRINT DSKY TYPE
ECBC 04               (      flxdsky.asm):00747                     FCB     EOT
ECBD                  (      flxdsky.asm):00748         DSKYMESSAGE4:
ECBD 204E4F5420505245 (      flxdsky.asm):00749                     FCC     " NOT PRESENT"                    ; NOT PRESENT
     53454E54
ECC9 04               (      flxdsky.asm):00750                     FCB     EOT
                      (      drivers.asm):00563                         ENDC
                      (      drivers.asm):00564         
                      (      drivers.asm):00565         
                      (      drivers.asm):00566         
                      (      drivers.asm):00567         
                      (      drivers.asm):00568         ;_____________________________________________________________________________________________________
                      (      drivers.asm):00569         
ECCA                  (      drivers.asm):00570         HSTBUF:
ECCA                  (      drivers.asm):00571                         RMB     512
                      (        flex9.asm):00012                 INCLUDE "../software/monitor.asm"
                      (../software/monit):00001             PRAGMA CD
                      (../software/monit):00002         
                      (../software/monit):00003         ;__MONITOR_________________________________________________________________________________________
                      (../software/monit):00004         ;
                      (../software/monit):00005         ;       MINI ROM MONITOR FOR THE NHYODYNE 6809 PROCESSOR
                      (../software/monit):00006         ;
                      (../software/monit):00007         ;       WRITTEN BY: DAN WERNER -- 8/2/2022
                      (../software/monit):00008         ;       based on the ROM by Andrew Lynch
                      (../software/monit):00009         ;
                      (../software/monit):00010         ;___________________________________________________________________________________________________
                      (../software/monit):00011         ;
                      (../software/monit):00012         ; DATA CONSTANTS
                      (../software/monit):00013         ;___________________________________________________________________________________________________
                      (../software/monit):00014         ;
                      (../software/monit):00015         
     C000             (../software/monit):00016         MONSTACK                        EQU     $C000           ; STACK POINTER
                      (../software/monit):00017         
                      (../software/monit):00018         ; UART 16C550 SERIAL
     FE68             (../software/monit):00019         MONUART0        equ     $FE68           ; DATA IN/OUT
     FE69             (../software/monit):00020         MONUART1        equ     $FE69           ; CHECK RX
     FE6A             (../software/monit):00021         MONUART2        equ     $FE6A           ; INTERRUPTS
     FE6B             (../software/monit):00022         MONUART3        equ     $FE6B           ; LINE CONTROL
     FE6C             (../software/monit):00023         MONUART4        equ     $FE6C           ; MODEM CONTROL
     FE6D             (../software/monit):00024         MONUART5        equ     $FE6D           ; LINE STATUS
     FE6E             (../software/monit):00025         MONUART6        equ     $FE6E           ; MODEM STATUS
     FE6F             (../software/monit):00026         MONUART7        equ     $FE6F           ; SCRATCH REG.
                      (../software/monit):00027         
                      (../software/monit):00028         
                      (../software/monit):00029                       ORG       $EFE0
EFE0 F3               (../software/monit):00030                         FCB             $F3                             ;DI - DISABLE INTERRUPTS
EFE1 010010           (../software/monit):00031                         FCB             $01,$00,$10             ;LD     BC,$1000 -BYTES TO MOVE
EFE4 110070           (../software/monit):00032                         FCB             $11,$00,$70             ;LD     DE,$7000 -DESTINATION ADDRESS (6809 IS !A15)
EFE7 212001           (../software/monit):00033                         FCB             $21,$20,$01             ;LD     HL,$0120 -SOURCE ADDRESS
EFEA EDB0             (../software/monit):00034                         FCB             $ED,$B0                 ;LDIR            -COPY RAM
EFEC DBF0             (../software/monit):00035                         FCB             $DB,$F0                 ;IN     A,$F0    -ENABLE 6809
EFEE 0E00             (../software/monit):00036                         FCB             $0E,$00                 ;LD     C,00H    -CP/M SYSTEM RESET CALL
EFF0 CD0500           (../software/monit):00037                         FCB             $CD,$05,$00                     ;CALL   0005H    -RETURN TO PROMPT
                      (../software/monit):00038         ;
                      (../software/monit):00039         ;
                      (../software/monit):00040         ;
                      (../software/monit):00041         
                      (../software/monit):00042                 ORG     $FC00
                      (../software/monit):00043         
                      (../software/monit):00044         
                      (../software/monit):00045         ;___________________________________________________________________________________________________
                      (../software/monit):00046         ;
                      (../software/monit):00047         ;       INITIALIZE 6809
                      (../software/monit):00048         ;___________________________________________________________________________________________________
FC00                  (../software/monit):00049         MAIN:
FC00 10CEC000         (../software/monit):00050 [4]             LDS     #MONSTACK                       ; RESET STACK POINTER
FC04 4F               (../software/monit):00051 [2]             CLRA                            ; set direct page register to 0
FC05 1F8B             (../software/monit):00052 [6]             TFR     A,DP                    ;
                      (../software/monit):00053         
                      (../software/monit):00054         
FC07 4F               (../software/monit):00055 [2]             CLRA                            ; CLEAR ACCUMULATOR A
FC08 BDFD8C           (../software/monit):00056 [8]             JSR     SERIALINIT              ; INIT SERIAL PORT
                      (../software/monit):00057         
                      (../software/monit):00058         ;__CONTRL_________________________________________________________________________________________
                      (../software/monit):00059         ;
                      (../software/monit):00060         ;       MONITOR MAIN LOOP
                      (../software/monit):00061         ;__________________________________________________________________________________________________
FC0B                  (../software/monit):00062         CONTRL:
FC0B BDFD81           (../software/monit):00063 [8]             JSR         DISPLAY_CRLF                ; DISPLAY CRLF
FC0E 863E             (../software/monit):00064 [2]             LDA     #'>'                    ; CARRIAGE RETURN
FC10 BDFD8D           (../software/monit):00065 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FC13 BDFD9E           (../software/monit):00066 [8]             JSR         IOF_CONINW          ;
FC16 BDFD8D           (../software/monit):00067 [8]             JSR         WRSER1                      ; OUTPUT CHAR TO CONSOLE
                      (../software/monit):00068                                                         ;
FC19 8144             (../software/monit):00069 [2]             CMPA    #'D'                    ; IS DUMP MEMORY?
FC1B 271E             (../software/monit):00070 [3]             BEQ         DUMP                        ;
FC1D 814C             (../software/monit):00071 [2]             CMPA    #'L'                    ; IS LOAD?
FC1F 2717             (../software/monit):00072 [3]             BEQ         MLOAD                       ; YES, JUMP
FC21 814D             (../software/monit):00073 [2]             CMPA    #'M'                    ; IS CHANGE?
FC23 273F             (../software/monit):00074 [3]             BEQ         CHANGE                      ; YES, JUMP
FC25 8150             (../software/monit):00075 [2]             CMPA    #'P'                    ; IS PRINT?
FC27 2752             (../software/monit):00076 [3]             BEQ         PRINT                       ; YES, JUMP
FC29 8147             (../software/monit):00077 [2]             CMPA    #'G'                    ; IS GO?
FC2B 272C             (../software/monit):00078 [3]             BEQ         GO                  ; YES JUMP
                      (../software/monit):00079                                                         ;
                      (../software/monit):00080                                                         ; COMMAND NOT FOUND ISSUE ERROR
FC2D 863F             (../software/monit):00081 [2]             LDA     #'?'                    ; PRINT '?'
FC2F BDFD8D           (../software/monit):00082 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FC32 BDFD81           (../software/monit):00083 [8]             JSR         DISPLAY_CRLF        ; DISPLAY CRLF
FC35 7EFC0B           (../software/monit):00084 [4]             JMP         CONTRL                      ; RECEIVE NEXT CHARACTER
                      (../software/monit):00085         
FC38                  (../software/monit):00086         MLOAD:
FC38 7EFC8D           (../software/monit):00087 [4]             JMP         MONLOAD
                      (../software/monit):00088         
                      (../software/monit):00089         
FC3B                  (../software/monit):00090         DUMP:
FC3B BDFD7C           (../software/monit):00091 [8]             JSR     OUTS                    ;
FC3E BDFD1E           (../software/monit):00092 [8]             JSR         BADDR                       ;
FC41 3410             (../software/monit):00093 [5+2]           PSHS    X                           ;
FC43 BDFD7C           (../software/monit):00094 [8]             JSR         OUTS                        ;
FC46 BDFD1E           (../software/monit):00095 [8]             JSR         BADDR                       ;
FC49 3510             (../software/monit):00096 [5+2]           PULS    X                       ;
FC4B BDFD81           (../software/monit):00097 [8]             JSR         DISPLAY_CRLF    ;
FC4E                  (../software/monit):00098         DUMP_LOOP:
FC4E BDFCC7           (../software/monit):00099 [8]             JSR         DUMP_LINE           ;
FC51 BCFDB0           (../software/monit):00100 [7]             CMPX    XHI                     ;
FC54 2BF8             (../software/monit):00101 [3]             BMI         DUMP_LOOP           ;
FC56 7EFC0B           (../software/monit):00102 [4]             JMP         CONTRL                      ; RECEIVE NEXT CHARACTER
                      (../software/monit):00103         
                      (../software/monit):00104         
FC59                  (../software/monit):00105         GO:
FC59 BDFD1E           (../software/monit):00106 [8]             JSR         BADDR                       ; GET ADDRESS
FC5C BDFD7C           (../software/monit):00107 [8]             JSR         OUTS                        ; PRINT SPACE
FC5F BEFDB0           (../software/monit):00108 [6]             LDX         XHI                         ; LOAD X WITH ADDRESS
FC62 6E84             (../software/monit):00109 [3+0]           JMP         $0000,X                     ; JUMP TO ADDRESS
                      (../software/monit):00110         
                      (../software/monit):00111         ; CHANGE MEMORY(M AAAA DD NN)
FC64                  (../software/monit):00112         CHANGE:
FC64 BDFD1E           (../software/monit):00113 [8]             JSR         BADDR                       ; BUILD ADDRESS
FC67 BDFD7C           (../software/monit):00114 [8]             JSR         OUTS                        ; PRINT SPACE
FC6A BDFD7A           (../software/monit):00115 [8]             JSR         OUT2HS                      ;
FC6D BDFD2C           (../software/monit):00116 [8]             JSR         BYTE                        ;
FC70 301F             (../software/monit):00117 [4+1]           LEAX    -1,X                    ;
FC72 A784             (../software/monit):00118 [4+0]           STA     ,X                      ;
FC74 A184             (../software/monit):00119 [4+0]           CMPA    ,X                      ;
FC76 2647             (../software/monit):00120 [3]             BNE         LOAD19                      ; MEMORY DID NOT CHANGE
FC78 7EFC0B           (../software/monit):00121 [4]             JMP         CONTRL                      ;
                      (../software/monit):00122         
                      (../software/monit):00123         ; PRINT CONTENTS OF STACK
FC7B                  (../software/monit):00124         PRINT:
FC7B 10FFFDAC         (../software/monit):00125 [7]             STS         SP                          ;
FC7F BEFDAC           (../software/monit):00126 [6]             LDX         SP                  ;
FC82 C609             (../software/monit):00127 [2]             LDB         #$09                        ;
FC84                  (../software/monit):00128         PRINT2:                                 ;
FC84 BDFD7A           (../software/monit):00129 [8]             JSR         OUT2HS                      ; OUT 2 HEX & SPACE
FC87 5A               (../software/monit):00130 [2]             DECB                            ;
FC88 26FA             (../software/monit):00131 [3]             BNE         PRINT2                  ; DONE? IF NO DO MORE
FC8A 7EFC0B           (../software/monit):00132 [4]             JMP         CONTRL                  ; DONE? IF YES RETURN TO MAIN LOOP
                      (../software/monit):00133         
                      (../software/monit):00134         
FC8D                  (../software/monit):00135         MONLOAD:
                      (../software/monit):00136         
FC8D                  (../software/monit):00137         LOAD3:
FC8D BDFD9E           (../software/monit):00138 [8]             JSR         IOF_CONINW
FC90 8153             (../software/monit):00139 [2]             CMPA    #'S'
FC92 26F9             (../software/monit):00140 [3]             BNE         LOAD3               ; FIRST CHAR NOT (S)
FC94 BDFD9E           (../software/monit):00141 [8]             JSR         IOF_CONINW          ; READ CHAR
FC97 8139             (../software/monit):00142 [2]             CMPA    #'9'
FC99 2729             (../software/monit):00143 [3]             BEQ         LOAD21
FC9B 8131             (../software/monit):00144 [2]             CMPA    #'1'
FC9D 26EE             (../software/monit):00145 [3]             BNE         LOAD3               ; SECOND CHAR NOT (1)
FC9F 7FFDAE           (../software/monit):00146 [7]             CLR         CKSM                ; ZERO CHECKSUM
FCA2 BDFD2C           (../software/monit):00147 [8]             JSR         BYTE                ; READ BYTE
FCA5 8002             (../software/monit):00148 [2]             SUBA    #$02
FCA7 B7FDAF           (../software/monit):00149 [5]             STA         BYTECT              ; BYTE COUNT
                      (../software/monit):00150         ; BUILD ADDRESS
FCAA 8D72             (../software/monit):00151 [7]             BSR         BADDR
                      (../software/monit):00152         ; STORE DATA
FCAC                  (../software/monit):00153         LOAD11:
FCAC BDFD2C           (../software/monit):00154 [8]             JSR         BYTE
FCAF 7AFDAF           (../software/monit):00155 [7]             DEC         BYTECT
FCB2 2706             (../software/monit):00156 [3]             BEQ         LOAD15              ; ZERO BYTE COUNT
FCB4 A784             (../software/monit):00157 [4+0]           STA     ,X                      ; STORE DATA
FCB6 3001             (../software/monit):00158 [4+1]           LEAX    1,X
FCB8 20F2             (../software/monit):00159 [3]             BRA         LOAD11
                      (../software/monit):00160         
FCBA                  (../software/monit):00161         LOAD15:
FCBA 7CFDAE           (../software/monit):00162 [7]             INC         CKSM
FCBD 27CE             (../software/monit):00163 [3]             BEQ         LOAD3
FCBF                  (../software/monit):00164         LOAD19:
FCBF 863F             (../software/monit):00165 [2]             LDA         #'?'
FCC1 BDFD8D           (../software/monit):00166 [8]             JSR         WRSER1
FCC4                  (../software/monit):00167         LOAD21:
FCC4 7EFC0B           (../software/monit):00168 [4]     C1      JMP         CONTRL
                      (../software/monit):00169         
                      (../software/monit):00170         
                      (../software/monit):00171         
FCC7                  (../software/monit):00172         DUMP_LINE:
FCC7 BDFD63           (../software/monit):00173 [8]             JSR         OUTADDR                     ;
FCCA BDFD7C           (../software/monit):00174 [8]             JSR         OUTS                        ;
FCCD 3410             (../software/monit):00175 [5+2]           PSHS    X                       ;
FCCF C610             (../software/monit):00176 [2]             LDB         #$10                        ;
FCD1                  (../software/monit):00177         DUMP_LINE_LOOP:
FCD1 BDFD7A           (../software/monit):00178 [8]             JSR         OUT2HS                      ; OUT 2 HEX & SPACE
FCD4 5A               (../software/monit):00179 [2]             DECB                            ;
FCD5 26FA             (../software/monit):00180 [3]             BNE         DUMP_LINE_LOOP      ; DONE? IF NO DO MORE
FCD7 3510             (../software/monit):00181 [5+2]           PULS    X                           ;
FCD9 BDFD7C           (../software/monit):00182 [8]             JSR         OUTS                        ;
FCDC 863A             (../software/monit):00183 [2]             LDA         #':'                        ;
FCDE BDFD8D           (../software/monit):00184 [8]             JSR         WRSER1                      ;
FCE1 C610             (../software/monit):00185 [2]             LDB         #$10                        ;
FCE3                  (../software/monit):00186         DUMP_LINE_LOOPA:
FCE3 A600             (../software/monit):00187 [4+1]           LDA         0,X                 ;
FCE5 8120             (../software/monit):00188 [2]             CMPA    #32                     ;
FCE7 2B0A             (../software/monit):00189 [3]             BMI         DUMP_LINE_INVALID
FCE9 817F             (../software/monit):00190 [2]             CMPA    #127                    ;
FCEB 2A06             (../software/monit):00191 [3]             BPL         DUMP_LINE_INVALID
FCED BDFD8D           (../software/monit):00192 [8]             JSR         WRSER1                      ;
FCF0 7EFCF8           (../software/monit):00193 [4]             JMP         DUMP_LINE_VALID
FCF3                  (../software/monit):00194         DUMP_LINE_INVALID:                      ;
FCF3 862E             (../software/monit):00195 [2]             LDA         #'.'                        ;
FCF5 BDFD8D           (../software/monit):00196 [8]             JSR         WRSER1                      ;
FCF8                  (../software/monit):00197         DUMP_LINE_VALID:                        ;
FCF8 3001             (../software/monit):00198 [4+1]           LEAX    1,X                     ;
FCFA 5A               (../software/monit):00199 [2]             DECB                            ;
FCFB 26E6             (../software/monit):00200 [3]             BNE         DUMP_LINE_LOOPA     ; DONE? IF NO DO MORE
FCFD BDFD81           (../software/monit):00201 [8]             JSR         DISPLAY_CRLF        ;
FD00 39               (../software/monit):00202 [5]             RTS
                      (../software/monit):00203         
                      (../software/monit):00204         ; INPUT HEX CHAR
FD01                  (../software/monit):00205         INHEX:
FD01 BDFD9E           (../software/monit):00206 [8]             JSR         IOF_CONINW          ;
FD04 3402             (../software/monit):00207 [5+1]           PSHS    A                       ;
FD06 BDFD8D           (../software/monit):00208 [8]             JSR         WRSER1                      ;
FD09 3502             (../software/monit):00209 [5+1]           PULS    A                       ;
FD0B 8130             (../software/monit):00210 [2]             CMPA    #$30                    ;
FD0D 2BB5             (../software/monit):00211 [3]             BMI         C1                          ; NOT HEX
FD0F 8139             (../software/monit):00212 [2]             CMPA    #$39                    ;
FD11 2F0A             (../software/monit):00213 [3]             BLE         IN1HG                       ;
FD13 8141             (../software/monit):00214 [2]             CMPA    #$41                    ;
FD15 2BAD             (../software/monit):00215 [3]             BMI         C1                  ; NOT HEX
FD17 8146             (../software/monit):00216 [2]             CMPA    #$46                    ;
FD19 2EA9             (../software/monit):00217 [3]             BGT         C1                      ; NOT HEX
FD1B 8007             (../software/monit):00218 [2]             SUBA    #$07                    ;
FD1D                  (../software/monit):00219         IN1HG:                                  ;
FD1D 39               (../software/monit):00220 [5]             RTS                                     ;
                      (../software/monit):00221         
                      (../software/monit):00222         ; BUILD ADDRESS
FD1E                  (../software/monit):00223         BADDR:
FD1E 8D0C             (../software/monit):00224 [7]             BSR         BYTE                ; READ 2 FRAMES
FD20 B7FDB0           (../software/monit):00225 [5]             STA     XHI
FD23 8D07             (../software/monit):00226 [7]             BSR         BYTE
FD25 B7FDB1           (../software/monit):00227 [5]             STA     XLOW
FD28 BEFDB0           (../software/monit):00228 [6]             LDX         XHI                 ; (X) ADDRESS WE BUILT
FD2B 39               (../software/monit):00229 [5]             RTS
                      (../software/monit):00230         
                      (../software/monit):00231         ; INPUT BYTE (TWO FRAMES)
FD2C                  (../software/monit):00232         BYTE:
FD2C 8DD3             (../software/monit):00233 [7]             BSR         INHEX                   ; GET HEX CHAR
FD2E 48               (../software/monit):00234 [2]             ASLA
FD2F 48               (../software/monit):00235 [2]             ASLA
FD30 48               (../software/monit):00236 [2]             ASLA
FD31 48               (../software/monit):00237 [2]             ASLA
FD32 1F89             (../software/monit):00238 [6]             TFR     A,B         ; TAB
FD34 4D               (../software/monit):00239 [2]         TSTA                ; TAB
FD35 8DCA             (../software/monit):00240 [7]             BSR         INHEX
FD37 840F             (../software/monit):00241 [2]             ANDA    #$0F                    ; MASK TO 4 BITS
FD39 3404             (../software/monit):00242 [5+1]           PSHS    B           ; ABA
FD3B ABE0             (../software/monit):00243 [4+2]       ADDA    ,S+         ; ABA
FD3D 1F89             (../software/monit):00244 [6]             TFR     A,B         ; TAB
FD3F 4D               (../software/monit):00245 [2]         TSTA                ; TAB
FD40 FBFDAE           (../software/monit):00246 [5]             ADDB    CKSM
FD43 F7FDAE           (../software/monit):00247 [5]             STB     CKSM
FD46 39               (../software/monit):00248 [5]             RTS
                      (../software/monit):00249         
                      (../software/monit):00250         
                      (../software/monit):00251         
FD47                  (../software/monit):00252         MONOUTHL:
FD47 44               (../software/monit):00253 [2]             LSRA                            ; OUT HEX LEFT BCD DIGIT
FD48 44               (../software/monit):00254 [2]             LSRA                            ;
FD49 44               (../software/monit):00255 [2]             LSRA                            ;
FD4A 44               (../software/monit):00256 [2]             LSRA                            ;
                      (../software/monit):00257         
FD4B                  (../software/monit):00258         MONOUTHR:                                       ;
FD4B 840F             (../software/monit):00259 [2]             ANDA    #$0F                ; OUT HEC RIGHT DIGIT
FD4D 8B30             (../software/monit):00260 [2]             ADDA    #$30            ;
FD4F 8139             (../software/monit):00261 [2]             CMPA    #$39            ;
FD51 2302             (../software/monit):00262 [3]             BLS         OUTHR1              ;
FD53 8B07             (../software/monit):00263 [2]             ADDA    #$07                ;
FD55                  (../software/monit):00264         OUTHR1:
FD55 7EFD8D           (../software/monit):00265 [4]             JMP         WRSER1              ;
                      (../software/monit):00266         
FD58                  (../software/monit):00267         OUT2H:
FD58 A600             (../software/monit):00268 [4+1]           LDA     0,X                     ; OUTPUT 2 HEX CHAR
FD5A 8DEB             (../software/monit):00269 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD5C A600             (../software/monit):00270 [4+1]           LDA     0,X                     ;
FD5E 8DEB             (../software/monit):00271 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD60 3001             (../software/monit):00272 [4+1]           LEAX    1,X
FD62 39               (../software/monit):00273 [5]             RTS
                      (../software/monit):00274         
FD63                  (../software/monit):00275         OUTADDR:
FD63 3410             (../software/monit):00276 [5+2]           PSHS    X                       ;
FD65 3502             (../software/monit):00277 [5+1]           PULS    A                       ;
FD67 3402             (../software/monit):00278 [5+1]           PSHS    A                       ;
FD69 8DDC             (../software/monit):00279 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD6B 3502             (../software/monit):00280 [5+1]           PULS    A                       ;
FD6D 8DDC             (../software/monit):00281 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD6F 3502             (../software/monit):00282 [5+1]           PULS    A                       ;
FD71 3402             (../software/monit):00283 [5+1]           PSHS    A                       ;
FD73 8DD2             (../software/monit):00284 [7]             BSR         MONOUTHL            ; OUT LEFT HEX CHAR
FD75 3502             (../software/monit):00285 [5+1]           PULS    A                       ;
FD77 8DD2             (../software/monit):00286 [7]             BSR         MONOUTHR            ; OUT RIGHT HEX CHAR
FD79 39               (../software/monit):00287 [5]             RTS
                      (../software/monit):00288         
FD7A                  (../software/monit):00289         OUT2HS:
FD7A 8DDC             (../software/monit):00290 [7]             BSR         OUT2H               ; OUTPUT 2 HEX CHAR + SPACE
FD7C                  (../software/monit):00291         OUTS:
FD7C 8620             (../software/monit):00292 [2]             LDA         #$20                ; SPACE
FD7E 7EFD8D           (../software/monit):00293 [4]             JMP         WRSER1              ;
                      (../software/monit):00294         
                      (../software/monit):00295         
                      (../software/monit):00296         
                      (../software/monit):00297         ;__________________________________________________________________________________________________________
                      (../software/monit):00298         
FD81                  (../software/monit):00299         DISPLAY_CRLF:
FD81 860D             (../software/monit):00300 [2]             LDA     #$0D                    ; PRINT CR
FD83 BDFD8D           (../software/monit):00301 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FD86 860A             (../software/monit):00302 [2]             LDA     #$0A                    ; PRINT LF
FD88 BDFD8D           (../software/monit):00303 [8]             JSR         WRSER1                      ; OUTPUT CHARACTER
FD8B 39               (../software/monit):00304 [5]             RTS
                      (../software/monit):00305         
FD8C                  (../software/monit):00306         SERIALINIT:
                      (../software/monit):00307                 ;       LDA             #$80            ;
                      (../software/monit):00308                 ;       STA             UART3           ; SET DLAB FLAG
                      (../software/monit):00309                 ;       LDA             #12                     ; SET TO 12 = 9600 BAUD
                      (../software/monit):00310                 ;       STA             UART0           ; save baud rate
                      (../software/monit):00311                 ;       LDA             #00                     ;
                      (../software/monit):00312                 ;       STA             UART1           ;
                      (../software/monit):00313                 ;       LDA             #03                     ;
                      (../software/monit):00314                 ;       STA             UART3           ; SET 8 BIT DATA, 1 STOPBIT
                      (../software/monit):00315                 ;       STA             UART4           ;
FD8C 39               (../software/monit):00316 [5]             RTS
                      (../software/monit):00317         
FD8D                  (../software/monit):00318         WRSER1:
FD8D 3402             (../software/monit):00319 [5+1]           PSHS    A
FD8F                  (../software/monit):00320         TX_BUSYLP:
FD8F B6FE6D           (../software/monit):00321 [5]                     LDA             MONUART5                ; READ LINE STATUS REGISTER
FD92 8420             (../software/monit):00322 [2]                     ANDA    #$20                    ; TEST IF UART IS READY TO SEND (BIT 5)
FD94 8100             (../software/monit):00323 [2]                     CMPA    #$00
FD96 27F7             (../software/monit):00324 [3]                     BEQ             TX_BUSYLP               ; IF NOT REPEAT
FD98 3502             (../software/monit):00325 [5+1]           PULS    A
FD9A B7FE68           (../software/monit):00326 [5]                     STA             MONUART0                ; THEN WRITE THE CHAR TO UART
FD9D 39               (../software/monit):00327 [5]             RTS
                      (../software/monit):00328         
                      (../software/monit):00329         
FD9E                  (../software/monit):00330         IOF_CONINW:                             ;
FD9E                  (../software/monit):00331         SERIAL_INCHW1:
FD9E B6FE6D           (../software/monit):00332 [5]                     LDA         MONUART5            ; READ LINE STATUS REGISTER
FDA1 8401             (../software/monit):00333 [2]                     ANDA    #$01                    ; TEST IF DATA IN RECEIVE BUFFER
FDA3 8100             (../software/monit):00334 [2]                     CMPA    #$00
FDA5 27F7             (../software/monit):00335 [3]                     BEQ         SERIAL_INCHW1       ; LOOP UNTIL DATA IS READY
FDA7 B6FE68           (../software/monit):00336 [5]                     LDA         MONUART0            ; THEN READ THE CHAR FROM THE UART
FDAA 39               (../software/monit):00337 [5]                     RTS
                      (../software/monit):00338         
                      (../software/monit):00339         
                      (../software/monit):00340         ;_____________________________________________________________________________________________________
                      (../software/monit):00341         ;   Default ISRs.  Will be changed by OS Setup
FDAB                  (../software/monit):00342         SWIVEC:
FDAB                  (../software/monit):00343         IRQVEC:
FDAB 3B               (../software/monit):00344 [6+?]                   rti
                      (../software/monit):00345         
                      (../software/monit):00346         ; REGISTERS FOR GO
FDAC 0000             (../software/monit):00347         SP          FDB $0000           ; S-HIGH
                      (../software/monit):00348         ; END REGISTERS FOR GO
FDAE 00               (../software/monit):00349         CKSM    FCB     00                      ; CHECKSUM
FDAF 00               (../software/monit):00350         BYTECT  FCB     00                      ; BYTE COUNT
FDB0 00               (../software/monit):00351         XHI         FCB 00                      ; XREG HIGH
FDB1 00               (../software/monit):00352         XLOW    FCB     00                      ; XREG LOW
                      (../software/monit):00353         
                      (../software/monit):00354                 IFNDEF STARTOFFLEX
                      (../software/monit):00355                 ORG     $FFF2               ; SET RESET VECTOR TO MAIN PROGRAM
                      (../software/monit):00356                         FDB         SWIVEC
                      (../software/monit):00357                         FDB         MAIN
                      (../software/monit):00358                         FDB         MAIN
                      (../software/monit):00359                         FDB         IRQVEC
                      (../software/monit):00360                         FDB         MAIN
                      (../software/monit):00361                         FDB         MAIN
                      (../software/monit):00362                         FDB         MAIN
                      (../software/monit):00363         
                      (../software/monit):00364                 END
                      (../software/monit):00365                 ENDC
                      (        flex9.asm):00013         
                      (        flex9.asm):00014                 ORG     $FFF2                             ; SET RESET VECTOR TO MAIN PROGRAM
FFF2 FDAB             (        flex9.asm):00015                 FDB     SWIVEC
FFF4                  (        flex9.asm):00016         SW2VECP
FFF4 CD00             (        flex9.asm):00017                 FDB     COLDS
FFF6                  (        flex9.asm):00018         FRQVECP
FFF6 CD00             (        flex9.asm):00019                 FDB     COLDS
FFF8 FDAB             (        flex9.asm):00020                 FDB     IRQVEC
FFFA                  (        flex9.asm):00021         SW1VECP
FFFA CD00             (        flex9.asm):00022                 FDB     COLDS
FFFC                  (        flex9.asm):00023         NMIVECP
FFFC CD00             (        flex9.asm):00024                 FDB     COLDS
FFFE                  (        flex9.asm):00025         RESETV
FFFE CD00             (        flex9.asm):00026                 FDB     COLDS

Symbol Table:
[ G] ADDBX                            D354
[ G] ADDDEV                           DE8E
[ G] ADER                             0011
[ G] ASNN65                           D7D0
[ G] ASNN85                           D803
[ G] ASNNX1                           D7A7
[ G] ASNNX2                           D7AA
[ G] ASNNX4                           D7B8
[ G] ASNNX6                           D7C0
[ G] ASNNX7                           D7EF
[ G] ASNNX8                           D7F7
[ G] ASNNX9                           D804
[ G] ASNNXT                           D7A1
[ G] AVLPNT                           D41B
[ G] BADDR                            FD1E
[ G] BKLN                             D418
[ G] BKREC                            DCFD
[ G] BKREC2                           DD10
[ G] BREAK                            CE88
[ G] BREAK1                           CE98
[ G] BREAK2                           CE9B
[ G] BUFPNT                           CC14
[ G] BYTE                             FD2C
[ G] BYTECT                           FDAF
[ G] C1                               FCC4
[ G] Cdebcyl                          E98B
[ G] CDEBCYLL                         E37C
[ G] CDEBCYLM                         E37D
[ G] Cdebhead                         E98A
[ G] Cdebsec                          E98C
[ G] CDEBSEHD                         E37E
[ G] CFD_DRVSTAT                      0004
[ G] CFD_FMTTRK                       000D
[ G] CFD_MFM                          0040
[ G] CFD_READ                         0006
[ G] CFD_READDEL                      000C
[ G] CFD_READID                       000A
[ G] CFD_READTRK                      0002
[ G] CFD_RECAL                        0007
[ G] CFD_SCANEQ                       0011
[ G] CFD_SCANHIEQ                     001D
[ G] CFD_SCANLOEQ                     0019
[ G] CFD_SEEK                         000F
[ G] CFD_SENSEINT                     0008
[ G] CFD_SPECIFY                      0003
[ G] CFD_VERSION                      0010
[ G] CFD_WRITE                        0005
[ G] CFD_WRITEDEL                     0009
[ G] CHANGE                           FC64
[ G] CHAR                             CC18
[ G] CHECKINT                         E8A8
[ G] CHKNXT                           DE7D
[ G] CHKRDY                           DE0F
[ G] CHKWT                            DAB1
[ G] CHKWT2                           DABE
[ G] CHKWT4                           DAC5
[ G] CHPR                             C700
[ G] CINIT                            DE15
[ G] CKSM                             FDAE
[ G] CLASS                            CFE9
[ G] CLASS2                           D001
[ G] CLASS4                           D007
[ G] CLD                              D413
[ G] CLER                             0016
[ G] CLOS32                           DB05
[ G] CLOS35                           DB0D
[ G] CLOSE                            DADA
[ G] CLOSE1                           DAE2
[ G] CLOSE2                           DAEA
[ G] CLOSE3                           DAF4
[ G] CLOSE4                           DB0F
[ G] CLRFC2                           D544
[ G] CLRFCB                           D53B
[ G] CLRLRN                           D746
[ G] CLROFS                           D229
[ G] CLRTRY                           D670
[ G] CMFLG                            CC28
[ G] CMND                             D47F
[ G] CMND1                            D487
[ G] CMND15                           D49D
[ G] CMND2                            D4AB
[ G] CMND3                            D4B0
[ G] CMND4                            D4B4
[ G] CMND5                            D4BC
[ G] CMND7                            D4C8
[ G] CMND8                            D4CA
[ G] CMPNA1                           D562
[ G] CMPNA4                           D576
[ G] CMPNAM                           D55D
[ G] CODTBL                           D4D2
[ G] COLCNT                           CC04
[ G] COLDS                            CD00
[ G] COLMN                            CC29
[ G] COMTBL                           CC8C
[ G] CONTBL                           CC99
[ G] CONTRL                           FC0B
[ G] COPNA2                           D552
[ G] COPNAM                           D54D
[ G] COUNT                            CC4B
[ G] CP                               CC31
[ G] CPUTYP                           CC33
[ G] CRSAVE                           CC3F
[ G] CUD                              D415
[ G] CURDRV                           DE1E
[ G] CURDRVADDRESS                    DE20
[ G] CURDRVSLICE                      DE21
[ G] CURDRVTYP                        DE1F
[ G] CURFCB                           D40B
[ G] DADDBX                           CD36
[ G] DAER                             000E
[ G] DATAPT                           D40F
[ G] DATE                             CC0E
[ G] DATPNT                           CC41
[ G] DCHKRDY                          DF7C
[ G] DCINIT                           DF1B
[ G] DCLASS                           CD21
[ G] DDOCMD                           CD4B
[ G] DDRIVE                           DF3C
[ G] debcyl                           E988
[ G] DEBCYLL                          E37F
[ G] DEBCYLM                          E380
[ G] debhead                          E987
[ G] debsec                           E989
[ G] DEBSEHD                          E381
[ G] DELC                             0018
[ G] DELDEV                           DE9A
[ G] DELET2                           DC1C
[ G] DELET4                           DC30
[ G] DELET5                           DC48
[ G] DELET6                           DC50
[ G] DELET7                           DC51
[ G] DELET8                           DC55
[ G] DELET9                           DC57
[ G] DELETE                           DBED
[ G] DELNA2                           DBC5
[ G] DELNAM                           DBBE
[ G] DEVARE                           DE98
[ G] DFER                             0007
[ G] DFILSP                           CD2D
[ G] DGETCH                           CD15
[ G] DGETHX                           CD42
[ G] DINBUF                           CD1B
[ G] DINDEC                           CD48
[ G] DIRDN                            D417
[ G] DISPLAY_CRLF                     FD81
[ G] DLOAD                            CD30
[ G] DNER                             000F
[ G] DNEXTC                           CD27
[ G] DOCMD                            D334
[ G] DOFMS                            D1F2
[ G] DOFMS4                           D20E
[ G] DOFMS6                           D215
[ G] DOR_BR250                        000C
[ G] DOR_BR500                        000C
[ G] DOR_INIT                         000C
[ G] DOS                              CD90
[ G] DOS2                             CD9D
[ G] DOS3                             CDAB
[ G] DOS4                             CDB2
[ G] DOS6                             CDCD
[ G] DOS8                             CDD0
[ G] DOSTA4                           DAD9
[ G] DOSTAT                           DAC8
[ G] DOUTAD                           CD45
[ G] DOUTDE                           CD39
[ G] DOUTHE                           CD3C
[ G] DPCRLF                           CD24
[ G] DPER                             000C
[ G] DPSTRN                           CD1E
[ G] DPUTCH                           CD18
[ G] DQUICK                           DF7D
[ G] DREAD                            DEBB
[ G] DRER                             0005
[ G] DRESTORE                         DF26
[ G] DRIVE                            DE0C
[ G] DRIVE1                           DF46
[ G] DRIVEERR                         DF42
[ G] DRPTER                           CD3F
[ G] DRVADDRESS                       DE27
[ G] DRVINFO                          D436
[ G] DRVSLICE                         DE2B
[ G] DRVTYPES                         DE23
[ G] DSEC                             0005
[ G] DSEEK                            DF07
[ G] DSETEX                           CD33
[ G] DSKERS                           CC6F
[ G] DSKEXIT                          E731
[ G] DSKOP                            E718
[ G] DSKOPEND                         E7B6
[ G] DSKY_ABORT                       EA3D
[ G] DSKY_BEEP                        EBE9
[ G] DSKY_BEEP1                       EBFC
[ G] DSKY_BIN2SEG                     EAD0
[ G] DSKY_BIN2SEG1                    EAD3
[ G] DSKY_BLANK                       EBA2
[ G] DSKY_BLANK1                      EBA9
[ G] DSKY_BUF                         EC93
[ G] DSKY_CMD                         EB2E
[ G] DSKY_CMD_CLK                     0020
[ G] DSKY_CMD_CLR                     00DF
[ G] DSKY_CMD_CLRX                    00D3
[ G] DSKY_CMD_FIFO                    0040
[ G] DSKY_CMD_RDSP                    0070
[ G] DSKY_CMD_WDSP                    0090
[ G] DSKY_DIN                         EB6F
[ G] DSKY_DIN2                        EB71
[ G] DSKY_DOUT                        EB35
[ G] DSKY_DOUT2                       EB39
[ G] DSKY_GETBYTE                     EBC5
[ G] DSKY_GETKEY                      EA72
[ G] DSKY_GETKEY1                     EA92
[ G] DSKY_GETKEY1A                    EAA2
[ G] DSKY_GETKEY2                     EAA7
[ G] DSKY_HEXBUF                      EC9B
[ G] DSKY_HEXMAP                      EC7E
[ G] DSKY_INIT                        E9BF
[ G] DSKY_INITA                       E9F2
[ G] DSKY_INITB                       EA0A
[ G] DSKY_KEYMAP                      EAB4
[ G] DSKY_L1OFF                       EC30
[ G] DSKY_L1ON                        EC10
[ G] DSKY_L2OFF                       EC40
[ G] DSKY_L2ON                        EC20
[ G] DSKY_PPI                         FE60
[ G] DSKY_PPI_IDLE                    0006
[ G] DSKY_PPIA                        FE60
[ G] DSKY_PPIB                        FE61
[ G] DSKY_PPIC                        FE62
[ G] DSKY_PPIDETECT                   EA57
[ G] DSKY_PPIIDLE                     EC7B
[ G] DSKY_PPIRD                       EC68
[ G] DSKY_PPIRD1                      EC79
[ G] DSKY_PPIWR                       EC50
[ G] DSKY_PPIWR1                      EC66
[ G] DSKY_PPIX                        FE63
[ G] DSKY_PPIX_RD                     0092
[ G] DSKY_PPIX_VAL                    EC8F
[ G] DSKY_PPIX_WR                     0082
[ G] DSKY_PREINIT                     EA0E
[ G] DSKY_PRESCL                      <<incomplete>>
[ G] DSKY_PRESENT                     EC90
[ G] DSKY_PUTBYTE                     EBB2
[ G] DSKY_PUTLED                      EBD4
[ G] DSKY_PUTLED_1                    EBDB
[ G] DSKY_REINIT                      EA3E
[ G] DSKY_RESET                       EA46
[ G] DSKY_RESET1                      EA4E
[ G] DSKY_RESET2                      EA56
[ G] DSKY_SHOW                        EB17
[ G] DSKY_SHOW1                       EB1C
[ G] DSKY_ST                          EB6A
[ G] DSKY_STAT                        EA65
[ G] DSKY_STATA                       EA71
[ G] DSKY_TEMP_VAL                    EC8E
[ G] DSKYINITMSG                      EC9F
[ G] DSKYMESSAGE1                     ECA7
[ G] DSKYMESSAGE2                     ECAD
[ G] DSKYMESSAGE3                     ECB4
[ G] DSKYMESSAGE4                     ECBD
[ G] DSKYWORKVAR                      EC91
[ G] DSPR2                            CD51
[ G] DSPR3                            CD54
[ G] DSTAT                            CD4E
[ G] DTRK                             0000
[ G] DUMP                             FC3B
[ G] DUMP_LINE                        FCC7
[ G] DUMP_LINE_INVALID                FCF3
[ G] DUMP_LINE_LOOP                   FCD1
[ G] DUMP_LINE_LOOPA                  FCE3
[ G] DUMP_LINE_VALID                  FCF8
[ G] DUMP_LOOP                        FC4E
[ G] DVERIFY                          DEF3
[ G] DWARM                            DF25
[ G] DWRITE                           DED7
[ G] EFER                             0008
[ G] ENDOFFLEX                        DEFF
[ G] ENDSENDINT                       E8F7
[ G] ENTRY                            CD67
[ G] ENTRY2                           CD8B
[ G] EOT                              0004
[ G] ERNM                             CCA1
[ G] ERRCLR                           E8C5
[ G] ERRTYP                           CC20
[ G] ERRVEC                           CC2D
[ G] ETRIES                           D411
[ G] EXCLS                            D45D
[ G] EXCLS1                           D460
[ G] EXTTBL                           D10D
[ G] FAS                              0002
[ G] FBER                             0002
[ G] FC_RESETFDC                      E94C
[ G] FCBBAS                           D409
[ G] FCBSTR                           D40B
[ G] FCD                              002F
[ G] FCMD                             E98F
[ G] FCS                              001E
[ G] FD_DETECT                        E916
[ G] FD_DETECT1                       E92F
[ G] FDC_DATA                         FE31
[ G] FDC_DCR                          FE35
[ G] FDC_DOR                          FE36
[ G] FDC_MSR                          FE30
[ G] FDC_RESET                        FE33
[ G] FDC_TC                           FE37
[ G] FDDELAY                          E96F
[ G] FDI                              0022
[ G] FDN                              0003
[ G] FDT                              0019
[ G] FDVDELAY                         E978
[ G] FEA                              0013
[ G] FEER                             0003
[ G] FES                              0001
[ G] FFC                              0000
[ G] FFD                              0032
[ G] FFN                              0004
[ G] FID                              000F
[ G] FIER                             0014
[ G] FILEKO                           CC2F
[ G] FILIN                            CC26
[ G] FILIO                            CF1D
[ G] FILIO2                           CF25
[ G] FILIO4                           CF2B
[ G] FILIO6                           CF34
[ G] FILOUT                           CC24
[ G] FL_READ_SECTOR                   E4F9
[ G] FL_READ_SECTOR_ERROR             E514
[ G] FL_READ_SECTOR_RAW               E545
[ G] FL_SETUP                         E383
[ G] FL_WRITE_SECTOR                  E665
[ G] FL_WRITE_SECTOR_ERROR            E670
[ G] FLERR                            E98D
[ G] FLOPPY_RETRIES                   0006
[ G] FLOPPY_RETRIES1                  0002
[ G] FLOPPYMESSAGE1                   E993
[ G] FLOPPYMESSAGE2                   E9A0
[ G] FLOPPYMESSAGE3                   E9A7
[ G] FLOPPYMESSAGE4                   E9B4
[ G] FLOPPYWORKVAR                    E9BD
[ G] FLP                              001C
[ G] FLR                              0035
[ G] FLRETRY                          E991
[ G] FLRETRY1                         E992
[ G] FMP                              0017
[ G] FMS                              D406
[ G] FMSBSY                           CC30
[ G] FMSCLS                           D403
[ G] FMSINT                           D400
[ G] FMX                              003C
[ G] FNDENT                           DEB5
[ G] FNDFC3                           D529
[ G] FNDFC4                           D531
[ G] FNDFC6                           D537
[ G] FNDFCB                           D520
[ G] FNDN04                           D8B3
[ G] FNDN06                           D8C4
[ G] FNDN08                           D8CE
[ G] FNDNA1                           D8DC
[ G] FNDNA2                           D8E8
[ G] FNDNA3                           D8F3
[ G] FNDNA4                           D8F4
[ G] FNDNA6                           D8FF
[ G] FNDNA8                           D907
[ G] FNDNA9                           D909
[ G] FNDNAM                           D89B
[ G] FNE                              000C
[ G] FNK                              0038
[ G] FNU                              0010
[ G] FRI                              0023
[ G] FRN                              0020
[ G] FRQVECP                          FFF6
[ G] FSA                              0011
[ G] FSB                              0040
[ G] FSC                              003B
[ G] FSECMP                           D78F
[ G] FSER                             0017
[ G] FSP                              003C
[ G] FSZ                              0015
[ G] FWB                              0024
[ G] GET                              D21A
[ G] GETAV2                           D932
[ G] GETAV3                           D93C
[ G] GETAV4                           D93E
[ G] GETAVL                           D920
[ G] GETCH4                           CF11
[ G] GETCH5                           CF16
[ G] GETCH6                           CF19
[ G] GETCHR                           CEF7
[ G] GETCUR                           D666
[ G] GETDI2                           D94F
[ G] GETDIS                           D93F
[ G] GETF35                           D073
[ G] GETFI2                           D05B
[ G] GETFI3                           D070
[ G] GETFI4                           D075
[ G] GETFI5                           D078
[ G] GETFIL                           D032
[ G] GETFS2                           D78E
[ G] GETFSM                           DDB7
[ G] GETFST                           D78A
[ G] GETHE2                           D140
[ G] GETHE4                           D14D
[ G] GETHE6                           D161
[ G] GETHE8                           D167
[ G] GETHE9                           D16A
[ G] GETHEX                           D13D
[ G] GETIR                            D840
[ G] GETIR1                           D85B
[ G] GETIR2                           D866
[ G] GETIR4                           D86E
[ G] GETIR8                           D87E
[ G] GETOP2                           D25F
[ G] GETOP4                           D279
[ G] GETOPN                           D253
[ G] GETRAN                           D577
[ G] GETS1                            DDC2
[ G] GETS2                            DDC4
[ G] GFDATA                           E8FA
[ G] GFDATA1                          E915
[ G] GO                               FC59
[ G] GOTFIL                           CC4C
[ G] GWRR_POLL                        E72E
[ G] HARDWARE_DETCT                   E986
[ G] HSTBUF                           ECCA
[ G] ICER                             0001
[ G] IDE_ABORT                        DFB4
[ G] IDE_CONVERT_SECTOR               E289
[ G] IDE_INITA                        DFD6
[ G] IDE_PPIDETECT                    E080
[ G] IDE_PRINT_INFO                   DFBD
[ G] IDE_READ                         E2CA
[ G] IDE_READ_BUFFER                  E20A
[ G] IDE_READ_INFO                    E025
[ G] IDE_READ_INFO_ABORT              E06E
[ G] IDE_READ_INFO_OK                 E07A
[ G] IDE_READ_NO_SETUP                E2CD
[ G] IDE_READ_RAW_SECTOR              E0C1
[ G] IDE_READ_SECTOR                  E08E
[ G] IDE_READ_SECTOR_DIRTY            E0DF
[ G] IDE_READ_SECTOR_DIRTY1           E0E4
[ G] IDE_READ_SECTOR_DIRTY_ERROR      E10C
[ G] IDE_READ_SECTOR_ERROR            E0BD
[ G] IDE_SETUP_LBA                    E246
[ G] IDE_WAIT_DRQ                     E1DA
[ G] IDE_WAIT_DRQ1                    E1E4
[ G] IDE_WAIT_DRQ2                    E206
[ G] IDE_WAIT_DRQ3                    E208
[ G] IDE_WAIT_DRQE                    E201
[ G] IDE_WAIT_NOT_BUSY                E1B1
[ G] IDE_WAIT_NOT_BUSY1               E1BB
[ G] IDE_WAIT_NOT_BUSY2               E1D5
[ G] IDE_WAIT_NOT_BUSY3               E1D7
[ G] IDE_WRITE                        E2EF
[ G] IDE_WRITE_BUFFER                 E228
[ G] IDE_WRITE_SECTOR                 E10F
[ G] IDE_WRITE_SECTOR_ERROR           E173
[ G] IDE_WRITE_SECTOR_ERROR1          E171
[ G] IDEBUFRD                         E20E
[ G] IDEBUFWT                         E22C
[ G] IFER                             000D
[ G] IHDONE                           DE8D
[ G] IHNDLR                           DE7A
[ G] IHNDLRP                          D3E7
[ G] IN1HG                            FD1D
[ G] INBU65                           CE6B
[ G] INBUF                            CE2A
[ G] INBUF2                           CE30
[ G] INBUF3                           CE49
[ G] INBUF4                           CE4E
[ G] INBUF6                           CE55
[ G] INBUF7                           CE70
[ G] INCH                             CD09
[ G] INCH2                            CD0C
[ G] INCHNE                           DE6D
[ G] INCHNEP                          D3E5
[ G] INCHNL                           CC23
[ G] INDEC                            D186
[ G] INDEC2                           D189
[ G] INDEX                            CC3D
[ G] INER                             0015
[ G] INHEX                            FD01
[ G] INIT                             D43A
[ G] INIT1                            CD5B
[ G] INIT2                            D450
[ G] INIT4                            D455
[ G] INITI                            CD57
[ G] IOF_CONINW                       FD9E
[ G] IOTEMP                           CC47
[ G] IRER                             0013
[ G] IRFAS                            0004
[ G] IRL                              0018
[ G] IRQLL                            DEB6
[ G] IRQVEC                           FDAB
[ G] IRQVECP                          D3EB
[ G] IRS                              0010
[ G] ISEC                             0003
[ G] KY_0                             0000
[ G] KY_1                             0001
[ G] KY_2                             0002
[ G] KY_3                             0003
[ G] KY_4                             0004
[ G] KY_5                             0005
[ G] KY_6                             0006
[ G] KY_7                             0007
[ G] KY_8                             0008
[ G] KY_9                             0009
[ G] KY_A                             000A
[ G] KY_B                             000B
[ G] KY_BK                            0011
[ G] KY_BO                            0017
[ G] KY_C                             000C
[ G] KY_CL                            0012
[ G] KY_D                             000D
[ G] KY_DE                            0014
[ G] KY_E                             000E
[ G] KY_EN                            0013
[ G] KY_EX                            0015
[ G] KY_F                             000F
[ G] KY_F1                            0021
[ G] KY_F2                            0020
[ G] KY_F3                            0019
[ G] KY_F4                            0018
[ G] KY_FW                            0010
[ G] KY_GO                            0016
[ G] LBL                              0080
[ G] LC400                            C400
[ G] LD0AE                            D0AE
[ G] LD20B                            D20B
[ G] LD287                            D287
[ G] LD3E1                            D3E1
[ G] LD9D6                            D9D6
[ G] LGO                              D239
[ G] LGO2                             D24B
[ G] LINBUF                           C080
[ G] LINE                             CC1A
[ G] LKNAM                            CE00
[ G] LKNAM3                           CE04
[ G] LKNAM4                           CE0C
[ G] LKNAM6                           CE18
[ G] LKNAM8                           CE24
[ G] LOAD                             D1B0
[ G] LOAD11                           FCAC
[ G] LOAD15                           FCBA
[ G] LOAD19                           FCBF
[ G] LOAD2                            D1B3
[ G] LOAD21                           FCC4
[ G] LOAD3                            FC8D
[ G] LOAD4                            D1CE
[ G] LOAD6                            D1E3
[ G] LOADADDR                         C400
[ G] LOCK                             C709
[ G] LSTFC                            0016
[ G] LSTSEC                           000F
[ G] LSTTRK                           004C
[ G] LSTTRM                           CC11
[ G] MAIN                             FC00
[ G] MAIND                            0005
[ G] MAPUP                            CC49
[ G] MAXSP                            007F
[ G] MEMEND                           CC2B
[ G] MESSAGE1                         E33B
[ G] MESSAGE2                         E343
[ G] MESSAGE3                         E34A
[ G] MESSAGE4                         E357
[ G] MESSAGE5                         E368
[ G] MESSAGE6                         E379
[ G] MEXIT                            D356
[ G] MEXIT2                           D35F
[ G] MLOAD                            FC38
[ G] MONITR                           DE33
[ G] MONITRP                          D3F3
[ G] MONLOAD                          FC8D
[ G] MONOUTHL                         FD47
[ G] MONOUTHR                         FD4B
[ G] MONSTACK                         C000
[ G] MONUART0                         FE68
[ G] MONUART1                         FE69
[ G] MONUART2                         FE6A
[ G] MONUART3                         FE6B
[ G] MONUART4                         FE6C
[ G] MONUART5                         FE6D
[ G] MONUART6                         FE6E
[ G] MONUART7                         FE6F
[ G] NEXTS                            DA9E
[ G] NEXTS4                           DAB0
[ G] NFER                             0004
[ G] NFERR                            CDD3
[ G] NFERR1                           CDD8
[ G] NFERR2                           CDDB
[ G] NFERR4                           CDDE
[ G] NL                               000B
[ G] NMIVECP                          FFFC
[ G] NODEV                            DEA4
[ G] NODR                             0004
[ G] NOER                             0000
[ G] NONMER                           D32E
[ G] NONMST                           CC65
[ G] NOTRST                           CC56
[ G] NRER                             0010
[ G] NTRST                            CC7C
[ G] NUL                              0000
[ G] NXTCH                            D00A
[ G] NXTCH3                           D015
[ G] NXTCH4                           D02E
[ G] NXTRD2                           DDE8
[ G] NXTRD4                           DDEB
[ G] NXTRD6                           DDEE
[ G] NXTRDY                           DDD5
[ G] OFFSET                           CC1B
[ G] OPNCLD                           D825
[ G] OPNCUD                           D81F
[ G] OPNDIR                           D825
[ G] OPNERR                           D9D8
[ G] OPNIR                            D82D
[ G] OPNR12                           D9BC
[ G] OPNR15                           D9CF
[ G] OPNRD                            D98F
[ G] OPNRD1                           D9A9
[ G] OPNRD2                           D9D1
[ G] OPNRD3                           D9D2
[ G] OPNRW                            DB10
[ G] OPNSIR                           D818
[ G] OPNW85                           DA74
[ G] OPNWT                            D9E2
[ G] OPNWT3                           D9F1
[ G] OPNWT4                           DA09
[ G] OPNWT5                           DA13
[ G] OPNWT8                           DA56
[ G] OPNWT9                           DA77
[ G] OUT2H                            FD58
[ G] OUT2HS                           FD7A
[ G] OUTADDR                          FD63
[ G] OUTADR                           CFCC
[ G] OUTCH                            CD0F
[ G] OUTCH2                           CD12
[ G] OUTCHN                           CC22
[ G] OUTDE4                           CF92
[ G] OUTDEC                           CF82
[ G] OUTDI2                           CFA2
[ G] OUTDI5                           CFAE
[ G] OUTDI6                           CFC5
[ G] OUTDI8                           CFCA
[ G] OUTDIG                           CF9F
[ G] OUTHEX                           CFD0
[ G] OUTHEXA                          E32D
[ G] OUTHL                            CFD8
[ G] OUTHR                            CFDC
[ G] OUTHR1                           FD55
[ G] OUTHR2                           CFE6
[ G] OUTNUM                           CC4A
[ G] OUTS                             FD7C
[ G] PCHK                             CCD8
[ G] PCRL15                           CED3
[ G] PCRL18                           CED8
[ G] PCRL19                           CEDA
[ G] PCRLF                            CEB1
[ G] PCRLF1                           CECC
[ G] PCRLF2                           CEDD
[ G] PCRLF4                           CEEC
[ G] PCRLF6                           CEF2
[ G] PCRLF8                           CEF4
[ G] PCRLF9                           CEF6
[ G] PDATA1                           CE7B
[ G] PFDATA                           E847
[ G] PFDATAS                          E878
[ G] PINIT                            CCC0
[ G] POSI05                           DD26
[ G] POSI65                           DD92
[ G] POSI68                           DD97
[ G] POSI75                           DDAE
[ G] POSI82                           DDB4
[ G] POSI85                           DDB6
[ G] POSIT                            DD13
[ G] POSIT0                           DD22
[ G] POSIT1                           DD27
[ G] POSIT2                           DD33
[ G] POSIT3                           DD3A
[ G] POSIT4                           DD4E
[ G] POSIT5                           DD68
[ G] POSIT6                           DD7A
[ G] POSIT7                           DD9D
[ G] POSIT8                           DDB2
[ G] POUT                             CCE4
[ G] PPIDE_A0_LINE                    0001
[ G] PPIDE_A1_LINE                    0002
[ G] PPIDE_A2_LINE                    0004
[ G] PPIDE_ASTATUS                    0017
[ G] PPIDE_CMD_ID                     00EC
[ G] PPIDE_CMD_INIT                   0091
[ G] PPIDE_CMD_READ                   0020
[ G] PPIDE_CMD_RECAL                  0010
[ G] PPIDE_CMD_SPINDOWN               00E0
[ G] PPIDE_CMD_SPINUP                 00E1
[ G] PPIDE_CMD_WRITE                  0030
[ G] PPIDE_COMMAND                    000F
[ G] PPIDE_CONTROL                    0016
[ G] PPIDE_CS0_LINE                   0008
[ G] PPIDE_CS1_LINE                   0010
[ G] PPIDE_DATA                       0008
[ G] PPIDE_DEVICE                     000E
[ G] PPIDE_ERR                        0009
[ G] PPIDE_INIT                       DF83
[ G] PPIDE_LBAHI                      000D
[ G] PPIDE_LBALOW                     000B
[ G] PPIDE_LBAMID                     000C
[ G] PPIDE_PPI                        FE60
[ G] PPIDE_PROBE                      DFDA
[ G] PPIDE_PROBE_FAIL                 E022
[ G] PPIDE_PROBE_SUCCESS              E024
[ G] PPIDE_RD_LINE                    0040
[ G] PPIDE_RESET                      E183
[ G] PPIDE_RST_LINE                   0080
[ G] PPIDE_SEC_CNT                    000A
[ G] PPIDE_STATUS                     000F
[ G] PPIDE_WR_LINE                    0020
[ G] PPIDECNTRL                       FE62
[ G] PPIDEHI                          FE61
[ G] PPIDEINDEX                       DF7E
[ G] PPIDELO                          FE60
[ G] PPIDEPPIC                        FE63
[ G] PPIDETIMEOUT                     DF7F
[ G] PPIDETMP                         E382
[ G] PPIDEWORKVAR                     DF81
[ G] PPRD_IDE_8255                    0092
[ G] PPRMPT                           CC4E
[ G] PPWR_IDE_8255                    0080
[ G] PR0                              CCF8
[ G] PR1                              CCFC
[ G] PRCNT                            CC34
[ G] PRINT                            FC7B
[ G] PRINT2                           FC84
[ G] PRMPT                            CCAC
[ G] PRMTUSR                          CE25
[ G] PRSPL2                           C703
[ G] PRSPL3                           C706
[ G] PRSPL4                           C709
[ G] PRSPL5                           C70C
[ G] PRSPL6                           C70F
[ G] PRSPLI                           C700
[ G] PRTM                             D07C
[ G] PRTM1                            D094
[ G] PRTM2                            D099
[ G] PRTM3                            D0A7
[ G] PRTM5                            D0C0
[ G] PRTM6                            D0C3
[ G] PRTM7                            D0C6
[ G] PRVCHR                           CC19
[ G] PSTRNG                           CE79
[ G] PUTAV2                           D960
[ G] PUTAVL                           D950
[ G] PUTC68                           CF72
[ G] PUTC75                           CF7F
[ G] PUTCH2                           CF4B
[ G] PUTCH4                           CF60
[ G] PUTCH6                           CF62
[ G] PUTCH7                           CF7C
[ G] PUTCHR                           CF3D
[ G] PUTIR                            D87F
[ G] PUTIR2                           D88A
[ G] PUTNXT                           D585
[ G] PUTRA2                           D5B4
[ G] PUTRA4                           D5B7
[ G] PUTRAN                           D598
[ G] PUTSP2                           D704
[ G] PUTSP4                           D714
[ G] PUTSP6                           D71B
[ G] PUTSPC                           D6FA
[ G] QCNT                             C71B
[ G] QUICK                            DE12
[ G] RDD_POLL                         E785
[ G] RDER                             0009
[ G] RDNEX1                           D622
[ G] RDNEX2                           D628
[ G] RDNEX3                           D640
[ G] RDNEX4                           D644
[ G] RDNEX6                           D646
[ G] RDNEX8                           D648
[ G] RDNEXT                           D614
[ G] RDS1                             E7A4
[ G] RDSEQ                            D5FD
[ G] RDSEQ0                           D608
[ G] RDSEQ1                           D60F
[ G] READ                             DE00
[ G] READERR                          DEC8
[ G] READFL1                          E5D4
[ G] READFL_DIRTY                     E5AD
[ G] READFLDONE                       E64D
[ G] READFLOPPY                       DECD
[ G] READIDE                          DED2
[ G] READS2                           D653
[ G] READS4                           D65D
[ G] READS6                           D665
[ G] READSS                           D649
[ G] RECAL                            E81D
[ G] REMFC2                           D519
[ G] REMFCB                           D510
[ G] RENAM1                           DB51
[ G] RENAM4                           DB70
[ G] RENAM5                           DB74
[ G] RENAM6                           DB75
[ G] RENAME                           DB43
[ G] RENTER                           CD06
[ G] RESETV                           FFFE
[ G] RESTIO                           CDE4
[ G] RESTORE                          DE09
[ G] RESTOREERR                       DF33
[ G] RESTOREFLOPPY                    DF37
[ G] RESTOREIDE                       DF39
[ G] RESUL3                           E7C2
[ G] RETADR                           CC43
[ G] RETRN                            D346
[ G] RETRNR                           CC16
[ G] RETRY                            D678
[ G] RETRY2                           D68D
[ G] RETRY4                           D6A1
[ G] RETRY6                           D6A4
[ G] REWIN2                           D5F8
[ G] REWIND                           D5EA
[ G] RMER                             0019
[ G] RNFMSK                           0010
[ G] RPTE44                           D2F6
[ G] RPTE85                           D314
[ G] RPTER1                           D2A4
[ G] RPTER2                           D2B4
[ G] RPTER4                           D2E2
[ G] RPTER6                           D2F8
[ G] RPTER7                           D300
[ G] RPTER9                           D329
[ G] RPTERR                           D28A
[ G] RRER                             0018
[ G] RS                               0004
[ G] RSC                              0007
[ G] RST_DLY                          E1A1
[ G] RSTNA2                           DDCA
[ G] RSTNAM                           DDC5
[ G] RSTRIO                           CD2A
[ G] RTC                              0005
[ G] RTS                              CDFF
[ G] SBC                              0037
[ G] SCC                              0009
[ G] SCMSK                            007F
[ G] SECMAP                           D41D
[ G] SEEK                             DE1B
[ G] SEEKERR                          DF12
[ G] SEEKFLOPPY                       DF16
[ G] SEEKIDE                          DF18
[ G] SENDINT                          E8DD
[ G] SERIAL_INCHW1                    FD9E
[ G] SERIALINIT                       FD8C
[ G] SET_PPI_RD                       E311
[ G] SET_PPI_WR                       E31F
[ G] SETEX4                           D0FB
[ G] SETEX5                           D104
[ G] SETEX6                           D10B
[ G] SETEXT                           D0E7
[ G] SETFC2                           D507
[ G] SETFCB                           D4FE
[ G] SETFD                            D90E
[ G] SETFD2                           D91F
[ G] SETMA2                           DCEF
[ G] SETMAX                           DCD8
[ G] SETST                            DA8D
[ G] SETTRACK                         E7EE
[ G] SETTRK1                          E800
[ G] SETTRKEXIT                       E846
[ G] SETUP_FD_CHS                     E6E8
[ G] SINDIR                           D41A
[ G] SKPSP2                           D0D6
[ G] SKPSP4                           D0E0
[ G] SKPSPC                           D0D0
[ G] SL                               0100
[ G] SNDFDWR                          E73B
[ G] SP                               FDAC
[ G] SPARES                           CC35
[ G] SPC                              0020
[ G] SPCLS                            CC21
[ G] SRCHLP                           DEA9
[ G] SRCHLST                          DEA6
[ G] SRDSE2                           D5CA
[ G] SRDSE6                           D5E4
[ G] SRDSE7                           D5E7
[ G] SRDSE8                           D5E9
[ G] SRDSEQ                           D5BC
[ G] ST0                              E990
[ G] STACK                            C07F
[ G] STAR                             C400
[ G] STAR0                            C407
[ G] STARTOFFLEX                      C000
[ G] STAT                             DE5D
[ G] STER                             0012
[ G] STIME                            D370
[ G] STKSTR                           CC45
[ G] STRIES                           D412
[ G] SW1VECP                          FFFA
[ G] SW2VECP                          FFF4
[ G] SWAP                             DB7A
[ G] SWAP2                            DB82
[ G] SWAP4                            DB9C
[ G] SWAP6                            DBA6
[ G] SWIVEC                           FDAB
[ G] SWIVECP                          D3E9
[ G] SWPNM                            DBAA
[ G] SWPNM2                           DBAC
[ G] SWPNM4                           DBB8
[ G] SWPNM5                           DBB9
[ G] SWTSE2                           D6ED
[ G] SWTSE4                           D6F2
[ G] SWTSE6                           D6F7
[ G] SWTSEQ                           D6D7
[ G] SYSDAY                           CC0F
[ G] SYSDRV                           CC0B
[ G] SYSFCB                           C840
[ G] SYSFLG                           CC0D
[ G] SYSMTH                           CC0E
[ G] SYSYR                            CC10
[ G] TADR                             CC1E
[ G] TAPPTR                           DEB9
[ G] Temp                             CC4D
[ G] TEMP                             D40D
[ G] TINIT                            DE3F
[ G] TINITP                           D3F5
[ G] TMER                             0006
[ G] TMINT                            DE3E
[ G] TMOFF                            DE3E
[ G] TMON                             DE3E
[ G] TMRFLG                           CC2A
[ G] TREDIR                           DE68
[ G] TRMSK                            007F
[ G] TSTHE2                           D173
[ G] TSTHE3                           D17F
[ G] TSTHE4                           D183
[ G] TSTHEX                           D16D
[ G] TSTNAM                           D22F
[ G] TSTSTR                           D3FD
[ G] TTYBE                            CC07
[ G] TTYBS                            CC00
[ G] TTYDEL                           CC01
[ G] TTYDP                            CC03
[ G] TTYEJ                            CC08
[ G] TTYEOL                           CC02
[ G] TTYESC                           CC0A
[ G] TTYNL                            CC05
[ G] TTYPS                            CC09
[ G] TTYTB                            CC06
[ G] TX_BUSYLP                        FD8F
[ G] UART0                            FE68
[ G] UART1                            FE69
[ G] UART2                            FE6A
[ G] UART3                            FE6B
[ G] UART4                            FE6C
[ G] UART5                            FE6D
[ G] UART6                            FE6E
[ G] UART7                            FE6F
[ G] UNIT                             E98E
[ G] UNLOCK                           C70C
[ G] UPDF75                           DC99
[ G] UPDFS2                           DC66
[ G] UPDFS4                           DC7A
[ G] UPDFS6                           DC91
[ G] UPDFS7                           DC96
[ G] UPDFS8                           DC9E
[ G] UPDFS9                           DCAE
[ G] UPDFSM                           DC5A
[ G] USEDSKYKB                        0001
[ G] USEDSKYNG                        0001
[ G] USRTBL                           CC12
[ G] VERIFY                           DE06
[ G] VERIFYERR                        DEFE
[ G] VERIFYFLOPPY                     DF02
[ G] VERIFYIDE                        DF04
[ G] Vers                             C402
[ G] VINCH                            DE43
[ G] VOUTCH                           DE4C
[ G] VRFYFG                           D435
[ G] WAINT                            E832
[ G] WARM                             DE18
[ G] WARMS                            CD03
[ G] WHATST                           CC50
[ G] WPER                             000B
[ G] WRF1                             E84D
[ G] WRF1S                            E87A
[ G] WRF2                             E872
[ G] WRF2S                            E88D
[ G] WRITE                            DE03
[ G] WRITEERR                         DEE4
[ G] WRITEFL1                         E6AB
[ G] WRITEFLDONE                      E6E5
[ G] WRITEFLOPPY                      DEE9
[ G] WRITEIDE                         DEEE
[ G] WRITIT                           DBD0
[ G] WRITS2                           D6B1
[ G] WRITS4                           D6C5
[ G] WRITS6                           D6D1
[ G] WRITS7                           D6D2
[ G] WRITS8                           D6D4
[ G] WRITSS                           D6A7
[ G] WRKDRV                           CC0C
[ G] WRR_POLL                         E7CF
[ G] WRS1                             E7D9
[ G] WRS2                             E7DB
[ G] WRS3                             E7EB
[ G] WRSER1                           FD8D
[ G] WRTDI2                           D98C
[ G] WRTDI4                           D98E
[ G] WRTDIR                           D972
[ G] WRTER1                           DBE4
[ G] WRTER2                           DBE8
[ G] WRTER3                           DBEA
[ G] WRTER4                           DBEC
[ G] WRTERR                           DBD8
[ G] WTAPP                            DB1E
[ G] WTAPP2                           DB36
[ G] WTAPP4                           DB3D
[ G] WTAPP6                           DB3E
[ G] WTER                             000A
[ G] WTFSM                            DCAF
[ G] WTFSM2                           DCC3
[ G] WTNEX1                           D77A
[ G] WTNEXT                           D753
[ G] WTSEQ                            D71C
[ G] WTSEQ2                           D736
[ G] WTSEQ4                           D745
[ G] XFR                              CC1D
[ G] XHI                              FDB0
[ G] XLOW                             FDB1
[ G] XTEMP                            CC3B
[ G] ZC43A                            C425
[ G] ZC47E                            C47C
[ G] ZC488                            C486
[ G] ZC4A0                            C49E
[ G] ZC4AE                            C4B0
[ G] ZC4B0                            C4B2
[ G] ZC4B2                            C4B4
[ G] ZC4BB                            C4BD
[ G] ZC4C4                            C4C6
[ G] ZC4CA                            C4CC
[ G] ZC4D6                            C4D8
[ G] ZC555                            C4DE
[ G] ZC810                            C4F1
[ G] ZC82B                            C519
[ G] ZC82E                            C522
[ G] ZC951                            C549
